<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江南一点雨</title>
  
  <subtitle>江南一点雨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.javaboy.org/"/>
  <updated>2022-12-19T11:53:14.559Z</updated>
  <id>http://www.javaboy.org/</id>
  
  <author>
    <name>江南一点雨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Security + Vue + Flowable 怎么玩？</title>
    <link href="http://www.javaboy.org/2022/0822/springsecurity-vue-flowable.html"/>
    <id>http://www.javaboy.org/2022/0822/springsecurity-vue-flowable.html</id>
    <published>2022-08-22T11:40:49.000Z</published>
    <updated>2022-12-19T11:53:14.559Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>之前松哥发过一篇文章，和小伙伴们分享了 Spring Boot+Vue+Flowable 的具体玩法，传送门：</p><a id="more"></a><ul><li><a href="https://mp.weixin.qq.com/s/QEXceZ0KmDKFMcYq-B4Wkg" target="_blank" rel="noopener">SpringBoot+Vue+Flowable，模拟一个请假审批流程！</a></li></ul><p>不过在那篇文章中，所有涉及到用户的地方，都是手动输入的，这显然不太好，例如开启一个请假流程：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220808205124.png" alt></p><p>这个流程中需要用户输入自己的姓名，其实如果当前用户登录了，就不用输入用户名了，直接就使用当前登录的用户名。</p><p>另一方面，当我们引入了用户系统之后，当用户提交请假申请的时候，也可以指定审批人，这样看起来就更真实了。</p><p>所以，今天我们就整篇文章，我们引入 Spring Security，据此来构建用户系统，一起来看下有了用户系统的流程引擎该是什么样子。</p><h2 id="1-效果展示"><a href="#1-效果展示" class="headerlink" title="1. 效果展示"></a>1. 效果展示</h2><p>东西我已经做好了，先截个图给大家看下：</p><p><img src="http://img.itboyhub.com/2022/08/20220818192154.png" alt></p><p>这个页面分了三部分：</p><ol><li>最上面的是请假申请，用户只需要填入请假天数、请假理由，并且选择审批人即可，选择审批人的时候，可以直接指定审批人的名字，也可以选择审批人的角色，例如选择经理这个角色，那么将来只要角色为经理的任意用户登录成功之后，就可以看到自己需要审批的请假了。</li><li>中间的列表展示当前登录用户曾经提交过的请假申请，这些申请的状态分为三种，分别是已通过、已拒绝以及待审批。</li><li>下面的列表是这个用户需要审批的其他用户提交的请假申请，图片中这个用户暂无要审批的任务，如果有的话，这个地方会通过表格展示出来，表格中每一行有批准和拒绝两个按钮，点击之后就可以实现自己的操作了。</li></ol><p>这就是我们这次要实现的效果了，相比于<a href="https://mp.weixin.qq.com/s/QEXceZ0KmDKFMcYq-B4Wkg" target="_blank" rel="noopener">SpringBoot+Vue+Flowable，模拟一个请假审批流程！</a>文章的案例，这次的显然看起来更像一回事，不过本文的案例是在<a href="https://mp.weixin.qq.com/s/QEXceZ0KmDKFMcYq-B4Wkg" target="_blank" rel="noopener">上篇文章</a>案例的基础上完成的，没看过上篇文章的小伙伴建议先看下<a href="https://mp.weixin.qq.com/s/QEXceZ0KmDKFMcYq-B4Wkg" target="_blank" rel="noopener">上篇文章</a>，<a href="https://mp.weixin.qq.com/s/QEXceZ0KmDKFMcYq-B4Wkg" target="_blank" rel="noopener">上篇文章</a>中的案例，大家可以在微信公众号江南一点雨的后台回复 <strong>flowable02</strong> 获取。</p><h2 id="2-两套用户体系"><a href="#2-两套用户体系" class="headerlink" title="2. 两套用户体系"></a>2. 两套用户体系</h2><p>玩过工作流的小伙伴应该都知道，工作流中其实自带了一套用户系统，但是我们自己的系统往往也有自己的用户体系，那么如何将两者融合起来呢？或者说是否有必要将两者融合起来呢？</p><p>如果你想将自己系统的用户体系和 flowable 中的用户体系融合起来，那么整体上来说，大概就是两种办法吧：</p><ol><li>我们可以以自己系统中的用户体系为准（因为 flowable 自己的用户体系字段往往不能满足我们的需求），然后创建对应的视图即可。例如 flowable 中的用户表 ACT_ID_USER、分组表 ACT_ID_GROUP、用户分组关联表 ACT_ID_MEMBERSHIP 等等，把这些和用户体系相关的表删除掉，然后根据这些表的字段和名称，结合自己的系统用户，创建与之相同的视图。</li><li>利用 IdentityService 这个服务，当我们要操作自己的系统用户的时候，例如添加、更新、删除用户的时候，顺便调用 IdentityService 服务添加、更新、删除 flowable 中的用户。</li></ol><p>这两种思路其实都不难，也都很好实现，但是有没有可能我们就直接舍弃掉 flowable 中的用户体系直接用自己的用户体系呢？在松哥目前的项目中，这条路目前是行得通的，就是将 flowable 的用户体系抛到一边，当做没有，只用自己系统的用户体系。</p><blockquote><p>如果在读这篇文章的小伙伴中，有人在自己的系统中，有场景必须用到 flowable 自带的用户体系，欢迎留言讨论。</p></blockquote><p>本文松哥和小伙伴们展示的案例，就是完完全全使用了自己的用户体系，没有用 flowable 中的那一套用户体系。</p><p>好啦，这个问题捋清楚了，接下来我们就开搞！</p><h2 id="3-创建用户表"><a href="#3-创建用户表" class="headerlink" title="3. 创建用户表"></a>3. 创建用户表</h2><p>首先我们来创建三张表，分别是用户表 user、角色表 role 以及用户角色关联表 user_role，脚本如下：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">NAMES</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`role`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`role`</span> (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`nameZh`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`role`</span> (<span class="hljs-string">`id`</span>, <span class="hljs-string">`name`</span>, <span class="hljs-string">`nameZh`</span>)</span><br><span class="line"><span class="hljs-keyword">VALUES</span></span><br><span class="line">(<span class="hljs-number">1</span>,<span class="hljs-string">'manager'</span>,<span class="hljs-string">'经理'</span>),</span><br><span class="line">(<span class="hljs-number">2</span>,<span class="hljs-string">'team_leader'</span>,<span class="hljs-string">'组长'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`user`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user`</span> (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`username`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`password`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`user`</span> (<span class="hljs-string">`id`</span>, <span class="hljs-string">`username`</span>, <span class="hljs-string">`password`</span>)</span><br><span class="line"><span class="hljs-keyword">VALUES</span></span><br><span class="line">(<span class="hljs-number">1</span>,<span class="hljs-string">'javaboy'</span>,<span class="hljs-string">'&#123;noop&#125;123'</span>),</span><br><span class="line">(<span class="hljs-number">2</span>,<span class="hljs-string">'zhangsan'</span>,<span class="hljs-string">'&#123;noop&#125;123'</span>),</span><br><span class="line">(<span class="hljs-number">3</span>,<span class="hljs-string">'lisi'</span>,<span class="hljs-string">'&#123;noop&#125;123'</span>),</span><br><span class="line">(<span class="hljs-number">4</span>,<span class="hljs-string">'江南一点雨'</span>,<span class="hljs-string">'&#123;noop&#125;123'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`user_role`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user_role`</span> (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`uid`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`rid`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci;</span><br><span class="line"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`user_role`</span> (<span class="hljs-string">`id`</span>, <span class="hljs-string">`uid`</span>, <span class="hljs-string">`rid`</span>)</span><br><span class="line"><span class="hljs-keyword">VALUES</span></span><br><span class="line">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),</span><br><span class="line">(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),</span><br><span class="line">(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),</span><br><span class="line">(<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);</span><br></pre></td></tr></table></figure><p>我也大概说下我的用户：</p><ol><li>一共四个用户，分别是 javaboy、江南一点雨、zhangsan、lisi。</li><li>一共两个角色，分别是经理和组长。</li><li>javaboy 和江南一点雨是经理，zhangsan 和 lisi 是组长。</li></ol><p>这就是我的用户表了。</p><h2 id="4-配置系统登录"><a href="#4-配置系统登录" class="headerlink" title="4. 配置系统登录"></a>4. 配置系统登录</h2><p>简单起见，我就不自己写系统登录页面了，简单配置一下 Spring Security 即可。</p><p>小伙伴们看到，第三小节中，我的用户密码用的是 <code>{noop}123</code>，这就表示我 Spring Security 加密方案用的是 DelegatingPasswordEncoder，Spring Security 原本默认的加密方案也是这个。不过当我们在项目中引入 flowable 的依赖 <code>flowable-spring-boot-starter</code> 之后，这个将 Spring Security 默认的 PasswordEncoder 改成了 NoOpPasswordEncoder，所以我需要首先在 applicaiton.properties 中重新指定 Spring Security 使用的 PasswordEncoder，配置方式如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flowable.idm.password-encoder=spring_delegating</span><br></pre></td></tr></table></figure><p>接下来提供一个用户类（涉及到 Spring Security 基本用法的我就不啰嗦了）：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer id;</span><br><span class="line">    <span class="hljs-keyword">private</span> String username;</span><br><span class="line">    <span class="hljs-keyword">private</span> String password;</span><br><span class="line">    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonExpired</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonLocked</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCredentialsNonExpired</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEnabled</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (roles != <span class="hljs-keyword">null</span> &amp;&amp; roles.size() &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> roles.stream().map(r -&gt; <span class="hljs-keyword">new</span> SimpleGrantedAuthority(r.getName())).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">//省略其他 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供一个自己的 UserDetailsService，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userMapper.loadUserByUsername(username);</span><br><span class="line">        <span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            user.setRoles(userMapper.getUserRolesByUserId(user.getId()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些基本的增删改查我就不展示了，这个 MyUserDetailsService 只需要注册到 Spring 容器中即可，也不需要额外的配置。</p><p>最后再简单配置一下 Spring Security，关闭掉 CSRF 攻击防御机制，否则将来的 POST 请求处理起来会比较麻烦：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">SecurityFilterChain <span class="hljs-title">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin();</span><br><span class="line">        <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好啦，有了这些东西之后，以后再访问系统就必须得先登录才能访问了。</p><h2 id="5-修改流程图"><a href="#5-修改流程图" class="headerlink" title="5. 修改流程图"></a>5. 修改流程图</h2><p>接下来我们的流程图要改一下。</p><p>我们先来回顾一下<a href="https://mp.weixin.qq.com/s/QEXceZ0KmDKFMcYq-B4Wkg" target="_blank" rel="noopener">上篇文章</a>中的流程图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220808211237.png" alt></p><p>大家看到，在这张图中，有两个 UserTask（就是有用户图标的那个），在<a href="https://mp.weixin.qq.com/s/QEXceZ0KmDKFMcYq-B4Wkg" target="_blank" rel="noopener">上篇文章</a>中，请假审批组固定是 managers（也就是说，如果用户属于 managers 这个组，就具备审批别人请假的权限），但是现在我们引入了用户体系，用户在提交请假申请的时候，用户可以指定自己的请假申请由谁审批！所以这个地方不能再硬编码了，应该改为动态的，根据前端传来的参数，来设置这个 UserTask 应该由谁来处理，具体修改内容如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">userTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"approveTask"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Approve or reject request"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">flowable:taskListener</span> <span class="hljs-attr">event</span>=<span class="hljs-string">"create"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.javaboy.flowable03.listener.SettingApproveUser"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">extensionElements</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">userTask</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小伙伴们看到，我这里为这个 UserTask 添加了一个监听器，当系统执行到这个监听器的时候，我将在这个监听器中来设置这个 UserTask 由谁来处理，我们来看下这个监听器的内容：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SettingApproveUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TaskListener</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notify</span><span class="hljs-params">(DelegateTask delegateTask)</span> </span>&#123;</span><br><span class="line">        String approveType = (String) delegateTask.getVariable(<span class="hljs-string">"approveType"</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-string">"by_user"</span>.equals(approveType)) &#123;</span><br><span class="line">            delegateTask.setAssignee((String) delegateTask.getVariable(<span class="hljs-string">"approveUser"</span>));</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"by_role"</span>.equals(approveType)) &#123;</span><br><span class="line">            Object approveRole = delegateTask.getVariable(<span class="hljs-string">"approveRole"</span>);</span><br><span class="line">            delegateTask.addCandidateGroup((String) approveRole);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小伙伴们看到，这里涉及到了三个变量，分别是：</p><ul><li>approveType：这个表示审批的类型，是指定一个审批人还是指定一个审批角色，其中 by_user 表示指定一个具体的审批人，by_role 表示指定一个审批角色。</li><li>approveUser：如果 approveType 的值是 by_user，那么就调用 setAssignee 来设置这个 UserTask 的处理人。</li><li>approveRole：如果 approveType 的值是 by_role，那么就调用 addCandidateGroup 方法来设置这个 UserTask 的候选组，也就是这个 UserTask 将来由这个组中的用户进行处理。</li></ul><p>流程图中的第二个 UserTask 我们也改一下，不过这次只改一下名字，将来通过这个变量来传递一下流程的审批人即可，修改后的 UserTask 如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">userTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"holidayApprovedTask"</span> <span class="hljs-attr">flowable:assignee</span>=<span class="hljs-string">"$&#123;approveUser&#125;"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Holiday approved"</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不过这个地方改不改其实都行，改一下更容易理解一些。</p></blockquote><p>好啦，流程图我们现在就调整好啦。</p><p>接下来我们就来看具体功能的实现了。</p><h2 id="6-提交请假申请"><a href="#6-提交请假申请" class="headerlink" title="6. 提交请假申请"></a>6. 提交请假申请</h2><h3 id="6-1-页面设计"><a href="#6-1-页面设计" class="headerlink" title="6.1 页面设计"></a>6.1 页面设计</h3><p>先来看看页面，选择审批人：</p><p><img src="http://img.itboyhub.com/2022/08/20220818210723.png" alt></p><p>也可以选择审批角色：</p><p><img src="http://img.itboyhub.com/2022/08/20220818210809.png" alt></p><p>从数据库中加载所有用户和角色，这个比较简单，我就不贴代码了，大家在公众号江南一点雨后台回复 flowable03 可以下载本文源代码。</p><p>基于上面展示的页面，当前端点击提交请假申请按钮的时候，我们提交的数据如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">afl: &#123;</span><br><span class="line">    days: <span class="hljs-number">3</span>,</span><br><span class="line">    reason: <span class="hljs-string">'休息一下'</span>,</span><br><span class="line">    approveType: <span class="hljs-string">'by_user'</span>,</span><br><span class="line">    approveUser: <span class="hljs-string">''</span>,</span><br><span class="line">    approveRole: <span class="hljs-string">''</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>approveType 表示审批人的类型，by_user 是提交给一个具体的人，by_role 是提交给某一个角色。approveUser 和 approveRole 则表示具体的审批人或者审批角色，根据 approveType 的取值，后面这两个二选一。请求提交方法如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">submit() &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> _this = <span class="hljs-keyword">this</span>;</span><br><span class="line">    axios.post(<span class="hljs-string">'/ask_for_leave'</span>, <span class="hljs-keyword">this</span>.afl)</span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (response.data.status == <span class="hljs-number">200</span>) &#123;</span><br><span class="line">                <span class="hljs-comment">//提交成功</span></span><br><span class="line">                _this.$message.success(response.data.msg);</span><br><span class="line">                _this.search();</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-comment">//提交失败</span></span><br><span class="line">                _this.$message.error(response.data.msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果请求提交成功，就调用 <code>_this.search();</code> 方法去刷新一下历史请假列表。</p><p>前端比较简单，不啰嗦了。</p><h3 id="6-2-后台处理"><a href="#6-2-后台处理" class="headerlink" title="6.2 后台处理"></a>6.2 后台处理</h3><p>再来看看后端的处理。</p><p>先来看实体类 AskForLeaveVO，这个类用来接收前端传来的请假参数：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AskForLeaveVO</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String name;</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer days;</span><br><span class="line">    <span class="hljs-keyword">private</span> String reason;</span><br><span class="line">    <span class="hljs-keyword">private</span> String approveType;</span><br><span class="line">    <span class="hljs-keyword">private</span> String approveUser;</span><br><span class="line">    <span class="hljs-keyword">private</span> String approveRole;</span><br><span class="line">    <span class="hljs-comment">// 省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看请假接口的处理：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/ask_for_leave"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">askForLeave</span><span class="hljs-params">(@RequestBody AskForLeaveVO askForLeaveVO)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> askForLeaveService.askForLeave(askForLeaveVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看一下对应的 askForLeaveService#askForLeave 方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Transactional</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">askForLeave</span><span class="hljs-params">(AskForLeaveVO askForLeaveVO)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; variables = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    askForLeaveVO.setName(SecurityContextHolder.getContext().getAuthentication().getName());</span><br><span class="line">    variables.put(<span class="hljs-string">"name"</span>, askForLeaveVO.getName());</span><br><span class="line">    variables.put(<span class="hljs-string">"days"</span>, askForLeaveVO.getDays());</span><br><span class="line">    variables.put(<span class="hljs-string">"reason"</span>, askForLeaveVO.getReason());</span><br><span class="line">    variables.put(<span class="hljs-string">"approveType"</span>, askForLeaveVO.getApproveType());</span><br><span class="line">    variables.put(<span class="hljs-string">"approveUser"</span>, askForLeaveVO.getApproveUser());</span><br><span class="line">    variables.put(<span class="hljs-string">"approveRole"</span>, askForLeaveVO.getApproveRole());</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        runtimeService.startProcessInstanceByKey(<span class="hljs-string">"holidayRequest"</span>, askForLeaveVO.getName(), variables);</span><br><span class="line">        <span class="hljs-keyword">return</span> RespBean.ok(<span class="hljs-string">"已提交请假申请"</span>);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> RespBean.error(<span class="hljs-string">"提交申请失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家注意，这里提交请假的用户的用户名，不再是前端传来的，而是我们从当前登录用户中提取出来的。</p><p>当我们在这里启动流程之后，会自动执行到第 5 小节所说的那个 UserTask 中，并在监听器中为 UserTask 设置处理的用户或者角色。</p><h2 id="7-历史请假列表"><a href="#7-历史请假列表" class="headerlink" title="7. 历史请假列表"></a>7. 历史请假列表</h2><p>这个在我们<a href="https://mp.weixin.qq.com/s/QEXceZ0KmDKFMcYq-B4Wkg" target="_blank" rel="noopener">上篇文章</a>的案例中，是用户手动输入要查询的用户名，然后去查询的，现在有了登录系统之后，用户登录成功之后，系统就知道当前用户是谁了，直接根据当前登录用户名去查询历史流程信息就可以了，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">searchResult</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    String name = SecurityContextHolder.getContext().getAuthentication().getName();</span><br><span class="line">    List&lt;HistoryInfo&gt; infos = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;HistoricProcessInstance&gt; historicProcessInstances = historyService.createHistoricProcessInstanceQuery().processInstanceBusinessKey(name)</span><br><span class="line">            .orderByProcessInstanceStartTime().desc().list();</span><br><span class="line">    <span class="hljs-keyword">for</span> (HistoricProcessInstance historicProcessInstance : historicProcessInstances) &#123;</span><br><span class="line">        HistoryInfo historyInfo = <span class="hljs-keyword">new</span> HistoryInfo();</span><br><span class="line">        historyInfo.setStatus(<span class="hljs-number">3</span>);</span><br><span class="line">        Date startTime = historicProcessInstance.getStartTime();</span><br><span class="line">        Date endTime = historicProcessInstance.getEndTime();</span><br><span class="line">        List&lt;HistoricVariableInstance&gt; historicVariableInstances = historyService.createHistoricVariableInstanceQuery()</span><br><span class="line">                .processInstanceId(historicProcessInstance.getId())</span><br><span class="line">                .list();</span><br><span class="line">        <span class="hljs-keyword">for</span> (HistoricVariableInstance historicVariableInstance : historicVariableInstances) &#123;</span><br><span class="line">            String variableName = historicVariableInstance.getVariableName();</span><br><span class="line">            Object value = historicVariableInstance.getValue();</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-string">"reason"</span>.equals(variableName)) &#123;</span><br><span class="line">                historyInfo.setReason((String) value);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"days"</span>.equals(variableName)) &#123;</span><br><span class="line">                historyInfo.setDays(Integer.parseInt(value.toString()));</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"approved"</span>.equals(variableName)) &#123;</span><br><span class="line">                Boolean v = (Boolean) value;</span><br><span class="line">                <span class="hljs-keyword">if</span> (v) &#123;</span><br><span class="line">                    historyInfo.setStatus(<span class="hljs-number">1</span>);</span><br><span class="line">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                    historyInfo.setStatus(<span class="hljs-number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"name"</span>.equals(variableName)) &#123;</span><br><span class="line">                historyInfo.setName((String) value);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"approveUser"</span>.equals(variableName)) &#123;</span><br><span class="line">                historyInfo.setApproveUser((String) value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        historyInfo.setStartTime(startTime);</span><br><span class="line">        historyInfo.setEndTime(endTime);</span><br><span class="line">        infos.add(historyInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> RespBean.ok(<span class="hljs-string">"ok"</span>, infos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里代码量虽然有点多，但是其实很好理解，就是我们先获取到当前登录的用户名，以这个用户名作为 BusinessKey 去查询所有的流程，包括已经执行结束和未结束的流程，然后再更进一步查询这些流程的变量信息。</p><p>对于一个已经执行结束的流程而言，流程变量中包含有 approved（这是审批的时候传入的），approved 的值无外乎就是 true 或者 false，对于一个尚未审批的流程而言，也就是还没执行结束的流程而言，流程变量中不含有 approved，所以在上面这段代码中，我首先设置 historyInfo 的 status 值为 3 表示流程未审批，将来要是读到了 approved 的值，那就据实设置 status 为 1 表示流程审批通过，设置 status 为 2 表示流程审批未通过。</p><p>前端在 el-table 表格中显示的时候，也是根据 status 的值分别展示不同的内容。</p><h2 id="8-待审批列表"><a href="#8-待审批列表" class="headerlink" title="8. 待审批列表"></a>8. 待审批列表</h2><p>这个是查看当前登录用户需要审批的任务，在<a href="https://mp.weixin.qq.com/s/QEXceZ0KmDKFMcYq-B4Wkg" target="_blank" rel="noopener">上篇文章</a>的案例中，我们是用户手动输入一个用户名，然后查询这个用户需要审批的任务列表。</p><p>现在不用这么麻烦了，用户登录成功之后，就可以直接查询当前用户的待审批的任务列表了：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/list"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">leaveList</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> askForLeaveService.leaveList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看下具体的查询方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 待审批列表</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">leaveList</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    String identity = SecurityContextHolder.getContext().getAuthentication().getName();</span><br><span class="line">    <span class="hljs-comment">//找到所有分配给你的任务</span></span><br><span class="line">    List&lt;Task&gt; tasks = taskService.createTaskQuery().taskAssignee(identity).list();</span><br><span class="line">    <span class="hljs-comment">//找到所有分配给你所属角色的任务</span></span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; authorities = SecurityContextHolder.getContext().getAuthentication().getAuthorities();</span><br><span class="line">    <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">        tasks.addAll(taskService.createTaskQuery().taskCandidateGroup(authority.getAuthority()).list());</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tasks.size(); i++) &#123;</span><br><span class="line">        Task task = tasks.get(i);</span><br><span class="line">        Map&lt;String, Object&gt; variables = taskService.getVariables(task.getId());</span><br><span class="line">        variables.put(<span class="hljs-string">"id"</span>, task.getId());</span><br><span class="line">        list.add(variables);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> RespBean.ok(<span class="hljs-string">"加载成功"</span>, list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个查询分两步：</p><ol><li>根据当前登录用户的名字查询这个用户需要处理的任务。</li><li>根据当前登录用户的角色查询这个角色需要处理的任务。</li></ol><p>最后将查询到的结果合并到一起，返回给前端就完事了。</p><p>好了，到此，我们的改造基本上就完成了。我主要是和大家说了实现的思路，具体的一些代码细节，大家可以在公众号江南一点雨后台回复 <code>flowable03</code> 下载。</p><h2 id="9-测试"><a href="#9-测试" class="headerlink" title="9. 测试"></a>9. 测试</h2><p>来个简单的测试吧。</p><p>首先，zhangsan 登录，登录之后提交一个请假申请，要求经理审批：</p><p><img src="http://img.itboyhub.com/2022/08/20220818213725.png" alt></p><p>可以看到，提交请假申请之后，下面的<strong>历史请假列表</strong>中就会展示出刚刚提交的请假申请，并且状态为待审批。</p><p>接下来注销登录，用 javaboy 或者江南一点雨登录，因为这两个用户都是经理，所以他俩中任意一个登录，都可以看到 zhangsan 刚刚提交的请假审批，以江南一点雨登录为例：</p><p><img src="http://img.itboyhub.com/2022/08/20220818213948.png" alt></p><p>可以看到，最下面的列表中有 zhangsan 刚刚提交的请假申请，点击批准，然后再以 zhangsan 的身份重新登录，如下：</p><p><img src="http://img.itboyhub.com/2022/08/20220818214100.png" alt></p><p>可以看到，请假已经审批通过啦～</p><p>好啦，本文就先和小伙伴们分享这么多，flowable 将来我也会录制一些视频放在 TienChin 项目中，感兴趣的小伙伴戳戳戳这里：<a href="https://mp.weixin.qq.com/s/uiX_p-e3MNFSyvV21CTk8w" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;之前松哥发过一篇文章，和小伙伴们分享了 Spring Boot+Vue+Flowable 的具体玩法，传送门：&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Flowable" scheme="http://www.javaboy.org/tags/Flowable/"/>
    
  </entry>
  
  <entry>
    <title>好久没有送签名书了，来十本~</title>
    <link href="http://www.javaboy.org/2022/0818/springsecurity-book.html"/>
    <id>http://www.javaboy.org/2022/0818/springsecurity-book.html</id>
    <published>2022-08-18T11:40:36.000Z</published>
    <updated>2022-12-19T11:54:14.092Z</updated>
    
    <content type="html"><![CDATA[<p>松哥今年基本上都是每周送一次书的频率，不过都是送别人的书，已经忘了上次送我的签名书是啥时候了~</p><a id="more"></a><p>所以，这次跟清华大学出版社专门要了 20 本《深入浅出 Spring Security》送给大家，分两次送，这次先来十本！</p><p><img src="http://img.itboyhub.com/2021/02/20210309142654.png" alt></p><p>《深入浅出 Spring Security》这本书是松哥 2021.3 月份在清华大学出版社出版的，这本书主要是系统的和大家讲述了 Spring Security 的各种用法以及相关的源码分析，不仅有 Spring Security 常见用法，也有各种常见的请求攻击以及相应的防御策略。这本书可以说是 Spring Security 从入门到精通不可多得的系统性资料。</p><p>随着 Spring Boot 和 Spring Cloud 的普及，Spring Security 也逐渐受到重视，Spring Boot 和 Spring Cloud 的很多安全管理场景里，使用 Spring Security 的方便程度要远远高于使用 Shiro。</p><p>然而，很多时候，由于项目比较赶或者自己本身比较忙的原因，有的小伙伴用 Spring Security 可能是东一榔头西一棒，面向搜索引擎编程，需要什么东西现场搜一下，搜到了再发挥 CV 神技，项目功能完成了就完事了，再也不管了。</p><p>这样做，虽然功能实现了，但是具体是怎么实现的，其实并不清楚，而且如果出 BUG，基本上手足无措，不知道该如何解决 BUG。此时，系统学习的重要性就凸显出来了，如果我们系统的掌握了 Spring Security，那么公司项目无论需要什么样的安全管理功能，我们都能信手拈来，不再需要面向搜索引擎编程，遇到问题，也不再恐慌，仔细分析就能解决。就像现在有小伙伴在微信上问我 Spring Security 相关的问题，无论什么问题都不怵，大不了 DEBUG，走一遍源码就知道什么问题了，这就是系统学习的好处。</p><blockquote><p>当然，我这里是以 Spring Security 为例，实际上，小伙伴们在学习任何东西的时候，都建议系统化学习。系统化学习一般来说就两种路子：看书或者看官网。如果是一个自己之前从未接触过的新玩意，建议先看视频了解个大概，知道基本用法，然后再看书或者官网系统化学习。</p></blockquote><p>看书的好处是书是中文的，对英文不好的小伙伴来说，书是比较友好的；看官网的好处是官网永远是最新的。</p><p>当然，最重要的是，无论看什么，你得先动起来！千万别在看书还是看官网上纠结半年。</p><p>好了，不废话了，小伙伴们留言说说你为什么需要这本书，松哥会从留言的小伙伴中选出来十位幸运小伙伴，《深入浅出 Spring Security》包邮到家！</p><p>当然，也可以直接扫码下单：</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;松哥今年基本上都是每周送一次书的频率，不过都是送别人的书，已经忘了上次送我的签名书是啥时候了~&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Security" scheme="http://www.javaboy.org/categories/Spring-Security/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Spring Security" scheme="http://www.javaboy.org/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>种草 Vue3 中几个好玩的插件和配置</title>
    <link href="http://www.javaboy.org/2022/0817/vue3-plugins.html"/>
    <id>http://www.javaboy.org/2022/0817/vue3-plugins.html</id>
    <published>2022-08-17T11:40:17.000Z</published>
    <updated>2022-12-19T11:53:10.452Z</updated>
    
    <content type="html"><![CDATA[<p>小伙伴们知道 TienChin 项目前端用的是 Vue3，当我们把 Vue3 官网刷了一遍之后回来看 TienChin 项目的前端，发现还是有很多不太一样的地方，今天松哥就来和大家捋一捋 Vue3 中几个好玩的插件和配置，学完之后，相信大家对 TienChin 项目前端的很多写法就明白了。</p><a id="more"></a><h2 id="1-Vite"><a href="#1-Vite" class="headerlink" title="1. Vite"></a>1. Vite</h2><p>首先来给大家介绍一下 Vite，虽然这在 Vue3 中并不是必须的，但是考虑到 TienChin 项目前端用了这个，还是给大家稍微说两句。</p><p>Vite（法语意为 “快速的”，发音 /vit/，发音同 “veet”）是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：</p><ol><li>一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 模块热更新（HMR）。</li><li>一套构建指令，它使用 Rollup 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。</li></ol><p>Vite 意在提供开箱即用的配置，同时它的插件 API 和 JavaScript API 带来了高度的可扩展性，并有完整的类型支持。</p><p>如果小伙伴们绝得陌生，那么不妨回忆下我们之前在 vhr 中给大家介绍的 Webpack，其实这个 Vite 相当于就是 Webpack。相比于 Webpack 的传统工具，Vite 最大的特点就是<strong>快</strong>。</p><p>Vite 通过在一开始将应用中的模块区分为<strong>依赖</strong>和<strong>源码</strong>两类，改进了开发服务器启动时间，因为依赖变化小而源码才是经常会变的东西。</p><p>不知道小伙伴们看到这里有没有想到我们 Java 中也有一个类似的玩意，那就是 Spring Boot 热加载。</p><blockquote><p>Spring Boot 的热加载中用到了两个类加载器：一个是 base classloader，专门用来加载一些第三方的类；还有一个是 restart classloader，专门用来加载我们自己写的类。热加载的时候，只需要 restart classloader 工作即可。</p></blockquote><p>好了，对于我们 Java 工程师来说，大家知道 Vite 是一个项目构建工具就可以了，接下来的例子我要通过 Vite 来和大家演示。</p><h2 id="2-自动导入常见方法"><a href="#2-自动导入常见方法" class="headerlink" title="2. 自动导入常见方法"></a>2. 自动导入常见方法</h2><p>在 TienChin 项目中，小伙伴们看到，很多原本需要导入之后才能用的方法，竟然都不需要导入就可以使用。</p><p>我创建一个项目来给大家演示看下。</p><p>我们用 Vite 来构建一个项目。</p><p>如果你的 npm 版本是 6.x，那么执行如下命令创建一个 Vue3 工程：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest my-vue-app --template vue</span><br></pre></td></tr></table></figure><p>如果你的 npm 版本是 7+，那么执行如下命令创建一个 Vue3 工程：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest my-vue-app -- --template vue</span><br></pre></td></tr></table></figure><p>这个 Vue 工程创建成功之后，没有 router 啥的，需要我们自己安装上，这个常规操作我就不多说了。</p><h3 id="2-1-传统写法"><a href="#2-1-传统写法" class="headerlink" title="2.1 传统写法"></a>2.1 传统写法</h3><p>现在我举一个简单的例子，比如说在 MyVue01 这个页面上有一个按钮，点击之后，可以跳转到 MyVue02 这个页面，那么我们的点击事件可以按照如下的方式来写：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span>;</span><br><span class="line">    <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">go</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        router.push(<span class="hljs-string">"/my02"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>首先我们需要从 vue-router 中导入 useRouter 函数，然后调用该函数可以获取到 router 对象，再调用 router 中的 push 方法就可以完成页面跳转了。</p><p>以前在 Vue2 中，我们一般都是通过 this.$router 来获取到 router 对象，然后通过 router 对象来实现页面导航操作。但是在 Vue3 中，没有 this 了，不过 Vue3 中提供了一个 getCurrentInstance 方法来获取当前 Vue 实例，所以页面跳转，我们也可以按照下面这种方式来写：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;getCurrentInstance&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> &#123;proxy&#125; = getCurrentInstance();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">go</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        proxy.$router.push(<span class="hljs-string">"/my02"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 proxy 就类似于以前 Vue2 中的 this。</p><p>松哥这里是以 router 为例来和大家演示，如果是 Vuex/Pinia，也有类似的写法，我就不挨个演示了。</p><p>无论是上面那种写法，都需要首先导入一个函数，然后才能开始使用。然而我们在 TienChin 项目的前端代码中，虽然也有导入，但是像上面这两个例子中导入都是没有的，那是怎么回事？</p><p>这就借助于一个自动导入的工具了。</p><h3 id="2-2-自动导入"><a href="#2-2-自动导入" class="headerlink" title="2.2 自动导入"></a>2.2 自动导入</h3><p>前端有一个工具插件叫做 <code>unplugin-auto-import</code>，通过这个插件可以实现一些方法的自动导入。该方法的使用步骤如下：</p><ol><li>安装插件：</li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i unplugin-auto-import -D</span><br></pre></td></tr></table></figure><p>由于这个插件只是一个开发辅助工具而已，所以安装的时候加上 -D 参数，这样就会安装到 devDependencies 中了。</p><ol start="2"><li>配置插件：</li></ol><p>插件的配置是在项目根目录下的 vite.config.js 文件中进行配置的，内容如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123;defineConfig&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span></span><br><span class="line"><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-vue'</span></span><br><span class="line"><span class="hljs-keyword">import</span> AutoImport <span class="hljs-keyword">from</span> <span class="hljs-string">'unplugin-auto-import/vite'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig(&#123;</span><br><span class="line">    plugins: [vue(), AutoImport(&#123;</span><br><span class="line">        <span class="hljs-comment">// 可以自定义文件生成的位置，默认是根目录下，使用ts的建议放src目录下</span></span><br><span class="line">        <span class="hljs-comment">// dts: 'src/auto-imports.d.ts',</span></span><br><span class="line">        imports: [<span class="hljs-string">'vue'</span>,<span class="hljs-string">'vue-router'</span>]</span><br><span class="line">    &#125;)]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>小伙伴们注意注释掉的代码，这个插件配置好之后，启动项目，默认会在 <code>node_modules/unplugin-auto-import/auto-imports.d.ts</code> 位置生成一个文件，但是配置 dts 属性可以修改这个文件生成的位置。</p><p>imports 则是指需要自动导入的方法都是哪里的方法，以我们前文中的两个案例为例，useRouter 是 vue-router 中的方法，getCurrentInstance 方法则是 vue 中的，所以这里导入我选择了 vue 和 vue-router，当然，小伙伴们在开发中，如果有需要，也可以导入 Vuex/Pinia 等。</p><p>配置好了插件之后，我们当我们再次需要使用上面那些方法的时候，就不需要导入了，直接用即可：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> &#123;proxy&#125; = getCurrentInstance();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">go</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        proxy.$router.push(<span class="hljs-string">"/my02"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>useRouter 也不需要导入了。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">go</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        router.push(<span class="hljs-string">"/my02"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>以后，凡是 vue 和 vue-router 中的方法都是不需要导入就可以使用了，其他组件中的方法则还是跟以前一样，必须导入之后才可以使用。</p><h2 id="3-组件去后缀"><a href="#3-组件去后缀" class="headerlink" title="3. 组件去后缀"></a>3. 组件去后缀</h2><p>以前在 Vue2 中，我们导入组件的时候，可能都习惯省略 <code>.vue</code> 后缀，毕竟用 WebStorm 开发的时候，系统自动导入的时候也会帮我们省略掉这个后缀，写法类似下面这样：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> MyVue01 <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/MyVue01"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> MyVue02 <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/MyVue02"</span>;</span><br></pre></td></tr></table></figure><p>但是现在在 Vite 中，如果还是这样写就会报错，类似下面这样：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220810220740.png" alt></p><p>现在必须要写后缀了，但是有的人就是不习惯写后缀，那怎么办？我们可以在 vite.config.js 中添加如下配置，这样就可以不用写 <code>.vue</code>、<code>.js</code> 等后缀了。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123;defineConfig&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span></span><br><span class="line"><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-vue'</span></span><br><span class="line"><span class="hljs-keyword">import</span> AutoImport <span class="hljs-keyword">from</span> <span class="hljs-string">'unplugin-auto-import/vite'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig(&#123;</span><br><span class="line">    plugins: [vue(), AutoImport(&#123;</span><br><span class="line">        <span class="hljs-comment">// 可以自定义文件生成的位置，默认是根目录下，使用ts的建议放src目录下</span></span><br><span class="line">        <span class="hljs-comment">// dts: 'src/auto-imports.d.ts',</span></span><br><span class="line">        imports: [<span class="hljs-string">'vue'</span>,<span class="hljs-string">'vue-router'</span>]</span><br><span class="line">    &#125;)],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="hljs-string">'.js'</span>, <span class="hljs-string">'.ts'</span>, <span class="hljs-string">'.jsx'</span>, <span class="hljs-string">'.tsx'</span>, <span class="hljs-string">'.json'</span>, <span class="hljs-string">'.vue'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>好了，现在大家明白了为什么 TienChin 项目前端都不写 <code>.vue</code> 了吧。</p><h2 id="4-name-属性问题"><a href="#4-name-属性问题" class="headerlink" title="4. name 属性问题"></a>4. name 属性问题</h2><p>以前在 Vue2 中，我们可以通过如下方式给一个 Vue 组件设置名称：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"MyVue03"</span>,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"MyVue03"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>在 Vue3 中，我们如果将 setup 写到 script 节点中的话，就没法定义 name 了，如果还需要使用 name 属性的话，那么可以再定义一个 script 节点，专门用来配置 name 属性，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">go</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        router.push(<span class="hljs-string">"/my02"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp">    export default &#123;</span></span><br><span class="line"><span class="hljs-regexp">        name: "JavaboyVue"</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>提示，我们在调试页面中，就可以看到自定义的组件名了：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220811194842.png" alt></p><p>不过这种写法多多少还是有点费事。</p><p>通过 <code>vite-plugin-vue-setup-extend</code> 插件可以简化在 Vue3 中设置 name 属性，安装该插件之后，我们就可以直接在 script 节点中定义 name 属性的值了，安装方式如下：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-plugin-vue-setup-extend -D</span><br></pre></td></tr></table></figure><p>装好之后，在 vite.config.js 中再进行配置一下，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123;defineConfig&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span></span><br><span class="line"><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-vue'</span></span><br><span class="line"><span class="hljs-keyword">import</span> AutoImport <span class="hljs-keyword">from</span> <span class="hljs-string">'unplugin-auto-import/vite'</span></span><br><span class="line"><span class="hljs-keyword">import</span> VueSetupExtend <span class="hljs-keyword">from</span> <span class="hljs-string">'vite-plugin-vue-setup-extend'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig(&#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        vue(),</span><br><span class="line">        AutoImport(&#123;</span><br><span class="line">            <span class="hljs-comment">// 可以自定义文件生成的位置，默认是根目录下，使用ts的建议放src目录下</span></span><br><span class="line">            <span class="hljs-comment">// dts: 'src/auto-imports.d.ts',</span></span><br><span class="line">            imports: [<span class="hljs-string">'vue'</span>, <span class="hljs-string">'vue-router'</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        VueSetupExtend()</span><br><span class="line">    ],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="hljs-string">'.js'</span>, <span class="hljs-string">'.ts'</span>, <span class="hljs-string">'.jsx'</span>, <span class="hljs-string">'.tsx'</span>, <span class="hljs-string">'.json'</span>, <span class="hljs-string">'.vue'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>VueSetupExtend 就是 <code>vite-plugin-vue-setup-extend</code> 插件的配置。</p><p>配置完成后，我们就可以通过如下方式来定义 name 属性了：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup name=<span class="hljs-string">"JavaboyVue"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> router = useRouter();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">go</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        router.push(<span class="hljs-string">"/my02"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>直接在 script 节点中加一个 name 属性就行了。</p><p>好啦，今天就先和大家介绍这么多吧～TienChin 项目的前端还用到一个 VueUse 工具，这个松哥后面再抽空和大家介绍～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小伙伴们知道 TienChin 项目前端用的是 Vue3，当我们把 Vue3 官网刷了一遍之后回来看 TienChin 项目的前端，发现还是有很多不太一样的地方，今天松哥就来和大家捋一捋 Vue3 中几个好玩的插件和配置，学完之后，相信大家对 TienChin 项目前端的很多写法就明白了。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue3" scheme="http://www.javaboy.org/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>49张图带领小伙伴们体验一把 Flowable-UI</title>
    <link href="http://www.javaboy.org/2022/0815/flowable-ui.html"/>
    <id>http://www.javaboy.org/2022/0815/flowable-ui.html</id>
    <published>2022-08-15T11:40:04.000Z</published>
    <updated>2022-12-19T11:53:18.134Z</updated>
    
    <content type="html"><![CDATA[<p>不知道小伙伴们有没发发现，IDEA 中似乎没有一个特别称手的流程绘制工具，大家注意我说的是称手，不是能用。</p><a id="more"></a><p>我之前用过下图这个插件：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220813213904.png" alt></p><p>评价就是两个字：能用！</p><p>官方提供了一个 flowable-ui，功能还比较强大，可以一试，今天我就来和小伙伴们简单介绍一下这个 flowable-ui 的使用，用熟了，将来我们可以使用这个来绘制流程图。</p><h2 id="1-Flowable-UI"><a href="#1-Flowable-UI" class="headerlink" title="1. Flowable-UI"></a>1. Flowable-UI</h2><p>Flowable-UI 说白了就是一堆 Web 应用，提供了四方面的功能：</p><ul><li>Flowable IDM: 身份管理应用。为所有 Flowable UI 应用提供单点登录认证功能，并且为拥有 IDM 管理员权限的用户提供了管理用户、组与权限的功能。</li><li>Flowable Modeler: 让具有建模权限的用户可以创建流程模型、表单、选择表与应用定义。</li><li>Flowable Task: 运行时任务应用，这个提供了启动流程实例、编辑任务表单、完成任务，以及查询流程实例与任务的功能。</li><li>Flowable Admin: 管理应用。让具有管理员权限的用户可以查询 BPMN、DMN、Form 及 Content 引擎，并提供了许多选项用于修改流程实例、任务、作业等。管理应用通过 REST API 连接至引擎，并与 Flowable Task 应用及 Flowable REST 应用一同部署。</li></ul><p>简单来说：</p><ul><li>创建用户、分配角色用 Flowable IDM。</li><li>画流程图用户 Flowable Modeler。</li><li>测试、体验流程用 Flowable Task。</li><li>后台管理相关的用 Flowable Admin。</li></ul><h2 id="2-安装方式"><a href="#2-安装方式" class="headerlink" title="2. 安装方式"></a>2. 安装方式</h2><p>前面说的几个应用，所有其他的应用都需要 Flowable IDM 提供认证。每个应用的 WAR 文件可以部署在相同的 Servlet 容器（如Apache Tomcat）中，也可以部署在不同的容器中。由于每个应用使用相同的 cookie 进行认证，因此应用需要运行在相同的域名下。</p><p>由于这些应用是基于 Spring Boot2.0 开发的，因此也可以直接作为独立应用来直接运行，通过执行 <code>java -jar xxx.war</code> 的方式来启动这些应用。</p><p>所以直接启动这些应用并不是麻烦事，反而是比较简单的。不过我看了下他这个还支持 Docker 安装，所以我还是用 Docker 吧，更省事，将来不想要了删除也方便（对 Docker 不熟悉的小伙伴可以在微信公众号后台回复 docker，有松哥写的入门教程）。</p><p>docker 安装的话，直接如下命令即可：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name flowableui -p 8086:8080 flowable/flowable-ui</span><br></pre></td></tr></table></figure><p>没什么特别需要配置的地方，指定一下容器名字和端口映射即可。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814122352.png" alt></p><p>装好之后，浏览器输入 <code>http://localhost:8086/flowable-ui</code> 进行访问，此时会弹出来如下页面：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814122546.png" alt></p><p>默认情况下，登录的用户名是 admin，密码是 test，注意别把密码写错了。</p><p>登录成功之后，如果看到如下页面，就表示安装成功了（一般来说应该不会有安装问题）：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814122652.png" alt></p><p>装好之后，接下来我们就来逐步体验这里的功能，我从简单的开始讲起。</p><h2 id="3-身份管理（IDM）"><a href="#3-身份管理（IDM）" class="headerlink" title="3. 身份管理（IDM）"></a>3. 身份管理（IDM）</h2><p>身份管理就是用户、用户组的管理，我们点进到身份管理页面之后，可以看到如下内容：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814123210.png" alt></p><p>可以看到，默认只有一个 admin 用户，也就是我们刚刚登录时候的用户。</p><h3 id="3-1-用户管理"><a href="#3-1-用户管理" class="headerlink" title="3.1 用户管理"></a>3.1 用户管理</h3><p>接下来点击左边的创建用户按钮，我们可以创建新的用户出来：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814123341.png" alt></p><p>填入用户的基本信息和密码即可。</p><p>我一共创建了四个用户，最终结果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814123521.png" alt></p><h3 id="3-2-组管理"><a href="#3-2-组管理" class="headerlink" title="3.2 组管理"></a>3.2 组管理</h3><p>接下来点击上面的<strong>组</strong>，我们可以创建用户组，这个用户组相当于我们在 vhr 中所说的角色，给用户分组，相当于给用户分配一个角色。</p><p>默认情况下，没有任何组，组是空的：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814123700.png" alt></p><p>我们点击创建组按钮，先来创建一个经理组：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814123814.png" alt></p><p>组添加成功之后，点击添加用户按钮，为用户组中添加用户：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814123905.png" alt></p><p>假设 zhangsan 和 zhangsi 两个人是经理，最终添加结果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814124014.png" alt></p><p>利用相同的方式，我再创建一个组长的组，并为之添加两个用户 lisi 和 liwu。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814124400.png" alt></p><h3 id="3-3-权限控制"><a href="#3-3-权限控制" class="headerlink" title="3.3 权限控制"></a>3.3 权限控制</h3><p>我们前面创建的用户现在是没有任何权限的，例如现在如果使用 zhangsan/123 进行登录，登录成功后页面是空的，没有任何东西：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814124657.png" alt></p><p>所以我们要为用户添加相应的权限。点击顶部的权限控制一栏，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814164138.png" alt></p><p>我们可以为这五种访问分别设置对应的用户/用户组：</p><ul><li>访问 idm 应用：这个就是访问身份管理应用，如果用户没有访问这个的权限，那么用户在登录成功的后的首页上就看不到身份管理应用程序这个菜单项。</li><li>访问 admin 应用：这个是访问管理员应用程式，如果没有没有这个的访问权限，那么用户在登录成功之后的首页上就看不到管理员应用程式这个菜单项。</li><li>访问 modeler 应用：这个是访问建模器应用程序，如果没有没有这个的访问权限，那么用户在登录成功之后的首页上就看不到建模器应用程序这个菜单项。</li><li>访问 workflow 应用：这个是访问任务应用程序，如果没有没有这个的访问权限，那么用户在登录成功之后的首页上就看不到任务应用程序这个菜单项。</li><li>访问 REST API：这个是指用户通过 REST API 访问工作流的权限。</li></ul><p>以访问 idm 应用为例，在设置的时候，我们可以直接设置用户，也可以设置用户组，设置用户组的话，则这个组中的所有用户都能访问这个菜单项。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814164852.png" alt></p><p>我这里设置的是经理可以访问所有应用，而组长只可以访问 workflow 应用。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814165425.png" alt></p><h2 id="4-管理员（Admin）"><a href="#4-管理员（Admin）" class="headerlink" title="4. 管理员（Admin）"></a>4. 管理员（Admin）</h2><p>接下来是管理员应用程式，这个里边的功能相对来说简单一些，而且主要是数据查看，需要自己配置的比较少：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814165835.png" alt></p><p>这是一个总览的页面，上面有流程引擎、CMMN引擎、App 引擎等各种菜单。这个因为用的不多，我也就不啰嗦了，小伙伴们可以自行体验一把。</p><h2 id="5-建模器（Modeler）"><a href="#5-建模器（Modeler）" class="headerlink" title="5. 建模器（Modeler）"></a>5. 建模器（Modeler）</h2><p>接下来的建模器算是我们在使用 Flowable-UI 时最最常用的功能了，因为画流程图就是在这里画。</p><h3 id="5-1-绘制流程图"><a href="#5-1-绘制流程图" class="headerlink" title="5.1 绘制流程图"></a>5.1 绘制流程图</h3><p><img src="http://img.itboyhub.com/2021/10/tran/20220814170304.png" alt></p><p>点击创建流程，可以开始一个流程图的绘制：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814170449.png" alt></p><p>我们来看一下初始页面：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814170559.png" alt></p><p>左边是菜单栏，里边是绘制流程图的各种组件，下边是流程图的各种属性了。其他东西大家看一下就懂了，我就不多说了。下边没有什么需要配置的，我就设置了一下版本号。</p><p>接下来我绘制一个简单的流程，如下图（一个流程启动之后，经过两个 UserTask 然后就结束了）：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814171300.png" alt></p><p>绘制的时候，光标放在上一个组件上，然后会自动提示后面的组件，直接点击即可：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814171422.png" alt></p><p>如果想要的组件没有提示，那么就只能在左边菜单中寻找，找到之后拖过来就行了。</p><p>这两个流程中的 UserTask 节点我也不做额外的设置，就设置一下每一个 UserTask 应该由谁来处理就可以了。假设第一个节点是组长来处理，第二个节点是经理处理，我们来看如何配置。</p><p>选中第一个 UserTask 之后，然后在下方找到分配用户，设置任务分配人：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814172137.png" alt></p><blockquote><p>另外我这里啰嗦一句，每一个组件都需要设置组件的主键 ID（下方的第一个属性），当然也可以不设置，不设置这里会自动生成一个随机字符串，当然随机生成的可读性肯定是不如自己设置的可读性好了。</p></blockquote><p>大家看到有四种不同的用户选项，我这里选择候选组，也就是将来由指定的用户组中的用户来处理这一个任务：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814172621.png" alt></p><p>选择完成之后，点击保存按钮：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814172949.png" alt></p><p>利用相同的方式，给第二个 UserTask 也设置由经理进行处理。</p><p>好了，我们就绘制这样一个简单流程。</p><p>绘制完成后，点击左上角的勾进行检查，查看是流程图绘制是否正确，有的时候流程节点之间的连线起点和终点可能并没有放入正确的位置，肉眼不容易看到，点击左上角的勾可以帮我们检查一下。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814173446.png" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814173505.png" alt></p><p>验证完成没有问题，点击左上角的保存按钮对当前流程图进行保存。</p><p>保存完成后，就可以在流程首页看到我们刚刚绘制的流程图了：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814173623.png" alt></p><p>点击流程图就可以查看流程图的详情，点击右上角的下载按钮，就可以下载这个流程图对应的 XML 文件了，将 XML 文件拷贝到我们的项目中，就可以开始开发啦。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814173755.png" alt></p><h3 id="5-2-发布应用程序"><a href="#5-2-发布应用程序" class="headerlink" title="5.2 发布应用程序"></a>5.2 发布应用程序</h3><p>当然，我们也可以直接现场测试我们刚刚绘制好的流程图。</p><p>点击上方的应用程序，点击右上方的创建应用程序：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814175648.png" alt></p><p>配置应用程序的基本信息：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814175741.png" alt></p><p>点击编辑包含的模型，为当前应用程序添加一个流程图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814175845.png" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814175939.png" alt></p><p>完成后点击左上角的保存按钮。</p><p>保存之后，我们就可以看到刚刚定义好的应用程序了：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814180026.png" alt></p><p>点进到这个应用程序中，点击右上角的发布按钮，可以发布该应用程序。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814180124.png" alt></p><p>发布之后，我们就可以在任务应用程序中来玩这个程序了。</p><h2 id="6-任务（Task）"><a href="#6-任务（Task）" class="headerlink" title="6. 任务（Task）"></a>6. 任务（Task）</h2><p>经过前面的步骤之后，现在我们重新回到主页面，就可以发现除了刚刚一开始默认的四个菜单之外，现在还额外多了一个，就是我们刚刚新建的应用程序：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814180420.png" alt></p><p>我们可以直接点击 my_first_app 进入到任务应用程序中，也可以先进入到任务应用程序中，然后选择 my_first_app，都行。我以后者为例和大家演示一下吧：</p><p>首先进来之后，默认情况下是没有要执行的任务：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814180557.png" alt></p><p>点击到流程中，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814180719.png" alt></p><p>默认情况下，也是没有正在执行的流程，我们现在可以点击启动流程按钮，来启动一个新的流程：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220814180818.png" alt></p><p>点击启动流程按钮之后，左边会展示出来所有的流程实例，我们现在只有一个发布的流程，所以选中该流程，点击右边的启动流程按钮：</p><p><img src="http://img.itboyhub.com/2022/08/20220814181951.png" alt></p><p>启动流程之后，点击显示图，可以查看流程走到哪一步了：</p><p><img src="http://img.itboyhub.com/2022/08/20220814182240.png" alt></p><p>点击活动任务，查看自己需要完成的任务。点击之后发现并没有需要完成的任务：</p><p><img src="http://img.itboyhub.com/2022/08/20220814182324.png" alt></p><p>这是因为当前用户是 admin，而我们流程中第一个 UserTask 应该是由组长来处理的，所以我们现在注销登录，先以 zhangsan 的身份登录，因为 zhangsan 的角色是经理，所以他登录上来应该也是没有任务的：</p><p><img src="http://img.itboyhub.com/2022/08/20220814182640.png" alt></p><p>注意在筛选条件中选择我是其中一个候选人的任务（还是没有）：</p><p><img src="http://img.itboyhub.com/2022/08/20220814184328.png" alt></p><p>再以 lisi 的身份登录，lisi 是组长，如下（也记得修改一下筛选条件）：</p><p><img src="http://img.itboyhub.com/2022/08/20220814184515.png" alt></p><p>先点击认领按钮，认领该任务，然后点击完成按钮，完成自己的审批：</p><p><img src="http://img.itboyhub.com/2022/08/20220814184646.png" alt></p><p>完成之后，然后点击到流程中，然后点击左上角的显示图，如下：</p><p><img src="http://img.itboyhub.com/2022/08/20220814184721.png" alt></p><p><img src="http://img.itboyhub.com/2022/08/20220814184816.png" alt></p><p>此时可以看到，流程已经向后走了一步了。</p><p>接下来该经理审批了。</p><p>我们注销登录，再以 zhangsan 的身份登录，然后重复 lisi 的步骤，就可以完成这个流程了。</p><p>最终执行结果如下图：</p><p><img src="http://img.itboyhub.com/2022/08/20220814185503.png" alt></p><p>流程执行完毕。</p><blockquote><p>如果流程中涉及到排他性网关，似乎里无法测试，如果有小伙伴知道这里如何测试带有排他性网关的流程，欢迎留言告知。</p></blockquote><h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h2><p>今天的图有点多，希望小伙伴们对 flowable-ui 这个工具有一个基本的认知，好啦，有问题欢迎留言讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道小伙伴们有没发发现，IDEA 中似乎没有一个特别称手的流程绘制工具，大家注意我说的是称手，不是能用。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Flowable" scheme="http://www.javaboy.org/tags/Flowable/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+Vue+Flowable，模拟一个请假审批流程！</title>
    <link href="http://www.javaboy.org/2022/0810/flowable-ask-for-leave.html"/>
    <id>http://www.javaboy.org/2022/0810/flowable-ask-for-leave.html</id>
    <published>2022-08-10T11:39:46.000Z</published>
    <updated>2022-12-19T11:53:22.807Z</updated>
    
    <content type="html"><![CDATA[<p>小伙伴们知道松哥最近在录 TienChin 项目视频，这个项目会用到工作流，为了帮助小伙伴们更好的理解这个项目，松哥最近会出几篇文章和大伙聊一聊工作流 flowable 的使用，算是给 TienChin 项目的第一个铺垫，当然，在 TienChin 项目的系列视频中，我也会和大家详细聊一聊 flowable 流程引擎的使用。</p><a id="more"></a><p>今天我就先写一个简单的请假流程，让小伙伴们对 flowable 先有一个直观的认知。</p><h2 id="1-效果展示"><a href="#1-效果展示" class="headerlink" title="1. 效果展示"></a>1. 效果展示</h2><p>在正式开搞之前，我先来给小伙伴们看下我们今天要完成的效果。</p><p>简单起见，我这里并没有引入用户、角色等概念，涉及到用户的地方都是手动输入，在后续的文章中我会继续结合 Spring Security 来和大家展示引入用户之后的情况。</p><p>我们先来看看请假页面：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220808205124.png" alt></p><p>员工可以在这个页面输入姓名，请假天数以及请假理由等，然后点击按钮提交一个请假申请。</p><p>当员工提交请假申请之后，这个请假申请默认是由经理来处理的，此时经理登录之后，就可以看到员工提交上来的请求：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220808205402.png" alt></p><p>经理此时可以选择批准或者拒绝。无论是批准还是拒绝，都可以通过短信或者邮件等告知员工。</p><p>对于员工来说，也可以在一个页面查询自己请假流程的最终情况：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220808205620.png" alt></p><p>可能有小伙伴已经注意到了，我们这里所有涉及到用户名的地方，都需要手动输入。这是因为我为了让这个案例足够简单，暂时没有引入 Spring Security，只是单纯的和大家分享 Flowable 的用法，等小伙伴们通过这篇文章掌握了 Flowable 的基本用法之后，下篇文章我会和大家分享如何结合具体的用户来使用。</p><h2 id="2-工程创建"><a href="#2-工程创建" class="headerlink" title="2. 工程创建"></a>2. 工程创建</h2><p>我就直接来和小伙伴们展示 Spring Boot 中 flowable 的用法了。</p><p>首先我们创建一个 Spring Boot 项目，创建的时候引入 Web 和 MySQL 驱动依赖即可，项目创建成功之后，再引入 flowable 依赖，最终的依赖文件如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.flowable<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flowable-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.7.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目创建成功之后，首先需要我们在 application.properties 中配置一下数据库连接信息，如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line">spring.datasource.url=jdbc:mysql:///flowable02?serverTimezone=Asia/Shanghai&amp;useSSL=false&amp;nullCatalogMeansCurrent=true</span><br></pre></td></tr></table></figure><p>配置完成之后，当 Spring Boot 项目第一次启动的时候，会自动创建出来对应的表和需要的数据。</p><p>同时，Spring Boot 项目也会自动创建并暴露 Flowable 中的 ProcessEngine、CmmnEngine、DmnEngine、FormEngine、ContentEngine 及 IdmEngine 等 Bean。</p><p>并且所有的 Flowable 服务都暴露为 Spring Bean。例如 RuntimeService、TaskService、HistoryService 等等服务，我们都可以在需要使用的时候，直接注入就可以使用了。</p><p>同时：</p><ul><li>resources/processes 目录下的任何 BPMN 2.0 流程定义都会被自动部署，所以在 Spring Boot 项目中，我们只需要将自己的流程文件放对位置即可，剩下的事情就会自动完成。</li><li>cases 目录下的任何 CMMN 1.1 事例都会被自动部署。</li><li>forms 目录下的任何 Form 定义都会被自动部署。</li></ul><h2 id="3-流程图分析"><a href="#3-流程图分析" class="headerlink" title="3. 流程图分析"></a>3. 流程图分析</h2><p>今天这个例子比较简单，就是一个请假流程，我暂时先不跟小伙伴们去扯画流程图的事，咱们直接用一个官网现成的请假流程图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220808211237.png" alt></p><p>我们先来简单分析一下这张图：</p><ol><li>最左侧的圆圈叫做启动事件(start event)，这表示一个流程实例的起点。</li><li>一个流程启动之后，首先到达第一个有用户图标的矩形中，这个矩形称为一个 User Task，在这个 User Task 中，经理可以选择批准亦或者拒绝。</li><li>UserTask 的下一步是一个菱形，这个称作排他网关（Exclusive Gateway）,这个会将请求路由到不同的地方。</li><li>先说批准，如果在第一个矩形中，经理选择了批准，那么就会进入到一个带有齿轮图标的矩形中，在这个矩形中我们我们可以额外做一些事情，然后又会调用到一个 UserTask，最终完成整个流程。</li><li>如果经理选择了拒绝，则会进入到下面的发邮件的矩形中，在这个中我们可以给员工发送一个通知，告知他请假没有通过。</li><li>当系统走到最右边的圆圈之后，就表示这个流程执行结束了。</li></ol><p>这个流程图对应的 XML 文件位于 src/main/resources/processes/holiday-request.bpmn20.xml 位置，其内容如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">definitions</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="hljs-tag">             <span class="hljs-attr">xmlns:flowable</span>=<span class="hljs-string">"http://flowable.org/bpmn"</span></span></span><br><span class="line"><span class="hljs-tag">             <span class="hljs-attr">typeLanguage</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema"</span> <span class="hljs-attr">expressionLanguage</span>=<span class="hljs-string">"http://www.w3.org/1999/XPath"</span></span></span><br><span class="line"><span class="hljs-tag">             <span class="hljs-attr">targetNamespace</span>=<span class="hljs-string">"http://www.flowable.org/processdef"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">process</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"holidayRequest"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Holiday Request"</span> <span class="hljs-attr">isExecutable</span>=<span class="hljs-string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">startEvent</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"startEvent"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"startEvent"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"approveTask"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">userTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"approveTask"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Approve or reject request"</span> <span class="hljs-attr">flowable:candidateGroups</span>=<span class="hljs-string">"managers"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"approveTask"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"decision"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">exclusiveGateway</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"decision"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"decision"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"externalSystemCall"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">conditionExpression</span> <span class="hljs-attr">xsi:type</span>=<span class="hljs-string">"tFormalExpression"</span>&gt;</span></span><br><span class="line">                &lt;![CDATA[</span><br><span class="line">          $&#123;approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">sequenceFlow</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span>  <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"decision"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"rejectLeave"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">conditionExpression</span> <span class="hljs-attr">xsi:type</span>=<span class="hljs-string">"tFormalExpression"</span>&gt;</span></span><br><span class="line">                &lt;![CDATA[</span><br><span class="line">          $&#123;!approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">sequenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">serviceTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"externalSystemCall"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Enter holidays in external system"</span></span></span><br><span class="line"><span class="hljs-tag">                     <span class="hljs-attr">flowable:class</span>=<span class="hljs-string">"org.javaboy.flowable02.flowable.Approve"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"externalSystemCall"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"holidayApprovedTask"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">userTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"holidayApprovedTask"</span> <span class="hljs-attr">flowable:assignee</span>=<span class="hljs-string">"$&#123;employee&#125;"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Holiday approved"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"holidayApprovedTask"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"approveEnd"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">serviceTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"rejectLeave"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Send out rejection email"</span></span></span><br><span class="line"><span class="hljs-tag">                     <span class="hljs-attr">flowable:class</span>=<span class="hljs-string">"org.javaboy.flowable02.flowable.Reject"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"rejectLeave"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"rejectEnd"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">endEvent</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"approveEnd"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">endEvent</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"rejectEnd"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">process</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很多想学习流程引擎的小伙伴都会被这个 XML 文件劝退，但是！！！</p><p>如果你愿意静下心来认真阅读这个 XML 文件，你会发现流程引擎原来如此简单！</p><p>我们来挨个看下这里的每一个节点：</p><ol><li>process：这表示一个流程，例如本文和大家分享的请假就是一个流程。</li><li>startEvent：这表示流程的开始，这就是一个开始事件。</li><li>userTask：这就是一个具体的流程节点了，flowable:candidateGroups 属性表示这个节点该由哪个用户组中的用户来处理。</li><li>sequenceFlow：这就是连接各个流程节点之间的线条，这个里边一般有两个属性，sourceRef 和 targetRef，前者表示线条的起点，后者表示线条的终点。</li><li>exclusiveGateway：表示一个排他性网关，也就是那个菱形选择框。</li><li>从排他性网关出来的线条有两个，大家注意看上面的代码，这两个线条中都涉及到一个变量 approved，如果这个变量为 true，则 targeRef 就是 externalSystemCall；如果这个变量为 false，则 targetRef 就是 rejectLeave。</li><li>serviceTask：这就是我们定义的一个具体的外部服务，如果在整个流程执行的过程中，你有一些需要自己完成的事情，那么可以通过 serviceTask 来实现，这个节点会有一个 flowable:class 属性，这个属性的值就是一个自定义类。</li><li>另外，上文中部分节点中还涉及到变量 ${}，这个变量是在流程执行的过程中传入进来的。</li></ol><p>总而言之，只要小伙伴们静下心来认真阅读一下上面的 XML，你会发现 So Easy！</p><h2 id="4-请假申请"><a href="#4-请假申请" class="headerlink" title="4. 请假申请"></a>4. 请假申请</h2><p>好了，接下来我们就来看一个具体的请假申请。由于请假流程只要放对位置，就会自动加载，所以我们并不需要手动加载请假流程，直接开始一个请假申请流程即可。</p><h3 id="4-1-服务端接口"><a href="#4-1-服务端接口" class="headerlink" title="4.1 服务端接口"></a>4.1 服务端接口</h3><p>首先我们需要一个实体类来接受前端传来的请假参数：用户名、请假天数以及请假理由：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AskForLeaveVO</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String name;</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer days;</span><br><span class="line">    <span class="hljs-keyword">private</span> String reason;</span><br><span class="line">    <span class="hljs-comment">// 省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再拿出祖传的 RespBean，以便响应数据方便一些：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RespBean</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer status;</span><br><span class="line">    <span class="hljs-keyword">private</span> String msg;</span><br><span class="line">    <span class="hljs-keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RespBean <span class="hljs-title">ok</span><span class="hljs-params">(String msg, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RespBean(<span class="hljs-number">200</span>, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RespBean <span class="hljs-title">ok</span><span class="hljs-params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RespBean(<span class="hljs-number">200</span>, msg, <span class="hljs-keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RespBean <span class="hljs-title">error</span><span class="hljs-params">(String msg, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RespBean(<span class="hljs-number">500</span>, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RespBean <span class="hljs-title">error</span><span class="hljs-params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RespBean(<span class="hljs-number">500</span>, msg, <span class="hljs-keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">RespBean</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">RespBean</span><span class="hljs-params">(Integer status, String msg, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.status = status;</span><br><span class="line">        <span class="hljs-keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="hljs-keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们提供一个处理请假申请的接口：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AskForLeaveController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    AskForLeaveService askForLeaveService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/ask_for_leave"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">askForLeave</span><span class="hljs-params">(@RequestBody AskForLeaveVO askForLeaveVO)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> askForLeaveService.askForLeave(askForLeaveVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑在 AskForLeaveService 中，来继续看：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AskForLeaveService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Transactional</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">askForLeave</span><span class="hljs-params">(AskForLeaveVO askForLeaveVO)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; variables = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        variables.put(<span class="hljs-string">"name"</span>, askForLeaveVO.getName());</span><br><span class="line">        variables.put(<span class="hljs-string">"days"</span>, askForLeaveVO.getDays());</span><br><span class="line">        variables.put(<span class="hljs-string">"reason"</span>, askForLeaveVO.getReason());</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            runtimeService.startProcessInstanceByKey(<span class="hljs-string">"holidayRequest"</span>, askForLeaveVO.getName(), variables);</span><br><span class="line">            <span class="hljs-keyword">return</span> RespBean.ok(<span class="hljs-string">"已提交请假申请"</span>);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> RespBean.error(<span class="hljs-string">"提交申请失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小伙伴们看一下，在提交请假申请的时候，分别传入了 name、days 以及 reason 三个参数，我们将这三个参数放入到一个 Map 中，然后通过 RuntimeService#startProcessInstanceByKey 方法来开启一个流程，开启流程的时候一共传入了三个参数：</p><ol><li>第一个参数表示流程引擎的名字，这就是我们刚才在流程的 XML 文件中定义的名字。</li><li>第二个参数表示当前这个流程的 key，我用了申请人的名字，将来我们可以通过申请人的名字查询这个人曾经提交的所有申请流程。</li><li>第三个参数就是我们的变量了。</li></ol><p>好了，这服务端就写好了。</p><h3 id="4-2-前端页面"><a href="#4-2-前端页面" class="headerlink" title="4.2 前端页面"></a>4.2 前端页面</h3><p>接下来我们来开发前端页面。</p><p>前端我使用 Vue+ElementUI+Axios，咱们这个案例比较简单，就没有必要搭建单页面了，直接用普通的 HTML 就行了。另外，Vue 我是用了 Vue3：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- Import style --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"//unpkg.com/element-plus/dist/index.css"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/vue@3"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- Import component library --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//unpkg.com/element-plus"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>开始一个请假流程<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>请输入姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"afl.name"</span>/&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>请输入请假天数：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"afl.days"</span>/&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>请输入请假理由：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"afl.reason"</span>/&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"submit"</span>&gt;</span>提交请假申请<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">    Vue.createApp(</span></span><br><span class="line"><span class="hljs-undefined">        &#123;</span></span><br><span class="line"><span class="hljs-undefined">            data() &#123;</span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">                    afl: &#123;</span></span><br><span class="line"><span class="hljs-javascript">                        name: <span class="hljs-string">'javaboy'</span>,</span></span><br><span class="line"><span class="hljs-undefined">                        days: 3,</span></span><br><span class="line"><span class="hljs-javascript">                        reason: <span class="hljs-string">'休息一下'</span></span></span><br><span class="line"><span class="hljs-undefined">                    &#125;</span></span><br><span class="line"><span class="hljs-undefined">                &#125;</span></span><br><span class="line"><span class="hljs-undefined">            &#125;,</span></span><br><span class="line"><span class="hljs-undefined">            methods: &#123;</span></span><br><span class="line"><span class="hljs-undefined">                submit() &#123;</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">let</span> _this = <span class="hljs-keyword">this</span>;</span></span><br><span class="line"><span class="hljs-javascript">                    axios.post(<span class="hljs-string">'/ask_for_leave'</span>, <span class="hljs-keyword">this</span>.afl)</span></span><br><span class="line"><span class="hljs-javascript">                        .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                            <span class="hljs-keyword">if</span> (response.data.status == <span class="hljs-number">200</span>) &#123;</span></span><br><span class="line"><span class="hljs-javascript">                                <span class="hljs-comment">//提交成功</span></span></span><br><span class="line"><span class="hljs-undefined">                                _this.$message.success(response.data.msg);</span></span><br><span class="line"><span class="hljs-javascript">                            &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">                                <span class="hljs-comment">//提交失败</span></span></span><br><span class="line"><span class="hljs-undefined">                                _this.$message.error(response.data.msg);</span></span><br><span class="line"><span class="hljs-undefined">                            &#125;</span></span><br><span class="line"><span class="hljs-undefined">                        &#125;)</span></span><br><span class="line"><span class="hljs-javascript">                        .catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                            <span class="hljs-built_in">console</span>.log(error);</span></span><br><span class="line"><span class="hljs-undefined">                        &#125;);</span></span><br><span class="line"><span class="hljs-undefined">                &#125;</span></span><br><span class="line"><span class="hljs-undefined">            &#125;</span></span><br><span class="line"><span class="hljs-undefined">        &#125;</span></span><br><span class="line"><span class="hljs-javascript">    ).use(ElementPlus).mount(<span class="hljs-string">'#app'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个页面有几个需要注意的点：</p><ol><li>通过 Vue.createApp 来创建一个 Vue 实例，这跟以前 Vue2 中直接 new 一个 Vue 实例不一样。</li><li>在最下面，通过 use 来配置 ElementPlus 插件，这个跟 Vue2 也不一样。在 Vue2 中，如果我们单纯的在 HTML 页面中引用 ElementUI 并不需要这个步骤。</li><li>剩下的东西就比较简单了，上面先引入 Vue3、Axios 以及 ElementPlus，然后三个输入框，点击按钮提交请求，参数就是三个输入框中的数据，提交成功或者失败，分别弹个框出来提示一下就行了。</li></ol><p>好啦，这就写好了。</p><p>然而，提交完成后，没有一个直观的展示，虽然前端提示说提交成功了，但是究竟成功没，还得眼见为实。</p><h2 id="5-任务展示"><a href="#5-任务展示" class="headerlink" title="5. 任务展示"></a>5. 任务展示</h2><p>好了，接下来我们要做的事情就是把用户提交的流程展示出来。</p><p>按理说，比如经理登录成功之后，系统页面就自动展示出来经理需要审批的流程，但是我们当前这个例子为了简单，就没有登录这个操作了，需要需要用户将来在网页上选一下自己的身份，接下来就会展示出这个身份所对应的需要操作的流程。</p><p>我们来看任务接口：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/list"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">leaveList</span><span class="hljs-params">(String identity)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> askForLeaveService.leaveList(identity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个请求参数 identity 就表示当前用户的身份（本来应该是登录后自动获取，但是因为我们目前没有登录，所以这个参数是由前端传递过来）。来继续看 askForLeaveService 中的方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AskForLeaveService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">leaveList</span><span class="hljs-params">(String identity)</span> </span>&#123;</span><br><span class="line">        List&lt;Task&gt; tasks = taskService.createTaskQuery().taskCandidateGroup(identity).list();</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tasks.size(); i++) &#123;</span><br><span class="line">            Task task = tasks.get(i);</span><br><span class="line">            Map&lt;String, Object&gt; variables = taskService.getVariables(task.getId());</span><br><span class="line">            variables.put(<span class="hljs-string">"id"</span>, task.getId());</span><br><span class="line">            list.add(variables);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> RespBean.ok(<span class="hljs-string">"加载成功"</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Task 就是流程中要做的每一件事情，我们首先通过 TaskService，查询出来这个用户需要处理的任务，例如前端前传来的是 managers，那么这里就是查询所有需要由 managers 用户组处理的任务。</p><p>这段代码要结合流程图一起来理解，小伙伴们回顾下我们流程图中有如下一句：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">userTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"approveTask"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Approve or reject request"</span> <span class="hljs-attr">flowable:candidateGroups</span>=<span class="hljs-string">"managers"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这意思就是说这个 userTask 是由 managers 这个组中的用户来处理，所以上面 Java 代码中的查询就是查询 managers 这个组中的用户需要审批的任务。</p><p>我们将所有需要审批的任务查询出来后，通过 taskId 可以进一步查询到这个任务中当时传入的各种变量，我们将这些数据封装成一个对象，并最终返回到前端。</p><p>最后，我们再来看下前端页面：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- Import style --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"//unpkg.com/element-plus/dist/index.css"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/vue@3"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- Import component library --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//unpkg.com/element-plus"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>请选择你的身份：<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span> <span class="hljs-attr">id</span>=<span class="hljs-string">""</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"identity"</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">"initTasks"</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"iden"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(iden,index) in identities"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"iden"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"initTasks"</span>&gt;</span>刷新一下<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">border</span> <span class="hljs-attr">strip</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">"tasks"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"姓名"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"days"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"请假天数"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"reason"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"请假原因"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">lable</span>=<span class="hljs-string">"操作"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">"scope"</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"approveOrReject(scope.row.id,true,scope.row.name)"</span>&gt;</span>批准<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"danger"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"approveOrReject(scope.row.id,false,scope.row.name)"</span>&gt;</span>拒绝<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">    Vue.createApp(</span></span><br><span class="line"><span class="hljs-undefined">        &#123;</span></span><br><span class="line"><span class="hljs-undefined">            data() &#123;</span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">                    tasks: [],</span></span><br><span class="line"><span class="hljs-undefined">                    identities: [</span></span><br><span class="line"><span class="hljs-javascript">                        <span class="hljs-string">'managers'</span></span></span><br><span class="line"><span class="hljs-undefined">                    ],</span></span><br><span class="line"><span class="hljs-javascript">                    identity: <span class="hljs-string">''</span></span></span><br><span class="line"><span class="hljs-undefined">                &#125;</span></span><br><span class="line"><span class="hljs-undefined">            &#125;,</span></span><br><span class="line"><span class="hljs-undefined">            methods: &#123;</span></span><br><span class="line"><span class="hljs-undefined">                initTasks() &#123;</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">let</span> _this = <span class="hljs-keyword">this</span>;</span></span><br><span class="line"><span class="hljs-javascript">                    axios.get(<span class="hljs-string">'/list?identity='</span> + <span class="hljs-keyword">this</span>.identity)</span></span><br><span class="line"><span class="hljs-javascript">                        .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-undefined">                            _this.tasks = response.data.data;</span></span><br><span class="line"><span class="hljs-undefined">                        &#125;)</span></span><br><span class="line"><span class="hljs-javascript">                        .catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                            <span class="hljs-built_in">console</span>.log(error);</span></span><br><span class="line"><span class="hljs-undefined">                        &#125;);</span></span><br><span class="line"><span class="hljs-undefined">                &#125;</span></span><br><span class="line"><span class="hljs-undefined">            &#125;</span></span><br><span class="line"><span class="hljs-undefined">        &#125;</span></span><br><span class="line"><span class="hljs-javascript">    ).use(ElementPlus).mount(<span class="hljs-string">'#app'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大家看到，首先有一个下拉框，我们在这个下拉框中来选择用户的身份。选择完成后，触发 initTasks 方法，然后在这个方法中，发起网络请求，最终将请求结果渲染出来。</p><p>最终效果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220808205402.png" alt></p><p>当然用户也可以点击刷新按钮，刷新列表。</p><p>这样，当第五小节中，员工提交了一个请假审批之后，我们在这个列表中就可以查看到员工提交的请假审批了（在流程图中，我们直接设置了用户的请假审批固定提交给 managers，在后续的文章中，松哥会教大家如何把这个提交的目标用户变成一个动态的）。</p><h2 id="6-请假审批"><a href="#6-请假审批" class="headerlink" title="6. 请假审批"></a>6. 请假审批</h2><p>接下来经理就可以选择批准或者是拒绝这请假了。</p><p>首先我们封装一个实体类用来接受前端传来的请求：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApproveRejectVO</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String taskId;</span><br><span class="line">    <span class="hljs-keyword">private</span> Boolean approve;</span><br><span class="line">    <span class="hljs-keyword">private</span> String name;</span><br><span class="line">    <span class="hljs-comment">// 省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数都好理解，approve 为 true 表示申请通过，false 表示申请被拒绝。</p><p>接下来我们来看接口：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/handler"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">askForLeaveHandler</span><span class="hljs-params">(@RequestBody ApproveRejectVO approveRejectVO)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> askForLeaveService.askForLeaveHandler(approveRejectVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看具体的 askForLeaveHandler 方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AskForLeaveService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">askForLeaveHandler</span><span class="hljs-params">(ApproveRejectVO approveRejectVO)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">boolean</span> approved = approveRejectVO.getApprove();</span><br><span class="line">            Map&lt;String, Object&gt; variables = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            variables.put(<span class="hljs-string">"approved"</span>, approved);</span><br><span class="line">            variables.put(<span class="hljs-string">"employee"</span>, approveRejectVO.getName());</span><br><span class="line">            Task task = taskService.createTaskQuery().taskId(approveRejectVO.getTaskId()).singleResult();</span><br><span class="line">            taskService.complete(task.getId(), variables);</span><br><span class="line">            <span class="hljs-keyword">if</span> (approved) &#123;</span><br><span class="line">                <span class="hljs-comment">//如果是同意，还需要继续走一步</span></span><br><span class="line">                Task t = taskService.createTaskQuery().processInstanceId(task.getProcessInstanceId()).singleResult();</span><br><span class="line">                taskService.complete(t.getId());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> RespBean.ok(<span class="hljs-string">"操作成功"</span>);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> RespBean.error(<span class="hljs-string">"操作失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家注意这个审批流程：</p><ol><li>审批时需要两个参数，approved 和 employee，approved 为 true，就会自动进入到审批通过的流程中，approved 为 false 则会自动进入到拒绝流程中。</li><li>通过 taskService，结合 taskId，从流程中查询出对应的 task，然后调用 taskService.complete 方法传入 taskId 和 变量，以使流程向下走。</li><li>小伙伴们再回顾一下我们前面的流程图，如果请求被批准备了，那么在执行完自定义的 Approve 逻辑后，就会进入到 Holiday approved 这个 userTask 中，注意此时并不会继续向下走了（还差一步到结束事件）；如果是请求拒绝，则在执行完自定义的 Reject 逻辑后，就进入到结束事件了，这个流程就结束了。</li><li>针对第三条，所以代码中我们还需要额外再加一步，如果是 approved 为 true，那么就再从当前流程中查询出来需要执行的 task，再调用 complete 继续走一步，此时就到了结束事件了，这个流程就结束了。注意这次的查询是根据当前流程的 ID 查询的，一个流程就是一条线，这条线上有很多 Task，我们可以从 Task 中获取到流程的 ID。</li></ol><p>好啦，接口就写好了。</p><p>当然，这里还涉及到两个自定义的逻辑，就是批准或者拒绝之后的自定义逻辑，这个其实很好写，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Approve</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">JavaDelegate</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(DelegateExecution execution)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"申请通过:"</span>+execution.getVariables());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们自定义类实现 JavaDelegate 接口即可，然后我们在 execute 方法中做自己想要做的事情即可，execution 中有这个流程中的所有变量。我们可以在这里发邮件（公众号江南一点雨后台回复 666 有发邮件教程）、发短信等等。Reject 的定义方式也是类似的。这些自定义类写好之后，将来配置到流程图中即可（可查看上文的流程图）。</p><p>最后再来看看前端提交方法就简单了（页面源码上文已经列出）：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">approveOrReject(taskId, approve,name) &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> _this = <span class="hljs-keyword">this</span>;</span><br><span class="line">    axios.post(<span class="hljs-string">'/handler'</span>, &#123;<span class="hljs-attr">taskId</span>: taskId, <span class="hljs-attr">approve</span>: approve,<span class="hljs-attr">name</span>:name&#125;)</span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;</span><br><span class="line">            _this.initTasks();</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就一个普通的 Ajax 请求，批准的话第二个参数就为 true，拒绝的话第二个参数就为 false。</p><h2 id="7-结果查询"><a href="#7-结果查询" class="headerlink" title="7. 结果查询"></a>7. 结果查询</h2><p>最后，每个用户都可以查看自己曾经的申请记录。本来这个登录之后就可以展示了，但是因为我们没有登录，所以这里也是需要手动输入查询的用户，然后根据用户名查询这个用户的历史记录，我们先来看查询接口：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/search"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">searchResult</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> askForLeaveService.searchResult(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数就是要查询的用户名。具体的查询流程如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">searchResult</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">    List&lt;HistoryInfo&gt; historyInfos = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;HistoricProcessInstance&gt; historicProcessInstances = historyService.createHistoricProcessInstanceQuery().processInstanceBusinessKey(name).finished().orderByProcessInstanceEndTime().desc().list();</span><br><span class="line">    <span class="hljs-keyword">for</span> (HistoricProcessInstance historicProcessInstance : historicProcessInstances) &#123;</span><br><span class="line">        HistoryInfo historyInfo = <span class="hljs-keyword">new</span> HistoryInfo();</span><br><span class="line">        Date startTime = historicProcessInstance.getStartTime();</span><br><span class="line">        Date endTime = historicProcessInstance.getEndTime();</span><br><span class="line">        List&lt;HistoricVariableInstance&gt; historicVariableInstances = historyService.createHistoricVariableInstanceQuery()</span><br><span class="line">                .processInstanceId(historicProcessInstance.getId())</span><br><span class="line">                .list();</span><br><span class="line">        <span class="hljs-keyword">for</span> (HistoricVariableInstance historicVariableInstance : historicVariableInstances) &#123;</span><br><span class="line">            String variableName = historicVariableInstance.getVariableName();</span><br><span class="line">            Object value = historicVariableInstance.getValue();</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-string">"reason"</span>.equals(variableName)) &#123;</span><br><span class="line">                historyInfo.setReason((String) value);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"days"</span>.equals(variableName)) &#123;</span><br><span class="line">                historyInfo.setDays(Integer.parseInt(value.toString()));</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"approved"</span>.equals(variableName)) &#123;</span><br><span class="line">                historyInfo.setStatus((Boolean) value);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"name"</span>.equals(variableName)) &#123;</span><br><span class="line">                historyInfo.setName((String) value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        historyInfo.setStartTime(startTime);</span><br><span class="line">        historyInfo.setEndTime(endTime);</span><br><span class="line">        historyInfos.add(historyInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> RespBean.ok(<span class="hljs-string">"ok"</span>, historyInfos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>我们当时在开启流程的时候，传入了一个参数 key，这里就是再次通过这个 key，也就是用户名去查询历史流程，查询的时候还加上了 finished 方法，这个表示要查询的流程必须是执行完毕的流程，对于没有执行完毕的流程，这里不查询，查完之后，按照流程最后的处理时间进行排序。</li><li>遍历第一步的查询结果，从 HistoricProcessInstance 中提取出每一个流程的详细信息，并存入到集合中，并最终返回。</li><li>这里涉及到两个历史数据查询，createHistoricProcessInstanceQuery 用来查询历史流程，而 createHistoricVariableInstanceQuery 则主要是用来查询流程变量的。</li></ol><p>最后，前端通过表格展示这个数据即可：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- Import style --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"//unpkg.com/element-plus/dist/index.css"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/vue@3"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- Import component library --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//unpkg.com/element-plus"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-top: 50px"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 300px"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"search"</span>&gt;</span>查询<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">border</span> <span class="hljs-attr">strip</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">"historyInfos"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"姓名"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"startTime"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"提交时间"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"endTime"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"审批时间"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"reason"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"事由"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"days"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"天数"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"状态"</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">"scope"</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">el-tag</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"success"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"scope.row.status"</span>&gt;</span>已通过<span class="hljs-tag">&lt;/<span class="hljs-name">el-tag</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">el-tag</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"danger"</span> <span class="hljs-attr">v-else</span>&gt;</span>已拒绝<span class="hljs-tag">&lt;/<span class="hljs-name">el-tag</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">    Vue.createApp(</span></span><br><span class="line"><span class="hljs-undefined">        &#123;</span></span><br><span class="line"><span class="hljs-undefined">            data() &#123;</span></span><br><span class="line"><span class="hljs-javascript">                <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">                    historyInfos: [],</span></span><br><span class="line"><span class="hljs-javascript">                    name: <span class="hljs-string">'zhangsan'</span></span></span><br><span class="line"><span class="hljs-undefined">                &#125;</span></span><br><span class="line"><span class="hljs-undefined">            &#125;,</span></span><br><span class="line"><span class="hljs-undefined">            methods: &#123;</span></span><br><span class="line"><span class="hljs-undefined">                search() &#123;</span></span><br><span class="line"><span class="hljs-javascript">                    <span class="hljs-keyword">let</span> _this = <span class="hljs-keyword">this</span>;</span></span><br><span class="line"><span class="hljs-javascript">                    axios.get(<span class="hljs-string">'/search?name='</span> + <span class="hljs-keyword">this</span>.name)</span></span><br><span class="line"><span class="hljs-javascript">                        .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                            <span class="hljs-keyword">if</span> (response.data.status == <span class="hljs-number">200</span>) &#123;</span></span><br><span class="line"><span class="hljs-undefined">                                _this.historyInfos=response.data.data;</span></span><br><span class="line"><span class="hljs-javascript">                            &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">                                _this.$message.error(response.data.msg);</span></span><br><span class="line"><span class="hljs-undefined">                            &#125;</span></span><br><span class="line"><span class="hljs-undefined">                        &#125;)</span></span><br><span class="line"><span class="hljs-javascript">                        .catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">                            <span class="hljs-built_in">console</span>.log(error);</span></span><br><span class="line"><span class="hljs-undefined">                        &#125;);</span></span><br><span class="line"><span class="hljs-undefined">                &#125;</span></span><br><span class="line"><span class="hljs-undefined">        &#125;</span></span><br><span class="line"><span class="hljs-javascript">    ).use(ElementPlus).mount(<span class="hljs-string">'#app'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个都是一些常规操作，我就不多说了，最终展示效果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220808205620.png" alt></p><h2 id="8-小结"><a href="#8-小结" class="headerlink" title="8. 小结"></a>8. 小结</h2><p>好啦，一个简单的请假流程，让大家对 Flowable 的玩法有一个基本的认知，下篇文章松哥来和大家继续完善本文。Flowable 的视频将会出现在 TienChin 项目中，大家不要错过哦：<a href="https://mp.weixin.qq.com/s/uiX_p-e3MNFSyvV21CTk8w" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小伙伴们知道松哥最近在录 TienChin 项目视频，这个项目会用到工作流，为了帮助小伙伴们更好的理解这个项目，松哥最近会出几篇文章和大伙聊一聊工作流 flowable 的使用，算是给 TienChin 项目的第一个铺垫，当然，在 TienChin 项目的系列视频中，我也会和大家详细聊一聊 flowable 流程引擎的使用。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Flowable" scheme="http://www.javaboy.org/tags/Flowable/"/>
    
  </entry>
  
  <entry>
    <title>写给 Java 程序员的前端 Promise 教程</title>
    <link href="http://www.javaboy.org/2022/0808/promise.html"/>
    <id>http://www.javaboy.org/2022/0808/promise.html</id>
    <published>2022-08-08T11:39:30.000Z</published>
    <updated>2022-12-19T11:53:06.860Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>小伙伴们知道，松哥最近在录 TienChin 项目，用的 RuoYi-Vue 脚手架，前端关于网络请求的地方，很多都涉及到了 Promise，为了让小伙伴们能更好的理解前端代码，咱们抽空整一篇文章和大家聊聊整个 Promise。</p><a id="more"></a><h2 id="1-为什么需要-Promise"><a href="#1-为什么需要-Promise" class="headerlink" title="1. 为什么需要 Promise"></a>1. 为什么需要 Promise</h2><p>假设我现在有这样一个需求，用户先去登录，登录成功之后，再去服务端获取用户信息，获取到用户信息之后再去服务端获取前端的动态菜单。一般我们的 Ajax 请求都是异步形式，为了确保上一步操作成功再执行下一个请求，所以最终发出的请求伪代码类似下面这样：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="hljs-string">'/login'</span>,</span><br><span class="line">    data:loginForm,</span><br><span class="line">    success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//登录成功</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="hljs-string">'/getInfo'</span>,</span><br><span class="line">            success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">userInfo</span>) </span>&#123;</span><br><span class="line">                <span class="hljs-comment">//获取用户信息成功</span></span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: <span class="hljs-string">'/getMenus'</span>,</span><br><span class="line">                    success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">menus</span>) </span>&#123;</span><br><span class="line">                        <span class="hljs-comment">//获取菜单成功</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>为了确保一个异步任务执行完成后，再执行下一个异步任务，我们不得不在回调函数中不停的写下去，上面我举的例子是三个请求嵌套，实际上可能会更多。。。这就是前端所谓的回调地狱。而 Promise 就是来解决回调地狱的。</p><h2 id="2-Promise"><a href="#2-Promise" class="headerlink" title="2. Promise"></a>2. Promise</h2><p>Promise 从字面上理解，就是承诺，承诺将来在某一个时间会做某一件事。通过 Promise 我们可以将异步任务执行的代码和处理的代码完全分离开。</p><p>还是第一小节这个例子，如果我们用 Promise 写，那么方式如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> number = <span class="hljs-built_in">Math</span>.random();</span><br><span class="line">        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0.5</span>) &#123;</span><br><span class="line">            resolve(<span class="hljs-string">"login success"</span>)</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="hljs-string">"login failed"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="hljs-number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> number = <span class="hljs-built_in">Math</span>.random();</span><br><span class="line">        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0.5</span>) &#123;</span><br><span class="line">            resolve(<span class="hljs-string">"getInfo success"</span>)</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="hljs-string">"getInfo failed"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="hljs-number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMenus</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> number = <span class="hljs-built_in">Math</span>.random();</span><br><span class="line">        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0.5</span>) &#123;</span><br><span class="line">            resolve(<span class="hljs-string">"getMenus success"</span>)</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="hljs-string">"getMenus failed"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="hljs-number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(login).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"login:"</span>, data);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(getInfo);</span><br><span class="line">&#125;).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"getInfo:"</span>, data);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(getMenus);</span><br><span class="line">&#125;).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"getMenus"</span>, data);</span><br><span class="line">&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"err:"</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们在 Promise 中写异步任务执行的代码，在上面的案例中，松哥通过 setTImeout 方法模拟了一个耗时操作，异步任务执行完毕后，我们调用 resolve 方法返回调用的结果（会进入到下一步的 then 中），也可以调用 reject 方法表示调用失败（会进入到 catch 中）。</p><h2 id="3-then"><a href="#3-then" class="headerlink" title="3. then"></a>3. then</h2><p>then 中的返回值可以分为三种情况。</p><h3 id="3-1-正常-return"><a href="#3-1-正常-return" class="headerlink" title="3.1 正常 return"></a>3.1 正常 return</h3><p>then 中方法的参数，是上一个 Promise 对象 resolve 的值，一个 Promise 对象可以有多个 then，例如上面案例的登录功能，我们可以一直 then 下去：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> number = <span class="hljs-built_in">Math</span>.random();</span><br><span class="line">        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0.5</span>) &#123;</span><br><span class="line">            resolve(<span class="hljs-string">"login success"</span>)</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="hljs-string">"login failed"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="hljs-number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(login).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"then1:"</span>, data);</span><br><span class="line">    <span class="hljs-keyword">return</span> data;</span><br><span class="line">&#125;).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"then2:"</span>, data);</span><br><span class="line">    <span class="hljs-keyword">return</span> data;</span><br><span class="line">&#125;).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"then3:"</span>, data);</span><br><span class="line">&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"err:"</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样可以一直返回，这有点像我们 Java 中的流式编程。</p><h3 id="3-2-抛出异常"><a href="#3-2-抛出异常" class="headerlink" title="3.2 抛出异常"></a>3.2 抛出异常</h3><p>在 then 中，我们可以对返回结果进行判断，不满足条件也可以直接抛出异常，这样就会进入到最近的 catch 代码块中。如下案例：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> number = <span class="hljs-built_in">Math</span>.random();</span><br><span class="line">        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0.5</span>) &#123;</span><br><span class="line">            resolve(<span class="hljs-string">"login success"</span>)</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="hljs-string">"login failed"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="hljs-number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(login).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"then1:"</span>, data);</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"出错啦"</span>);</span><br><span class="line">&#125;).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"then2:"</span>, data);</span><br><span class="line">    <span class="hljs-keyword">return</span> data;</span><br><span class="line">&#125;).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"then3:"</span>, data);</span><br><span class="line">&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"err:"</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>像上面这段代码，如果进入到第一个 then 中，第一个 then 直接抛出异常，这样直接就进入到 catch 中了，后面的 then 就都不会执行了。</p><h3 id="3-3-返回-Promise"><a href="#3-3-返回-Promise" class="headerlink" title="3.3 返回 Promise"></a>3.3 返回 Promise</h3><p>第三种情况就是 then 中也可以返回一个 Promise 对象，这个就如同我们第二小节的案例，我这里就不再赘述了。</p><p>就说一句，如果 then 中返回的是一个 Promise 对象，那么接下来的 then 其实是这个 Promise 对象的 then，而不是一开始的 Promise 的 then 了。例如如下伪代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.then(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<span class="hljs-keyword">return</span> B&#125;).then(xxx)</span><br></pre></td></tr></table></figure><p>假设 A 和 B 都是 Promise 对象，那么第二个 then 方法是 B 的 then。</p><p>好啦，这就是 then 中的三种返回值情况。</p><h2 id="4-catch"><a href="#4-catch" class="headerlink" title="4. catch"></a>4. catch</h2><p>catch 主要是用来处理异常的情况，两种情况下会进入到 catch 中：</p><ul><li>Promise 执行的时候通过 reject 返回数据。</li><li>then 中抛出 Error</li></ul><p>出了问题，就由<strong>最近的</strong> catch 来处理。</p><h2 id="5-finally"><a href="#5-finally" class="headerlink" title="5. finally"></a>5. finally</h2><p>最后还有一个 finally 用来兜底，这一套下来感觉有点像我们 Java 中的 try-catch-finally，也就是前面无论如何，最终 finally 中的代码都会执行。不过不同于 Java 中的 finally，Promise 中的 finally 在最终执行完毕后，还可以继续 then。。。前端的蜜汁操作。</p><h2 id="6-其他方法"><a href="#6-其他方法" class="headerlink" title="6. 其他方法"></a>6. 其他方法</h2><p>最后，我们再来看看 Promise 中的其他静态方法。</p><h3 id="6-1-Promise-all"><a href="#6-1-Promise-all" class="headerlink" title="6.1 Promise.all()"></a>6.1 Promise.all()</h3><p>Promise.all() 方法可以接收多个 Promise 对象，并且只返回一个 Promise 实例，这个方法会等所有输入的 Promise 对象的 resolve 方法都返回的时候，或者所有输入的 Promise 对象中有一个 reject 的时候，这个 all 就会执行结束，来看如下一个案例：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> promise1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">3</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> promise2 = <span class="hljs-number">42</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> promise3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, <span class="hljs-number">3000</span>, <span class="hljs-string">'foo'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-built_in">Promise</span>.all([promise1, promise2, promise3]).then(<span class="hljs-function">(<span class="hljs-params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(values);</span><br><span class="line">&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"err"</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当 promise1、promise2 以及 promise3 都执行了 resolve 的时候，就会进入到 then 中，这三个中有任意一个执行了 reject 就会进入到 catch 中。</p><h3 id="6-2-Promise-race"><a href="#6-2-Promise-race" class="headerlink" title="6.2 Promise.race()"></a>6.2 Promise.race()</h3><p>Promise.race() 方法可以接收多个 Promise 对象，一旦迭代器中的某个 Promise resolve 或 reject，返回的 Promise 就会 resolve 或 reject。</p><p>和 all 方法的区别在于，race 方法是谁执行的快，就用谁的结果。我们来看如下一段代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, <span class="hljs-number">500</span>, <span class="hljs-string">'one'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-keyword">const</span> promise2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(reject, <span class="hljs-number">600</span>, <span class="hljs-string">'two'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-built_in">Promise</span>.race([promise1, promise2]).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>promise1 执行时间短，promise2 执行时间长，所以最终结果就是 promise1 的结果。</p><h3 id="6-3-Promise-reject"><a href="#6-3-Promise-reject" class="headerlink" title="6.3 Promise.reject()"></a>6.3 Promise.reject()</h3><p>Promise.reject() 方法返回一个带有 reject 原因的 Promise 对象。来看如下一段代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolved</span>(<span class="hljs-params">result</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Resolved'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rejected</span>(<span class="hljs-params">result</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.error(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">"error"</span>).then(resolved).catch(rejected);</span><br></pre></td></tr></table></figure><p>这个执行的时候就会进入到 catch 中。</p><h3 id="6-4-Promise-resolve"><a href="#6-4-Promise-resolve" class="headerlink" title="6.4 Promise.resolve()"></a>6.4 Promise.resolve()</h3><p>Promise.resolve(value) 方法返回一个以给定值解析后的 Promise 对象。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> promise1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">3</span>);</span><br><span class="line">promise1.then(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"data"</span>, data);</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"err"</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个用法比较简单，没啥好说的。</p><p>还有一些其他方法我就不一一列举了，感兴趣的小伙伴们可以看看 MDN 上的相关讲解：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a>。</p><p>好啦，这个东西搞懂了，我们再去看 TienChin 项目的前端，就会非常容易了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;小伙伴们知道，松哥最近在录 TienChin 项目，用的 RuoYi-Vue 脚手架，前端关于网络请求的地方，很多都涉及到了 Promise，为了让小伙伴们能更好的理解前端代码，咱们抽空整一篇文章和大家聊聊整个 Promise。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue3" scheme="http://www.javaboy.org/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你用 Jenkins 自动部署 SpringBoot！</title>
    <link href="http://www.javaboy.org/2022/0804/jenkins-springboot.html"/>
    <id>http://www.javaboy.org/2022/0804/jenkins-springboot.html</id>
    <published>2022-08-04T11:39:12.000Z</published>
    <updated>2022-12-19T11:53:26.567Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-什么是-CI-CD"><a href="#1-什么是-CI-CD" class="headerlink" title="1. 什么是 CI/CD"></a>1. 什么是 CI/CD</h2><p>CI/CD 是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。</p><a id="more"></a><p>CI/CD 的核心概念可以总结为三点：</p><ul><li>持续集成</li><li>持续交付</li><li>持续部署</li></ul><p>CI/CD 主要针对在集成新代码时所引发的问题（俗称”集成地狱”）。</p><p>为什么会有集成地狱这个“雅称”呢？大家想想我们一个项目部署的过程，<code>拉取代码-&gt;构建-&gt;测试-&gt;打包-&gt;部署</code>，如果我们经常需要部署项目，特别是在微服务时代，服务特别多的情况下，不停的测试打包部署，那估计得有个人一整天专门做这事了，而这事又是繁琐的重复无意义的。</p><p>具体而言，CI/CD 可让持续自动化和持续监控贯穿于应用的整个生命周期（从集成和测试阶段，到交付和部署），这些关联的事务通常被统称为”CI/CD 管道”，由开发和运维团队以敏捷方式协同支持。</p><h3 id="1-1-CI（Continuous-Integration）"><a href="#1-1-CI（Continuous-Integration）" class="headerlink" title="1.1 CI（Continuous Integration）"></a>1.1 CI（Continuous Integration）</h3><p>CI/CD 中的”CI”始终指持续集成，它属于开发人员的自动化流程。成功的 CI 意味着应用代码的新更改会定期构建、测试并合并到代码仓库中，该解决方案可以解决在一次开发中有太多应用分支，从而导致相互冲突的问题。</p><h3 id="1-2-CD（Continuous-Delivery-Continuous-Deployment）"><a href="#1-2-CD（Continuous-Delivery-Continuous-Deployment）" class="headerlink" title="1.2 CD（Continuous Delivery/Continuous Deployment）"></a>1.2 CD（Continuous Delivery/Continuous Deployment）</h3><p>CI/CD 中的”CD”指的是持续交付和/或持续部署，这些相关概念有时会交叉使用。两者都事关管道后续阶段的自动化，但它们有时也会单独使用，用于说明自动化程度。</p><p>持续交付（Continuous Delivery）通常是指开发人员对应用的更改会自动进行错误测试并上传到代码仓库（如 GitHub、GitLab 等），然后由运维团队将其部署到实时生产环境中。这旨在解决开发和运维团队之间可见性及沟通较差的问题。因此，持续交付的目的就是确保尽可能减少部署新代码时所需的工作量。</p><p>持续部署（Continuous Deployment）指的是自动将开发人员的更改从代码仓库发布到生产环境，以供客户使用。通过一套全自动化的流程，来解决手动测试、编译、打包等操作。持续部署以持续交付的优势为根基，实现了管道后续阶段的自动化。</p><h2 id="2-什么是-Jenkins"><a href="#2-什么是-Jenkins" class="headerlink" title="2. 什么是 Jenkins"></a>2. 什么是 Jenkins</h2><p>前面说的 CI/CD 算是一种思想，思想要落地，就需要对应的工具。</p><p>Jenkins 是一款开源的 CI/CD 软件，可以算是 CI/CD 软件领导者，它提供了超过 1000 个插件来支持构建、部署、自动化，基本上能够满足任何项目的需要。</p><p>整体来说，Jenkins 有如下六大特点：</p><ul><li>持续集成和持续交付</li></ul><p>作为一个可扩展的自动化服务器，Jenkins 可以用作简单的 CI 服务器，或者变成任何项目的持续交付中心。</p><ul><li>简易安装</li></ul><p>Jenkins 是一个基于 Java 的独立程序，可以立即运行，包含 Windows、Mac OS X 和其他类 Unix 操作系统。</p><ul><li>配置简单</li></ul><p>Jenkins 可以通过其网页界面轻松设置和配置，其中包括即时错误检查和内置帮助。</p><ul><li>插件</li></ul><p>通过更新中心中的 1000 多个插件，Jenkins 集成了持续集成和持续交付工具链中几乎所有的工具。</p><ul><li>扩展</li></ul><p>Jenkins 可以通过其插件架构进行扩展，从而为 Jenkins 可以做的事提供几乎无限的可能性。</p><ul><li>分布式</li></ul><p>Jenkins 可以轻松地在多台机器上分配工作，帮助更快速地跨多个平台推动构建、测试和部署。</p><p>其实 Jenkins 有很多好玩的用法，今天我还是想先通过一个简单的案例，先来和大家捋一捋如何使用 Jenkins 来实现一个 Spring Boot 项目的自动发布部署，这样大家对 Jenkins 现有一个直观的认知，各种其他使用细节松哥在以后的文章中再来和大家细聊。</p><h2 id="3-准备工作"><a href="#3-准备工作" class="headerlink" title="3. 准备工作"></a>3. 准备工作</h2><h3 id="3-1-整体规划"><a href="#3-1-整体规划" class="headerlink" title="3.1 整体规划"></a>3.1 整体规划</h3><p>我们先来通过如下一张图片来看下 Jenkins 在整个流程中扮演的角色：</p><p><img src="http://img.itboyhub.com/2021/10/tran/jenkins01.png" alt></p><p>结合第一二小节的介绍，这张图应该很好理解。</p><h3 id="3-2-准备代码"><a href="#3-2-准备代码" class="headerlink" title="3.2 准备代码"></a>3.2 准备代码</h3><p>提前准备好测试代码，并上传到代码仓库中。为了更加逼真一些，小伙伴们可以将这个代码仓库设置为私有的，这样将来可以检验 Jenkins 中的配置是否正确。</p><p>考虑到 GitHub 网络有时候不稳定，我这里使用了 Gitee，一个很简单的 Spring Boot 工程，里边有一个 hello 接口，仅此而已。</p><p>我的代码仓库地址（私有仓库）：</p><ul><li><a href="https://gitee.com/lenve/jenkins_demo.git" target="_blank" rel="noopener">https://gitee.com/lenve/jenkins_demo.git</a></li></ul><h3 id="3-3-准备服务器"><a href="#3-3-准备服务器" class="headerlink" title="3.3 准备服务器"></a>3.3 准备服务器</h3><p>理论上，我们需要一台服务器用来跑 Jenkins，还需要一台服务器作为我的应用服务器，但是我手头没有多余的服务器，所以我就将 Jenkins 和我的 Spring Boot 项目部署到一台服务器上，在接下来的文章中我会和大家说明每个配置是针对 Jenkins 的还是针对 Spring Boot 的。</p><p>另外，有的小伙伴可能是在虚拟机上做实验，因为将来我们的代码提交到 Gitee 之后，Gitee 会通过一个 POST 请求将这个事件告知 Jenkins，进而触发 Jenkins 的构建操作。所以这就要求 Gitee 能够访问到你的 Jenkins 服务器，所以如果你的 Jenkins 刚好搭建在服务器上，这事就很容易了，但如果是搭建在虚拟机里，就得通过花生壳之类的内网穿透工具来辅助你的工作了，比较麻烦，而且花生壳网速也慢。</p><p><strong>不过小伙伴们不必担心，如果你在虚拟上搭建的 Jenkins，并且不愿意折腾花生壳，那么也可以通过手动构建/定时构建的方式去完成项目构建的。</strong></p><h2 id="4-搭建-Jenkins"><a href="#4-搭建-Jenkins" class="headerlink" title="4. 搭建 Jenkins"></a>4. 搭建 Jenkins</h2><p>为了省事，我决定用 Docker  搭建 Jenkins，一行命令搞定。</p><p>为了操作方便，我们将 Jenkins 的工作目录映射到我的宿主机中来，因此首先在宿主机中准备一个数据目录（不是必须）：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 创建 jenkins 目录</span></span><br><span class="line">mkdir /data/jenkins_home/</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 修改目录的所有者，以便于 Jenkins 容器能够操作该目录</span></span><br><span class="line">chown -R 1000:1000 /data/jenkins_home/</span><br></pre></td></tr></table></figure><p>接下来创建并启动 Jenkins 容器，同时挂载数据卷：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name jenkins -p 8088:8080 -p 50000:50000 -v /data/jenkins_home:/var/jenkins_home jenkins/jenkins</span><br></pre></td></tr></table></figure><p>由于 Jenkins 在运行的时候需要用到 maven，所以有的人会选择将 maven 目录也作为挂载点，但是我觉得没有必要，特别是对于初学者而言，这块很容易出错，不如将 maven 将来直接拷贝到 Jenkins 容器中，这样反而省事一些。</p><p>执行如上命令，安装成功之后，浏览器输入 <code>http://localhost:8088</code> 就可以访问了。</p><p><img src="http://img.itboyhub.com/2021/10/tran/jenkins02.png" alt></p><p>然后稍等片刻，就可以访问 Jenkins 了：</p><p><img src="http://img.itboyhub.com/2021/10/tran/jenkins03.png" alt></p><p>访问之前，首先需要解锁 Jenkins，解锁密码位置网页上列出来了，但是由于我们创建容器的时候设置了数据卷，所以，现在直接去宿主机的 <code>/data/jenkins_home/secrets/initialAdminPassword</code> 位置查看初始化密码，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/jenkins04.png" alt></p><p>在网页中，输入密码然后继续。接下来会让我们选择需要的插件，第一次使用，安装推荐插件即可。</p><p><img src="http://img.itboyhub.com/2021/10/tran/jenkins05.png" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/jenkins06.png" alt></p><p>如果因为网络原因安装失败，可以点击重试按钮进行重试。</p><p>接下来创建一个新的用户，也可以不创建新的用户，直接使用 admin 即可：</p><p><img src="http://img.itboyhub.com/2021/10/tran/jenkins07.png" alt></p><p>再设置 Jenkins 访问地址：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803095540329.png" alt></p><p>这个页面有乱码，不过不影响，设置完成后，我们点击保存并完成按钮即可。接下来就可以进入到 Jenkins 中了。</p><p>整个过程执行完毕后，建议执行如下命令重启一下 Jenkins，因为有的插件需要重启之后才会生效。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart jenkins</span><br></pre></td></tr></table></figure><h2 id="5-安装插件"><a href="#5-安装插件" class="headerlink" title="5. 安装插件"></a>5. 安装插件</h2><p>Jenkins 启动成功之后，接下来我们安装三个必要的插件：</p><ul><li>Maven Integration：Maven 构建工具</li><li>Publish Over SSH：整个工具，将来把 Jenkins 打包好的 jar 上传到应用服务器上。</li><li>Gitee：协助使用 Gitee 仓库。</li></ul><p>安装步骤如下：</p><p>点击左边的系统管理，然后点击右边的插件管理，进行配置。</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803095956610.png" alt></p><p>然后在可选插件中，搜索 Maven Integration 和 Publish Over SSH 以及 Gitee 三个插件：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803100309138.png" alt><br><img src="http://img.itboyhub.com/2021/10/tran/image-20220803102729071.png" alt></p><p>搜索完成后，点击 Install without restart。</p><p>安装成功之后，重启 Jenkins。</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803100415646.png" alt></p><p>建议执行 <code>docker restart jenkins</code> 去重启，点击网页上的重启，会卡很久，还是执行 docker 重启命令靠谱一些。</p><h2 id="6-配置-Jenkins"><a href="#6-配置-Jenkins" class="headerlink" title="6. 配置 Jenkins"></a>6. 配置 Jenkins</h2><h3 id="6-1-基本的环境配置"><a href="#6-1-基本的环境配置" class="headerlink" title="6.1 基本的环境配置"></a>6.1 基本的环境配置</h3><p>插件安装成功之后，接下来我们开启 Jenkins 的配置，在正式开始配置之前，先做一点准备工作。</p><p>这个需要我们提前准备好 Maven，由于 Jenkins 容器中已经包含一个 JDK 了，所以我们可以不用提前准备 JDK，只需要提前准备 Maven 即可。为了避免权限问题，我们可以直接将 Maven 上传到 jenkins 容器中，然后去配置即可。</p><p>如下将宿主机中的 maven 拷贝到 Jenkins 容器中：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 这个命令表示将宿主机中的 maven 目录拷贝到 jenkins 容器中的 /opt/ 目录下</span></span><br><span class="line">docker cp maven jenkins:/opt/</span><br></pre></td></tr></table></figure><p>接下来就可以开始配置了，配置的位置如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803100754206.png" alt></p><h3 id="6-2-JDK"><a href="#6-2-JDK" class="headerlink" title="6.2 JDK"></a>6.2 JDK</h3><p>首先我们来配置 JDK，Jenkins 中默认安装了 JDK，我们只需要将其配置配出出来即可：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803101719496.png" alt></p><p>别名随意取，JAVA_HOME 则根据实际情况配置。</p><h3 id="6-3-Maven"><a href="#6-3-Maven" class="headerlink" title="6.3 Maven"></a>6.3 Maven</h3><p>Maven 就是我们刚刚上传到 docker 中期中的 Maven，配置一下位置即可，Jenkins 将来会自动从 Gitee 上将代码拉下来，然后就利用你这里配置的 Maven 进行构建：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803102006235.png" alt></p><p>名字随意取，MAVEN_HOME 则是前面刚刚上传到容器中的 MAVEN 目录。</p><h3 id="6-4-Git"><a href="#6-4-Git" class="headerlink" title="6.4 Git"></a>6.4 Git</h3><p>配置 Git，由于 Jenkins 容器中已经存在 git 了，所以这里不需要额外安装 git，默认即可。</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803101813123.png" alt></p><p>所有都配置完成，点击保存按钮。</p><h3 id="6-5-远程的凭证配置"><a href="#6-5-远程的凭证配置" class="headerlink" title="6.5 远程的凭证配置"></a>6.5 远程的凭证配置</h3><p>接下来还需要我们配置两个远程登录凭证。</p><h4 id="6-5-1-应用服务器信息"><a href="#6-5-1-应用服务器信息" class="headerlink" title="6.5.1 应用服务器信息"></a>6.5.1 应用服务器信息</h4><p>应用服务器，就是将来 Jenkins 将代码构建成 jar 包后，要上传的服务器的信息（地址、用户名以及密码）。</p><p>配置步骤如下，首先找到配置的位置：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803102239648.png" alt></p><p>往下拉找到 Publish Over SSH，然后点击新增，开始配置，Hostname 位置填写你服务器的域名或者 IP：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803102548136222.png" alt></p><p>配置成功后，点击测试连接进行测试，确保连接是成功的。</p><blockquote><p>有的小伙伴反馈这里用户名密码会导致 jar 包上传失败，要在应用服务器上生成 ssh 密钥对，然后将私钥配置给 Jenkins（这块大家结合自己情况来看，如果后面 jar 上传失败，可以回来改一下这里）。</p></blockquote><h4 id="6-5-2-Gitee-的信息"><a href="#6-5-2-Gitee-的信息" class="headerlink" title="6.5.2 Gitee 的信息"></a>6.5.2 Gitee 的信息</h4><p>接下来我们配置 Gitee 的信息。</p><p>首先配置仓库的基本信息：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803103153589.png" alt></p><p>接下来配置 Gitee 的凭证，要根据这些凭证，才能从 Gitee 上拉取代码下来，点击 <code>添加-&gt;Jenkins</code>，添加凭证：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803103418033.png" alt></p><p>添加成功之后，就可以选择这个令牌了。</p><p>最后点击测试连接，确保可以连上 Gitee。</p><p>所有配置工作都做完了，接下来我们就可以开始构建一个项目了。</p><h2 id="7-开始一个项目的构建"><a href="#7-开始一个项目的构建" class="headerlink" title="7. 开始一个项目的构建"></a>7. 开始一个项目的构建</h2><p>首先我们新建一个任务</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803103735394.png" alt></p><p>接下来我们选择构建一个 Maven 项目</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803103830497.png" alt></p><p>点击确定之后，拉到源码管理位置，开始配置。</p><p>首先选择 Git，填入 Gitee 上的仓库地址，然后凭证就写 Gitee 的用户名/密码。</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803104223941.png" alt></p><p>这里有一个需要注意的地方，就是默认的分支名称，GitHub 上现在默认的主分支名称是 main，Gitee 似乎还是 master，这个无所谓了，但是小伙伴们注意图片下面的分支，按你实际的情况填写。</p><p>这里也要添加凭证信息：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-202208031041261312222.png" alt></p><p>这里也要注意下，有小伙伴反馈 Gitee 上的用户名和用户空间不是一回事（如果用的 GitHub 就不存在这个问题），我这里用户名位置实际填入用户空间名（如果你也不知道什么是用户空间，那么恭喜你，直接写用户名就行了）。</p><p>加上时间，我们看下打印的过程：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803104517156.png" alt></p><p>接下来输入项目构建命令，将来 Jenkins 从 Gitee 上拉取代码下来之后，就执行该命令对项目进行打包：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803104623169.png" alt></p><p>最后，配置上传构建好的文件，并执行启动命令，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803104947558.png" alt></p><p>配置的详细信息：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803105611407.png" alt></p><p>根据上图的配置，我们使用 root 用户登录，root 登录成功之后，默认进入到 /root 目录下，接下来会自动进入到 data 目录，然后我们的 jar 包就上传到这个位置上。</p><p>然后我们在应用服务器上也提前准备好一个 shell 脚本叫做 deploy.sh，位于 <code>/root/data</code> 目录下,这个脚本内容如下：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/java</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">JAR_PATH=/root/data</span><br><span class="line"></span><br><span class="line">JARFILE=jenkins_demo-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">ps -ef | grep $JARFILE | grep -v grep | awk '&#123;print $2&#125;' | xargs kill -9</span><br><span class="line"></span><br><span class="line">java -jar $JAR_PATH/$JARFILE &gt; out.log &amp;</span><br><span class="line">if [ $? = 0 ];then</span><br><span class="line">        sleep 30</span><br><span class="line">        tail -n 50 out.log</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>这个脚本其实很好理解，前面先配置一下环境变量，注意这个是应用服务器的环境变量，不是 Jenkins 的。</p><p>然后先检查一下，如果应用程序已经在运行了，就先将之停止掉。然后运行我们最新的 jar 即可。</p><p>另外，可以开启 SSH 操作日志，开启日志之后，就可以看到 Jenkins 中操作应用服务器其的过程了，特别是大家第一次配置的时候，容易出错，配置了日志，将来出错就知道什么原因导致的错误了。</p><p>配置方式如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803140603444.png" alt></p><p>至此，这个项目就配置完成了。</p><p>保存之后，点击立即构建按钮，就可以开始构建了：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803140723567.png" alt></p><p>开始构建之后，可以点击构建按钮，查看构建过程：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803141003923.png" alt></p><p>点击控制台输出，可以查看整个构建过程：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803141130900.png" alt></p><p>构建完成后，来到应用服务器，执行 jps 命令查看运行的 Java 进程，就可以看到我们的应用程序已经跑起来了。</p><h2 id="8-自动构建"><a href="#8-自动构建" class="headerlink" title="8. 自动构建"></a>8. 自动构建</h2><p>好了，现在我们的项目还不是自动构建，也就是当我们向 Gitee 上的代码仓库提交代码之后，并不会触发 Jenkins 的自动构建，得我们手动点击构建按钮，接下来我们再来继续配置，实现自动触发构建。</p><p>为了实现自动触发构建，我们需要修改两个地方。</p><h3 id="8-1-修改-Jenkins"><a href="#8-1-修改-Jenkins" class="headerlink" title="8.1 修改 Jenkins"></a>8.1 修改 Jenkins</h3><p>首先在 Jenkins 的当前项目中，配置一下触发构建的规则：</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803141725213--222.png" alt></p><p>大家注意，在网页上 Jenkins 已经给出了将来要配置的 Webhook 的地址了，大家直接拷贝该地址即可。</p><h3 id="8-2-配置-Webhook"><a href="#8-2-配置-Webhook" class="headerlink" title="8.2 配置 Webhook"></a>8.2 配置 Webhook</h3><p>接下来在 Gitee 的项目中，配置 WebHook，在当前项目中，选择管理选项卡，左边菜单点击 WebHooks，然后点击添加 WebHook。</p><p><img src="http://img.itboyhub.com/2021/10/tran/image-20220803142317703222.png" alt></p><p>由于 Jenkins 是要登录之后才可以操作的，处于公网的 Jenkins 我们也不能降至设置为匿名访问，所以这里我们将 Jenkins 的用户名密码放在请求地址中，最终地址类似这样：<code>http://username:password@11.11.11.11:8088/xxxx</code>。</p><p>好啦，这就行了，配置完成后，接下来我们向 Gitee 代码仓库提交代码，提交成功之后，我们去查看是否会触发 Jenkins 自动构建功能。</p><h2 id="9-小结"><a href="#9-小结" class="headerlink" title="9. 小结"></a>9. 小结</h2><p>好啦，关于 Jenkins 还有很多好玩的用法，今天的文章限于篇幅我就先通过一个简单的案例来和大家分享一下 Jenkins 的基本用法，以便于小伙伴们对 Jenkins 建立一个直观的印象，更多的玩法，松哥将在后续的文章中和大家继续介绍，小伙伴们也可以留言说说你想看 Jenkins 怎么玩。</p><p>参考资料：</p><ul><li><a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" target="_blank" rel="noopener">https://www.redhat.com/zh/topics/devops/what-is-ci-cd</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-什么是-CI-CD&quot;&gt;&lt;a href=&quot;#1-什么是-CI-CD&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是 CI/CD&quot;&gt;&lt;/a&gt;1. 什么是 CI/CD&lt;/h2&gt;&lt;p&gt;CI/CD 是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Jenkins" scheme="http://www.javaboy.org/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>松哥手把手教你在 Vue3 中自定义插件</title>
    <link href="http://www.javaboy.org/2022/0801/vue3-plugins.html"/>
    <id>http://www.javaboy.org/2022/0801/vue3-plugins.html</id>
    <published>2022-08-01T11:38:52.000Z</published>
    <updated>2022-12-19T11:53:03.105Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>最近在录 TienChin 项目，项目涉及到了 Vue 中插件的定义，因此整了这么一篇文章，手把手教大家在 Vue3 中定义插件，这个技能掌握了，就可以看懂 TienChin 前端代码了。</p><a id="more"></a><h2 id="1-Vue-插件"><a href="#1-Vue-插件" class="headerlink" title="1. Vue 插件"></a>1. Vue 插件</h2><p>在 Vue 中，一些简单的功能，我们可以直接定义为全局方法，然后挂到 Vue 上就能使用了，例如在 vhr 中，我们将网络请求方法进行封装，然后挂到了 Vue.prototype 上就可以了，类似下面这样：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123;postRequest&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"./utils/api"</span>;</span><br><span class="line"></span><br><span class="line">Vue.prototype.postRequest = postRequest;</span><br></pre></td></tr></table></figure><p>然后在使用的地方，就可以通过 this.postRequest 去使用了。</p><blockquote><p>小伙伴们需要注意，这个在 Vue3 中有所变化，prototype 变为了 config.globalProperties，也就是在 Vue3 中再想要挂载全局方法，应该是 <code>const app = createApp(App);app.config.globalProperties.useDict = useDict</code> 这种形式了（具体我将在 TienChin 项目中和大家细聊）。</p></blockquote><p>这也算是一种插件定义方式，但是这种一般适用于一些工具方法，无法定义一些比较复杂的插件，复杂的插件还是得通过 Vue 中提供的插件定义方式来定义。</p><h2 id="2-自定义插件"><a href="#2-自定义插件" class="headerlink" title="2. 自定义插件"></a>2. 自定义插件</h2><h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h3><p>首先我们新建一个目录 plugins 专门用来放我们的插件，然后在这个目录中新建一个 index.js 文件用来开发插件，内容如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">    install: <span class="hljs-function">(<span class="hljs-params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"我的第一个插件"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>install 中的方法将会被自动执行。</p><p>接下来我们就可以在 main.js 中引入我们这个插件了：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> plugin <span class="hljs-keyword">from</span> <span class="hljs-string">'./plugins'</span></span><br><span class="line"></span><br><span class="line">app.use(plugin);</span><br></pre></td></tr></table></figure><p>app.use 就表示引入插件，引入插件之后，插件中的 install 方法就会被自动执行。</p><p>app.use 方法接收两个参数，第一个参数就是我们导入的插件 js 对象，第二个参数是可选的，大家看到插件定义时候的 install 方法有两个参数，第一个参数是 Vue 实例，这是自动传入的，第二个参数 options 则是我们在 app.use 中，通过第二个参数传入进来的。当然上面这个例子中松哥没有传递第二个参数。</p><p>好了，如此配置之后，接下来启动项目，控制台就可以看到有日志打出了。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220727184510.png" alt></p><p>这样的插件未免过于简单，接下来我们就给这个插件加点料。</p><h3 id="2-2-加入组件"><a href="#2-2-加入组件" class="headerlink" title="2.2 加入组件"></a>2.2 加入组件</h3><p>首先我们定义一个新的组件，如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.javaboy.org"</span>&gt;</span>javaboy<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">        name: <span class="hljs-string">"MyBanner"</span></span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们现在就可以在插件中将这个组件注册为一个全局组件了，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> MyBanner <span class="hljs-keyword">from</span> <span class="hljs-string">"@/plugins/components/MyBanner"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">    install: <span class="hljs-function">(<span class="hljs-params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"我的第一个插件"</span>)</span><br><span class="line">        app.component(<span class="hljs-string">'my-banner'</span>, MyBanner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先在插件中导入这个组件，然后通过 app 进行组件注册，注册完成后，我们就可以在项目任意位置使用 <code>my-banner</code> 组件了，如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">my-banner</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-banner</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终显示效果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220727184541.png" alt></p><h3 id="2-3-加入指令"><a href="#2-3-加入指令" class="headerlink" title="2.3 加入指令"></a>2.3 加入指令</h3><p>我们甚至还可以在插件中注册一个指令，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> MyBanner <span class="hljs-keyword">from</span> <span class="hljs-string">"@/plugins/components/MyBanner"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">    install: <span class="hljs-function">(<span class="hljs-params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"我的第一个插件"</span>)</span><br><span class="line">        app.component(<span class="hljs-string">'my-banner'</span>, MyBanner);</span><br><span class="line">        app.directive(<span class="hljs-string">"font-size"</span>, (el, binding, vnode) =&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> size = <span class="hljs-number">16</span>;</span><br><span class="line">            <span class="hljs-keyword">switch</span> (binding.arg) &#123;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">"small"</span>:</span><br><span class="line">                    size = <span class="hljs-number">16</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">"large"</span>:</span><br><span class="line">                    size = <span class="hljs-number">32</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">default</span>:</span><br><span class="line">                    size = <span class="hljs-number">48</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            el.style.fontSize = size + <span class="hljs-string">"px"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在，我们就可以在项目中随时随地去使用这个指令了，例如在我们刚刚自定义的 my-banner 中使用这个指令：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.javaboy.org"</span> <span class="hljs-attr">v-font-size:small</span>&gt;</span>javaboy<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">        name: <span class="hljs-string">"MyBanner"</span></span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们甚至可以通过 options 将指令中字体的大小动态的传进来，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> MyBanner <span class="hljs-keyword">from</span> <span class="hljs-string">"@/plugins/components/MyBanner"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">    install: <span class="hljs-function">(<span class="hljs-params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"我的第一个插件"</span>)</span><br><span class="line">        app.component(<span class="hljs-string">'my-banner'</span>, MyBanner);</span><br><span class="line">        app.directive(<span class="hljs-string">"font-size"</span>, (el, binding, vnode) =&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> size = <span class="hljs-number">16</span>;</span><br><span class="line">            <span class="hljs-keyword">switch</span> (binding.arg) &#123;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">"small"</span>:</span><br><span class="line">                    size = options.small;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">"large"</span>:</span><br><span class="line">                    size = options.large;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">default</span>:</span><br><span class="line">                    size = options.defaut;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            el.style.fontSize = size + <span class="hljs-string">"px"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>options 是插件注册时候传入的一个 JSON 参数，small、large 以及 default 分别对应的字体多大，要看插件注册时传入的值：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> plugin <span class="hljs-keyword">from</span> <span class="hljs-string">'./plugins'</span></span><br><span class="line"></span><br><span class="line">app.use(plugin, &#123;<span class="hljs-attr">small</span>: <span class="hljs-number">16</span>, <span class="hljs-attr">large</span>: <span class="hljs-number">32</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">48</span>&#125;);</span><br></pre></td></tr></table></figure><p>第二个参数，大家看，就是 options 参数的值。</p><blockquote><p>现在大家想想我们平时用 ElementUI 的时候，Vue.use 方法，传入 ElementUI，再传入一些其他参数，看了上面这个例子，ElementUI 引入到底是怎么个引入法现在大家就明白了吧。</p></blockquote><h3 id="2-4-provide-amp-inject"><a href="#2-4-provide-amp-inject" class="headerlink" title="2.4 provide &amp; inject"></a>2.4 provide &amp; inject</h3><p>在插件中，也可以通过 provide 来提供一个方法，在需要使用该方法的地方，通过 inject 注入方法，然后就可以使用了，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> MyBanner <span class="hljs-keyword">from</span> <span class="hljs-string">"@/plugins/components/MyBanner"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">    install: <span class="hljs-function">(<span class="hljs-params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"我的第一个插件"</span>)</span><br><span class="line">        app.component(<span class="hljs-string">'my-banner'</span>, MyBanner);</span><br><span class="line">        app.directive(<span class="hljs-string">"font-size"</span>, (el, binding, vnode) =&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> size = <span class="hljs-number">16</span>;</span><br><span class="line">            <span class="hljs-keyword">switch</span> (binding.arg) &#123;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">"small"</span>:</span><br><span class="line">                    size = options.small;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">"large"</span>:</span><br><span class="line">                    size = options.large;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">default</span>:</span><br><span class="line">                    size = options.defaut;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            el.style.fontSize = size + <span class="hljs-string">"px"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="hljs-keyword">const</span> clickMe = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"==========clickMe========="</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        app.provide(<span class="hljs-string">'clickMe'</span>, clickMe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在需要使用的地方，通过 inject 注入方法后就可以使用了，如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.javaboy.org"</span> <span class="hljs-attr">v-font-size:small</span>&gt;</span>javaboy<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">import</span> &#123;inject&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>;</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">        name: <span class="hljs-string">"MyBanner"</span>,</span></span><br><span class="line"><span class="hljs-undefined">        mounted() &#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-keyword">const</span> clickMe = inject(<span class="hljs-string">'clickMe'</span>);</span></span><br><span class="line"><span class="hljs-undefined">            clickMe();</span></span><br><span class="line"><span class="hljs-undefined">        &#125;</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><p>整体上来说，通过这种方式来自定义插件，能够实现的内容比较丰富。如果只是想挂一个全局方法来用，那么其实是没有必要定义插件的。如果只是想挂载一个全局方法，在 Vue2 中可以按照如下方式使用：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.postRequest = postRequest;</span><br></pre></td></tr></table></figure><p>在 Vue3 中则可以通过如下方式：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config.globalProperties.useDict = useDict</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;最近在录 TienChin 项目，项目涉及到了 Vue 中插件的定义，因此整了这么一篇文章，手把手教大家在 Vue3 中定义插件，这个技能掌握了，就可以看懂 TienChin 前端代码了。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue3" scheme="http://www.javaboy.org/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>七月最后一天，给小伙伴们汇报下 TienChin 项目视频进度</title>
    <link href="http://www.javaboy.org/2022/0731/tienchin-video.html"/>
    <id>http://www.javaboy.org/2022/0731/tienchin-video.html</id>
    <published>2022-07-31T11:38:38.000Z</published>
    <updated>2022-12-19T11:53:34.831Z</updated>
    
    <content type="html"><![CDATA[<p>距离上次跟小伙伴们汇报 TienChin 项目视频进度已经过去一个月啦，今天是 7 月 31 号，再来汇报一下这个月视频的进展。</p><a id="more"></a><p>其实也没啥好说的，直接上目录吧！</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">000.开篇.mp4</span><br><span class="line">001.运行RuoYi-Vue.mp4</span><br><span class="line">002.代码格式化.mp4</span><br><span class="line">003.项目结构大改造.mp4</span><br><span class="line">004.项目改造完善.mp4</span><br><span class="line">005.项目结构分析.mp4</span><br><span class="line">006.验证码响应结果分析.mp4</span><br><span class="line">007.验证码生成接口分析.mp4</span><br><span class="line">008.验证码配置分析.mp4</span><br><span class="line">009.验证码的校验.mp4</span><br><span class="line">010.登录流程分析.mp4</span><br><span class="line">011.登录JWT校验.mp4</span><br><span class="line">012.SpringSecurity登录配置分析.mp4</span><br><span class="line">013.自定义多数据源思路分析.mp4</span><br><span class="line">014.自定义多数据源-1.mp4</span><br><span class="line">015.自定义多数据源-2.mp4</span><br><span class="line">016.手动实现网页上切换数据源.mp4</span><br><span class="line">017.RateLimiter注解简介.mp4</span><br><span class="line">018.自定义限流注解-1.mp4</span><br><span class="line">019.自定义限流注解-2.mp4</span><br><span class="line">020.RuoYi脚手架限流注解分析.mp4</span><br><span class="line">021.幂等性实现的6中思路梳理.mp4</span><br><span class="line">022.实现JSON格式参数多次读取.mp4</span><br><span class="line">023.防止请求重复提交.mp4</span><br><span class="line">024.防止接口重复提交注解分析.mp4</span><br><span class="line">025.数据权限注解介绍.mp4</span><br><span class="line">026.数据权限案例准备工作.mp4</span><br><span class="line">027.权限注解实现思路分析.mp4</span><br><span class="line">028.自定义数据权限注解@DataScope.mp4</span><br><span class="line">029.数据权限过滤角色数据.mp4</span><br><span class="line">030.数据权限过滤用户数据.mp4</span><br><span class="line">031.数据权限注解总结.mp4</span><br><span class="line">032.操作日志记录.mp4</span><br><span class="line">033.修改日志方法名称.mp4</span><br><span class="line">034.理解Aware接口.mp4</span><br><span class="line">035.自定义注解+AOP整理.mp4</span><br><span class="line">036.TienChin细化到按钮的权限实现思路.mp4</span><br><span class="line">037.理解TienChin项目中的权限注解.mp4</span><br><span class="line">038.角色和权限概念梳理.mp4</span><br><span class="line">039.Spring Security中角色和权限的区别.mp4</span><br><span class="line">040.SpringSecurity中的权限处理逻辑.mp4</span><br><span class="line">041.SpringSecurity中使用权限通配符.mp4</span><br><span class="line">042.SpringSecurity另一种权限判断方式.mp4</span><br><span class="line">043.自定义权限表达式.mp4</span><br><span class="line">044.使用POSTMAN测试项目接口.mp4</span><br><span class="line">045.自定义TienChin项目权限判断表达式.mp4</span><br><span class="line">046.登录鉴权流程梳理.mp4</span><br><span class="line">047.运行RuoYi-Vue3.mp4</span><br><span class="line">048.动态菜单实现思路.mp4</span><br><span class="line">049.动态菜单JSON分析.mp4</span><br><span class="line">050.动态菜单的path问题.mp4</span><br><span class="line">051.服务端查询当前登录用户菜单.mp4</span><br><span class="line">052.服务端构建动态菜单.mp4</span><br><span class="line">053.动态菜单实现思路梳理.mp4</span><br><span class="line">054.Vue3中的动态菜单递归渲染.mp4</span><br><span class="line">055.前端固定路由定义.mp4</span><br><span class="line">056.前端轻量级状态管理框架Pinia.mp4</span><br><span class="line">057.前端网络请求封装思路.mp4</span><br><span class="line">058.前端登录请求执行流程.mp4</span><br><span class="line">059.前端动态菜单加载思路.mp4</span><br><span class="line">060.动态菜单为什么不能存在localStorage.mp4</span><br><span class="line">061.动态菜单为什么不能存在localStorage-2.mp4</span><br><span class="line">062.前端路由导航守卫源码分析.mp4</span><br><span class="line">063.前端动态菜单加载四个核心变量.mp4</span><br><span class="line">064.routes变量多级菜单铺平.mp4</span><br><span class="line">065.component字符串转对象.mp4</span><br><span class="line">066.前端多级菜单铺平.mp4</span><br><span class="line">067.过滤前端本地动态路由.mp4</span><br><span class="line">068.前端generateRoutes方法.mp4</span><br><span class="line">【号外001】.登录流程解析.mp4</span><br><span class="line">【号外002】.分布式事务开篇.mp4</span><br><span class="line">【号外003】.分布式事务seata三个核心概念.mp4</span><br><span class="line">【号外004】.分布式事务seata四种事务模式.mp4</span><br><span class="line">【号外005】.分布式事务seata中的at模式.mp4</span><br><span class="line">【号外006】.分布式事务安装seata-server.mp4</span><br><span class="line">【号外007】.分布式事务seata-at模式实战.mp4</span><br><span class="line">【号外008】.分布式事务seata-at模式总结.mp4</span><br><span class="line">【号外009】.多数据源如何处理事务问题.mp4</span><br><span class="line">【号外010】.分布式事务seata-at模式补充.mp4</span><br><span class="line">【号外011】.分布式事务seata-tcc模式简介.mp4</span><br><span class="line">【号外012】.分布式事务seata-tcc模式实战-1.mp4</span><br><span class="line">【号外013】.分布式事务seata-tcc模式实战-2.mp4</span><br><span class="line">【号外014】.分布式事务seata-tcc模式实战-3.mp4</span><br><span class="line">【号外015】.分布式事务seata-tcc模式实战-4.mp4</span><br><span class="line">【号外016】.分布式事务seata-tcc总结.mp4</span><br><span class="line">【号外017】.分布式事务seata-xa简介.mp4</span><br><span class="line">【号外018】.MySQL中的XA事务实践.mp4</span><br><span class="line">【号外019】.分布式事务seata-xa模式实战-1.mp4</span><br><span class="line">【号外020】.分布式事务seata-xa模式实战-2.mp4</span><br><span class="line">【号外021】.分布式事务总结-1.mp4</span><br><span class="line">【号外022】.分布式事务总结-2.mp4</span><br><span class="line">【号外023】.动态代理的两种实现方式.mp4</span><br><span class="line">【号外024】.解决多数据源注解失效问题.mp4</span><br></pre></td></tr></table></figure><p><strong>目前已经录的总共是 69+24=93 集，约 25 个小时。</strong>七月份的更新主要是跟大家把动态菜单捋清楚，然后开始逐步讲一些 Vue3 相关的内容。</p><p><strong>这套视频预计更完之后内容会比较多，所以小伙伴们其实现在就可以跟着松哥慢慢敲起来了，更完再敲积累太多容易打退堂鼓。</strong></p><p>虽然我感觉自己一直在吆喝，但是还是不少小伙伴来了第一句话是“松哥又有新教程啦？”：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220731113711.png" alt></p><p>因此这里再跟大伙啰嗦一下：</p><blockquote><p>TienChin 项目是一个健身会员管理系统，基于 RuoYi-Vue 脚手架来做，使用 Spring Boot + Vue3 开发，不同于之前的 vhr 是一个脚手架，TienChin 项目的业务完成度会超过 90%。这个项目的视频教程整体上分为两大块：第一块主要是解剖 RuoYi-Vue 脚手架，让小伙伴们能够熟练掌握这个脚手架的使用，在这个过程中，我会讲许多技术点，前面列出来的视频目录都属于这一部分的内容，这个过程中我不会带领大家从头敲一边 RuoYi-Vue 脚手架，但是对项目里边的一些技术点，会有针对性的讲解，也会写一些案例来帮助大家理解这些技术点。第二块内容则主要是业务功能的完成了，业务功能涉及到的技术点主要有：SpringBoot、Vue、MyBatis Plus、MySQL、Redis、Flowable、EasyExcel、NodeJS 等。</p></blockquote><p>目前更新的视频主要出于第一阶段。</p><p>这些视频基本上都是工作之余录制的，大部分都是早上 6-8 点之间录的，所以是付费视频，视频定价是 399，不过目前可以 7 折上车，也就是 279，之前买过 vhr 的小伙伴可在此基础上再优惠 30，即只要 249，随着视频的录制，内容越来越多，折扣力度也会变小，这个之前买过 vhr 视频得小伙伴应该都懂，无论你何时上车，当前价格都是你在未来能够买到的最低价格啦。</p><p>录视频还是蛮辛苦的，一方面赚点小钱养家糊口，另一方面也是小伙伴们的认可在支撑着我把这件事做下去，得瑟一下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/996.jpg" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/995.jpg" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/013.jpeg" alt></p><p><strong>有时候看小伙伴们发的，我真的特别动容。虽然大家看我天天写文章聊技术，其实我在生活中除了工作之外很少和人交流，真的特别想给这些爱学习会说话的小伙伴们点赞，他们肯定会混的比我好。</strong></p><hr><p>好啦，最后再统一回答大家几个关于视频的问题。</p><p><strong>Q1：视频放在哪里，怎么播放？</strong></p><p>视频放在百度网盘上，下载后使用专用播放器授权播放，专用播放器一机一码一人一码。至于小伙伴们推荐的阿里网盘等，由于空间、分享文件类型等限制，并无法用在 TienChin 项目视频分发中。</p><p><strong>Q2：视频为什么不支持在线播放？</strong></p><p>在线播放的话，一般都是和平台合作，但是国内大家所熟知的平台如慕课网、csdn 学院等，平台抽成基本都是 4 成起，松哥之前还合作了一个平台拿 6 成（也就是假如 100 块钱的课，平台拿走 60）。这样的分成比例无形中会推高课程的价格，现在我自己分发，所以才能做到<strong>低价</strong>。同时为了防止视频泄露，松哥对视频做了加密处理，这样可以确保大家不会在其他地方看到一模一样的免费视频，加密后的视频只能使用专用播放器播放，因此不支持在线播放。</p><p><strong>Q3：视频可以试看吗？</strong></p><p>其实我最近在公号发的视频，大家都可以当作试看的，反正的录视频风格是不变的。和 vhr 视频相比，现在的 TienChin 项目视频音质是杠杠滴，下面三个视频是我最近发过的，小伙伴们可以当作试看的视频：</p><p><strong>Q4：可以砍价吗？</strong></p><p>不可以，这个价格已经很便宜了，没法砍了（悄悄告诉大家，从 vhr 到 tienchin，暂时没有人砍价成功过）。</p><p><strong>Q5：视频多久更新完毕？</strong></p><p>其实如果单纯带着大家写业务功能，这个项目不会花太多时间，这样虽然大家完整的做了一个项目，但是技术却不会有太多长进，而我则希望在这个过程中多整点活，能让小伙伴们技术也有一些提升，这样内容一加，最终何时更完就不确定了。不过，有一点是可以保证的，每周至少一次，每周至少更一个半小时精品视频。</p><p><strong>Q6：知识星球是什么？</strong></p><p>星球主要是用来更新视频下载地址的地方，大家在这套视频教程时遇到问题时，都可以在星球上提问，小伙伴们购买视频后，我会拉你进星球。</p><p><strong>Q7：这套视频适合哪些人看？</strong></p><p>学习这套视频，首先需要有 SSM 基础，如果没有，可以在公众号后台回复 SSM，有我录制的免费视频教程；另外也需要一些 Spring Boot 基础和 Vue 基础，要是没接触过 Spring Boot 和 Vue 的话，那么建议先看看 vhr，戳这里：<a href="https://mp.weixin.qq.com/s/aIyP77WrrswWNXaueBXj7w" target="_blank" rel="noopener">Spring Boot+Vue+微人事视频教程</a></p><p><strong>Q8：看视频有问题可以问吗？</strong></p><p>参考 Q6。</p><p><strong>Q9：这套视频我能学到啥？</strong></p><p>TienChin 项目基于 RuoYi-Vue 脚手架（Spring Boot+Vue3），这套视频学完后，小伙伴们对 RuoYi-Vue 脚手架基本上就融会贯通了，并能在 RuoYi-Vue 脚手架上随心所欲的开发常规的企业后台应用。并且对于分布式事务 seata、Flowable 流程引擎等框架也能熟练使用并掌握其原理，对于 Redis 在项目中的各种实际应用场景也会有较好的掌握。</p><hr><p><strong>好啦，七折 279 抄底就在今天啦！</strong></p><p>P.s.：可能有小伙伴加了松哥多个微信，其实没有必要重复添加，任意一个都能找到我。当然，如果你还没有松哥微信，扫码加微信，转账 279 上车吧（买过 vhr 的小伙伴可在此基础上再优惠 ¥30 哦）～</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220731113838.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离上次跟小伙伴们汇报 TienChin 项目视频进度已经过去一个月啦，今天是 7 月 31 号，再来汇报一下这个月视频的进展。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>不用Swagger，那我用啥？</title>
    <link href="http://www.javaboy.org/2022/0728/openapi.html"/>
    <id>http://www.javaboy.org/2022/0728/openapi.html</id>
    <published>2022-07-28T11:38:12.000Z</published>
    <updated>2022-12-19T11:53:30.585Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>上周松哥写了一篇文章和小伙伴们分享 Swagger3 在 Spring Boot 中的用法，评论中有不少小伙伴推荐 Spring Doc，松哥趁着休息时间抽空看了下，这个东西确实不错，不存在和 Spring Boot 之间的兼容问题，于是就撸了这篇文章和小伙伴们分享。一起来看看这个好玩的文档生成工具吧！</p><a id="more"></a><h2 id="1-OpenApi"><a href="#1-OpenApi" class="headerlink" title="1. OpenApi"></a>1. OpenApi</h2><p>在正式学习 Spring Doc 之前，先给大家介绍一下 OpenAPI。</p><p>OpenApi 是一个业界的 API 文档标准，是一个规范，这个规范目前有两大实现，分别是：</p><ul><li>SpringFox</li><li>SpringDoc</li></ul><p>其中 SpringFox 其实也就是我们之前所说的 Swagger，SpringDoc 则是我们今天要说的内容。</p><p>OpenApi 就像 JDBC 一样，制定了各种各样的规范，而 Swagger 和 SpringDoc 则类似于各种各样的数据库驱动，是具体的实现。</p><p>所以可能很多小伙伴也发现了，Swagger 和 Spring Doc 有一些相似的地方，这就是因为他们都遵守了相同的规范。</p><p>不过呢，Swagger 更新有点慢吞吞的，为了能够和新版的 Spring Boot 整合，还是 SpringDoc 更值得体验一把。</p><p>SpringDoc 支持：</p><ul><li>OpenAPI 3</li><li>Spring-boot，全版本都支持。</li><li>JSR-303 中提供的一些注解，例如 <code>@NotNull</code>、<code>@Min</code>、<code>@Max</code> 以及 <code>@Size</code> 等。</li><li>Swagger-ui：SpringDoc 提供的接口 JSON 也可以通过 Swagger-ui 展示出来。</li><li>OAuth 2</li><li>…</li></ul><h2 id="2-引入-SpringDoc"><a href="#2-引入-SpringDoc" class="headerlink" title="2. 引入 SpringDoc"></a>2. 引入 SpringDoc</h2><p>小伙伴们知道，这种生成接口文档的工具，一般来说都是两方面的功能：</p><ul><li>生成接口文档 JSON。</li><li>渲染接口文档 JSON。</li></ul><p>所以，当我们使用 SpringDoc 的时候，如果只是想要生成接口文档 JSON，那么只需要添加如下依赖即可：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-webmvc-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，就会针对项目中的接口自动生成接口的 JSON 文档，类似下面这样：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220725224736.png" alt></p><p>这样的 JSON 信息开发者可以自行将之绘制出来，也可以使用网上一些现成的工具例如 Knife4j 之类的。当然你要是不想费事，也可以使用 SwaggerUI 将之绘制出来，如果想使用网页，那么就不要使用上面的依赖，用下面这个依赖，不仅可以生成 JSON 接口，还可以生成渲染后的网页：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页效果如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220725225230.png" alt></p><p>这个网页看着眼熟，其实就是 Swagger UI。</p><p>这个网页上有一个输入框，输入的内容是 <code>/v3/api-docs</code>，这个地址就是这个网页想要渲染的 JSON 的地址，如果开发者修改了生成的 JSON API 文档的地址，那么就需要手动在这个输入框中输入一下 JSON API 文档的地址。</p><p>默认的 JSON API 文档地址是：</p><ul><li>/v3/api-docs</li></ul><p>默认的网页 UI 地址是：</p><ul><li>/swagger-ui/index.html</li></ul><p>如果需要配置，则可以在 Spring Boot 的 application.properties 中直接进行配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">springdoc.swagger-ui.path=/javaboy-ui</span><br><span class="line">springdoc.api-docs.path=/javaboy-api</span><br></pre></td></tr></table></figure><p>不过这两个配置并不是真的修改了访问路径，这两个相当于给访问路径取了一个别名，访问这两个时会自动重定向到对应的路径上。</p><h2 id="3-结合-Spring-Security"><a href="#3-结合-Spring-Security" class="headerlink" title="3. 结合 Spring Security"></a>3. 结合 Spring Security</h2><p>如果我们的项目中使用了 Spring Security，那么部分接口的参数可能会比较特殊，例如下面这个接口：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/hello"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(@AuthenticationPrincipal User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"user = "</span> + user);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口的参数加上了一个 <code>@AuthenticationPrincipal</code> 注解表示当前登录成功的用户对象，这个参数在实际使用中，并不需要前端传递，服务端会自动注入该参数。</p><p>但是！如果使用了 SpringDoc，通过网页去调用这个接口的时候，这个参数就必须要要传递，对于这种问题，我们可以引入如下依赖自动帮我们解决：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个依赖会自动帮我们忽略掉接口中带有 @AuthenticationPrincipal 注解的参数，这样我们在通过 swagger-ui 去进行接口测试的时候就不需要传递这个参数了。</p><h2 id="4-结合-Spring-Data-Rest"><a href="#4-结合-Spring-Data-Rest" class="headerlink" title="4. 结合 Spring Data Rest"></a>4. 结合 Spring Data Rest</h2><p>Spring Boot 中提供了 Spring Data Rest，结合 Jpa 可以非常方便的构建出 Restful 应用。但是这种 Restful 应用不需要开发者自己写接口，那么怎么生成接口文档呢（连接口在哪里都不知道）？针对于此，SpringDoc 也提供了相关的支持，我们一起来看下。</p><h3 id="4-1-Spring-Data-Rest"><a href="#4-1-Spring-Data-Rest" class="headerlink" title="4.1 Spring Data Rest"></a>4.1 Spring Data Rest</h3><h4 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h4><p>首先创建一个 Spring Boot 工程，引入 <code>Web</code> 、 <code>Jpa</code> 、 <code>MySQL</code> 、<code>Rest Repositories</code> 依赖：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220726194628.png" alt></p><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>主要配置两个，一个是数据库，另一个是 Jpa：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=1234</span><br><span class="line">spring.datasource.url=jdbc:mysql:///test02?serverTimezone=Asia/Shanghai</span><br><span class="line"></span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line">spring.jpa.database=mysql</span><br><span class="line">spring.jpa.database-platform=mysql</span><br><span class="line">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect</span><br></pre></td></tr></table></figure><p>这里的配置，和 Jpa 中的基本一致。</p><p>前面三行配置了数据库的基本信息，包括数据库连接池、数据库用户名、数据库密码、数据库连接地址以及数据库驱动名称。</p><p>接下来的五行配置了 JPA 的基本信息，分别表示生成 SQL 的方言、打印出生成的 SQL 、每次启动项目时根据实际情况选择是否更新表、数据库平台是 MySQL。</p><p>这两段配置是关于 MySQL + JPA 的配置，没用过 JPA 的小伙伴可以参考松哥之前的 JPA 文章：<a href="http://www.javaboy.org/2019/0407/springboot-jpa.html">http://www.javaboy.org/2019/0407/springboot-jpa.html</a></p><h4 id="构建实体类"><a href="#构建实体类" class="headerlink" title="构建实体类"></a>构建实体类</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Entity</span>(name = <span class="hljs-string">"t_book"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Id</span></span><br><span class="line">    <span class="hljs-meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="hljs-keyword">private</span> Long id;</span><br><span class="line">    <span class="hljs-meta">@Column</span>(name = <span class="hljs-string">"book_name"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String name;</span><br><span class="line">    <span class="hljs-keyword">private</span> String author;</span><br><span class="line">    <span class="hljs-comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">Book</span>,<span class="hljs-title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里一个是配置了一个实体类 Book，另一个则是配置了一个 BookRepository ，项目启动成功后，框架会根据 Book 类的定义，在数据库中自动创建相应的表，BookRepository 接口则是继承自 JpaRepository ，JpaRepository 中自带了一些基本的增删改查方法。</p><p>好了，代码写完了。</p><p>啥？你好像啥都没写啊？是的，啥都没写，啥都不用写，一个 RESTful 风格的增删改查应用就有了，这就是 Spring Boot 的魅力！</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>此时，我们就可以启动项目进行测试了，使用 POSTMAN 来测试（大家也可以自行选择趁手的 HTTP 请求工具）。</p><p>此时我们的项目已经默认具备了一些接口，我们分别来看：</p><h6 id="根据-id-查询接口"><a href="#根据-id-查询接口" class="headerlink" title="根据 id 查询接口"></a>根据 id 查询接口</h6><ul><li><a href="http://127.0.0.1:8080/books/{id}" target="_blank" rel="noopener">http://127.0.0.1:8080/books/{id}</a></li></ul><p>这个接口表示根据 id 查询某一本书：</p><p><img src="http://img.itboyhub.com/2021/springboot2/31-2.png" alt></p><h6 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h6><ul><li><a href="http://127.0.0.1:8080/books" target="_blank" rel="noopener">http://127.0.0.1:8080/books</a></li></ul><p>这是一个批量查询接口，默认请求路径是类名首字母小写，并且再加一个 s 后缀。这个接口实际上是一个分页查询接口，没有传参数，表示查询第一页，每页 20 条数据。</p><p><img src="http://img.itboyhub.com/2021/springboot2/31-3.png" alt></p><p>查询结果中，除了该有的数据之外，也包含了分页数据：</p><p><img src="http://img.itboyhub.com/2021/springboot2/31-4.png" alt></p><p>分页数据中：</p><ol><li>size 表示每页查询记录数</li><li>totalElements 表示总记录数</li><li>totalPages 表示总页数</li><li>number 表示当前页数，从0开始计</li></ol><p>如果要分页或者排序查询，可以使用 _links 中的链接。<code>http://127.0.0.1:8080/books?page=1&amp;size=3&amp;sort=id,desc</code> 。</p><p><img src="http://img.itboyhub.com/2021/springboot2/31-5.png" alt></p><h6 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h6><p>也可以添加数据，添加是 POST 请求，数据通过 JSON 的形式传递，如下：</p><p><img src="http://img.itboyhub.com/2021/springboot2/31-6.png" alt></p><p>添加成功之后，默认会返回添加成功的数据。</p><h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><p>修改接口默认也是存在的，数据修改请求是一个 PUT 请求，修改的参数也是通过 JSON 的形式传递：</p><p><img src="http://img.itboyhub.com/2021/springboot2/31-7.png" alt></p><p>默认情况下，修改成功后，会返回修改成功的数据。</p><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><p>当然也可以通过 DELETE 请求根据 id 删除数据：</p><p><img src="http://img.itboyhub.com/2021/springboot2/31-8.png" alt></p><p>删除成功后，是没有返回值的。</p><p>不需要几行代码，一个基本的增删改查就有了。</p><p>这些都是默认的配置，这些默认的配置实际上都是在 JpaRepository 的基础上实现的，实际项目中，我们还可以对这些功能进行定制。</p><h4 id="查询定制"><a href="#查询定制" class="headerlink" title="查询定制"></a>查询定制</h4><p>最广泛的定制，就是查询，因为增删改操作的变化不像查询这么丰富。对于查询的定制，非常容易，只需要提供相关的方法即可。例如根据作者查询书籍：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">Book</span>,<span class="hljs-title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findBookByAuthorContaining</span><span class="hljs-params">(@Param(<span class="hljs-string">"author"</span>)</span> String author)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，方法的定义，参数要有 @Param 注解。</p><p>定制完成后，重启项目，此时就多了一个查询接口，开发者可以通过 <a href="http://localhost:8080/books/search" target="_blank" rel="noopener">http://localhost:8080/books/search</a> 来查看和 book 相关的自定义接口都有哪些：</p><p><img src="http://img.itboyhub.com/2021/springboot2/31-9.png" alt></p><p>查询结果表示，只有一个自定义接口，接口名就是方法名，而且查询结果还给出了接口调用的示例。我们来尝试调用一下自己定义的查询接口：</p><p><img src="http://img.itboyhub.com/2021/springboot2/31-10.png" alt></p><p>开发者可以根据实际情况，在 BookRepository 中定义任意多个查询方法，查询方法的定义规则和 Jpa 中一模一样（不懂 Jpa 的小伙伴，可以参考<a href="https://mp.weixin.qq.com/s/Fg5ssXuvabZwEfRMKfpY9Q" target="_blank" rel="noopener">干货|一文读懂 Spring Data Jpa！</a>，或者在松哥个人网站 <a href="http://www.javaboy.org">www.javaboy.org</a> 上搜索 JPA，有相关教程参考）。但是，这样有一个缺陷，就是 Jpa 中方法名太长，因此，如果不想使用方法名作为接口名，则可以自定义接口名：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">Book</span>, <span class="hljs-title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@RestResource</span>(rel = <span class="hljs-string">"byauthor"</span>,path = <span class="hljs-string">"byauthor"</span>)</span><br><span class="line">    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findBookByAuthorContaining</span><span class="hljs-params">(@Param(<span class="hljs-string">"author"</span>)</span> String author)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestResource 注解中，两个参数的含义：</p><ul><li>rel 表示接口查询中，这个方法的 key            </li><li>path 表示请求路径</li></ul><p>这样定义完成后，表示接口名为 byauthor ，重启项目，继续查询接口：</p><p><img src="http://img.itboyhub.com/2021/springboot2/31-11.png" alt></p><p>除了 <code>rel</code> 和 <code>path</code> 两个属性之外，<code>@RestResource</code> 中还有一个属性，<code>exported</code> 表示是否暴露接口，默认为 <code>true</code> ，表示暴露接口，即方法可以在前端调用，如果仅仅只是想定义一个方法，不需要在前端调用这个方法，可以设置 <code>exported</code> 属性为 <code>false</code> 。</p><p>如果不想暴露官方定义好的方法，例如根据 <code>id</code> 删除数据，只需要在自定义接口中重写该方法，然后在该方法上加 <code>@RestResource</code> 注解并且配置相关属性即可。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">Book</span>, <span class="hljs-title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@RestResource</span>(rel = <span class="hljs-string">"byauthor"</span>,path = <span class="hljs-string">"byauthor"</span>)</span><br><span class="line">    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findBookByAuthorContaining</span><span class="hljs-params">(@Param(<span class="hljs-string">"author"</span>)</span> String author)</span>;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-meta">@RestResource</span>(exported = <span class="hljs-keyword">false</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(Long aLong)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外生成的 JSON 字符串中的集合名和单个 <code>item</code> 的名字都是可以自定义的：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RepositoryRestResource</span>(collectionResourceRel = <span class="hljs-string">"bs"</span>,itemResourceRel = <span class="hljs-string">"b"</span>,path = <span class="hljs-string">"bs"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">Book</span>, <span class="hljs-title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@RestResource</span>(rel = <span class="hljs-string">"byauthor"</span>,path = <span class="hljs-string">"byauthor"</span>)</span><br><span class="line">    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findBookByAuthorContaining</span><span class="hljs-params">(@Param(<span class="hljs-string">"author"</span>)</span> String author)</span>;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-meta">@RestResource</span>(exported = <span class="hljs-keyword">false</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(Long aLong)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>path</code> 属性表示请求路径，请求路径默认是类名首字母小写+s，可以在这里自己重新定义。</p><h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><p>最后，也可以在 application.properties 中配置 REST 基本参数：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring.data.rest.base-path=/api</span><br><span class="line">spring.data.rest.sort-param-name=sort</span><br><span class="line">spring.data.rest.page-param-name=page</span><br><span class="line">spring.data.rest.limit-param-name=size</span><br><span class="line">spring.data.rest.max-page-size=20</span><br><span class="line">spring.data.rest.default-page-size=0</span><br><span class="line">spring.data.rest.return-body-on-update=true</span><br><span class="line">spring.data.rest.return-body-on-create=true</span><br></pre></td></tr></table></figure><p>配置含义，从上往下，依次是：</p><ol><li>给所有的接口添加统一的前缀</li><li>配置排序参数的 key ，默认是 sort</li><li>配置分页查询时页码的 key，默认是 page</li><li>配置分页查询时每页查询页数的 key，默认是size</li><li>配置每页最大查询记录数，默认是 20 条</li><li>分页查询时默认的页码</li><li>更新成功时是否返回更新记录</li><li>添加成功时是否返回添加记录</li></ol><p>这是 Spring Data Rest 的一个简单用法，接下来我们来看如何给这个生成的文档。</p><h3 id="4-2-生成接口文档"><a href="#4-2-生成接口文档" class="headerlink" title="4.2 生成接口文档"></a>4.2 生成接口文档</h3><p>对于这种你都没看到接口的，我们只需要添加如下依赖，就可以自动生成 API 文档了，如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-data-rest<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>生成的接口文档如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220726194702.png" alt></p><h2 id="5-结合-Actuator"><a href="#5-结合-Actuator" class="headerlink" title="5. 结合 Actuator"></a>5. 结合 Actuator</h2><p>在之前的 Spring Boot 教程中，松哥还和大家介绍过 Spring Boot 中的 actuator，这个工具可以自行生成项目运行数据的端点（endpoints），如果想把这些端点也纳入到 SpringDoc 中来，那么只需要添加如下配置即可：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">springdoc.show-actuator=true</span><br></pre></td></tr></table></figure><p>至于 SpringDoc 会显示多少个 Actuator 端点出来，那就要看 Actuator 暴露出来多少端点了，最终显示效果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220726194716.png" alt></p><p>不过这里还有一个玩法！</p><p>SpringDoc 扮演的角色毕竟不是业务功能，而是项目的辅助功能，所以，我们可以将之从业务中剥离，放到 Actuator 中，毕竟 Actuator 专干这种事。那么只需要增加如下两个配置即可：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">springdoc.use-management-port=true</span><br><span class="line">management.endpoints.web.exposure.include=openapi, swagger-ui</span><br><span class="line">management.server.port=9090</span><br></pre></td></tr></table></figure><p>配置完成后，将来就可以在 Actuator 中去查看接口文档和对应的页面了，访问地址是：</p><ul><li><a href="http://localhost:9090/actuator/swagger-ui/index.html" target="_blank" rel="noopener">http://localhost:9090/actuator/swagger-ui/index.html</a></li></ul><p><img src="http://img.itboyhub.com/2021/10/tran/20220726195002.png" alt></p><h2 id="6-切换到-Swagger"><a href="#6-切换到-Swagger" class="headerlink" title="6. 切换到 Swagger"></a>6. 切换到 Swagger</h2><p>如果你在项目中已经使用了 Swagger 了，那么也可以非常方便的切换到 SpringDoc 上面来，切换的时候，首先引入 SpringDoc 依赖：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Swagger 和 SpringDoc 注解的对应关系如下：</p><ul><li>@Api → @Tag</li><li>@ApiIgnore → @Parameter(hidden = true) or @Operation(hidden = true) or @Hidden</li><li>@ApiImplicitParam → @Parameter</li><li>@ApiImplicitParams → @Parameters</li><li>@ApiModel → @Schema</li><li>@ApiModelProperty(hidden = true) → @Schema(accessMode = READ_ONLY)</li><li>@ApiModelProperty → @Schema</li><li>@ApiOperation(value = “foo”, notes = “bar”) → @Operation(summary = “foo”, description = “bar”)</li><li>@ApiParam → @Parameter</li><li>@ApiResponse(code = 404, message = “foo”) → @ApiResponse(responseCode = “404”, description = “foo”)</li></ul><p>以前我们在 Swagger 中配置接口扫描的方式如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">publicApi</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">"org.github.springshop.web.public"</span>))</span><br><span class="line">            .paths(PathSelectors.regex(<span class="hljs-string">"/public.*"</span>))</span><br><span class="line">            .build()</span><br><span class="line">            .groupName(<span class="hljs-string">"springshop-public"</span>)</span><br><span class="line">            .apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">adminApi</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">"org.github.springshop.web.admin"</span>))</span><br><span class="line">            .paths(PathSelectors.regex(<span class="hljs-string">"/admin.*"</span>))</span><br><span class="line">            .apis(RequestHandlerSelectors.withMethodAnnotation(Admin.class))</span><br><span class="line">            .build()</span><br><span class="line">            .groupName(<span class="hljs-string">"springshop-admin"</span>)</span><br><span class="line">            .apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在在 SpringDoc 中则按照如下方式进行配置即可（还可以按照注解去标记需要生成接口文档的方法）：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringDocConfig</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> GroupedOpenApi <span class="hljs-title">publicApi</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="hljs-string">"springshop-public"</span>)</span><br><span class="line">                .pathsToMatch(<span class="hljs-string">"/public/**"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> GroupedOpenApi <span class="hljs-title">adminApi</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="hljs-string">"springshop-admin"</span>)</span><br><span class="line">                .pathsToMatch(<span class="hljs-string">"/admin/**"</span>)</span><br><span class="line">                .addOpenApiMethodFilter(method -&gt; method.isAnnotationPresent(RequestMapping.class))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果你并不需要对接口文档进行分组，那么也可以不使用 Java 配置，直接在 application.properties 中进行配置即可：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">springdoc.packages-to-scan=org.javaboy.spring_doc.controller</span><br><span class="line">springdoc.paths-to-match=/**</span><br></pre></td></tr></table></figure><p>在 SpringDoc 中，如果你想配置 Swagger UI，则可以通过如下方式进行配置：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-function">OpenAPI <span class="hljs-title">springShopOpenAPI</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OpenAPI()</span><br><span class="line">            .info(<span class="hljs-keyword">new</span> Info().title(<span class="hljs-string">"江南一点雨"</span>)</span><br><span class="line">                    .description(<span class="hljs-string">"Spring Boot 教程"</span>)</span><br><span class="line">                    .version(<span class="hljs-string">"v0.0.1"</span>)</span><br><span class="line">                    .license(<span class="hljs-keyword">new</span> License().name(<span class="hljs-string">"Apache 2.0"</span>).url(<span class="hljs-string">"http://www.javaboy.org"</span>)))</span><br><span class="line">            .externalDocs(<span class="hljs-keyword">new</span> ExternalDocumentation()</span><br><span class="line">                    .description(<span class="hljs-string">"一些描述信息"</span>)</span><br><span class="line">                    .url(<span class="hljs-string">"https://github.com/lenve/vhr"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好啦，常见用法大概就是这样，感兴趣的小伙伴可以去试试哦~关于 SpringDoc 的更多玩法，大家也可以参考官方文档：springdoc.org。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;上周松哥写了一篇文章和小伙伴们分享 Swagger3 在 Spring Boot 中的用法，评论中有不少小伙伴推荐 Spring Doc，松哥趁着休息时间抽空看了下，这个东西确实不错，不存在和 Spring Boot 之间的兼容问题，于是就撸了这篇文章和小伙伴们分享。一起来看看这个好玩的文档生成工具吧！&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Swagger" scheme="http://www.javaboy.org/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你在 Vue3 中自定义指令</title>
    <link href="http://www.javaboy.org/2022/0725/vue-directive.html"/>
    <id>http://www.javaboy.org/2022/0725/vue-directive.html</id>
    <published>2022-07-25T14:23:25.000Z</published>
    <updated>2022-12-17T14:25:14.181Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>TienChin 项目前端是 Vue3，前端有这样的一个需求：有一些前端页面上的按钮要根据用户的权限来决定是否展示出来，如果用户具备相应的权限，那么就展示对应的按钮；如果用户不具备对应的权限，那么按钮就隐藏起来。大致上就这样一个需求。</p><a id="more"></a><p>看到这个需求，可能有小伙伴首先想到用 v-if 指令，这个指令确实也能做，但是，由于用户具备的权限一般来说可能是多个，甚至可能还有通配符，所以这个比对并不是一个容易的事情，肯定得写方法。。。所以，如果能用一个指令来实现这个功能，那么就会显得专业很多了。</p><p>说干就干，我们来看看 Vue3 中如何自定义指令。</p><h2 id="1-成果展示"><a href="#1-成果展示" class="headerlink" title="1. 成果展示"></a>1. 成果展示</h2><p>我们先来看看实现自定义指令最终的使用方式：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btnClick"</span> <span class="hljs-attr">v-hasPermission</span>=<span class="hljs-string">"['user:delete']"</span>&gt;</span>删除用户<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小伙伴们看到，这个 <code>v-hasPermission</code> 就是我们的自定义指令，如果当前用户具备 <code>user:delete</code> 权限，这个按钮就会展示出来，如果当前用户不具备这个权限，这个按钮就不会展示出来。</p><h2 id="2-指令基础"><a href="#2-指令基础" class="headerlink" title="2. 指令基础"></a>2. 指令基础</h2><p>先要和小伙伴们说一下，Vue2 和 Vue3 在自定义指令上有一些差异，并不完全一致，下面的介绍主要是针对 Vue3 的介绍。</p><p>我先来和小伙伴们分享一下我们具体是怎么做的，然后在讲解代码的时候再来和大家说说各个参数的含义。</p><h3 id="2-1-两种作用域"><a href="#2-1-两种作用域" class="headerlink" title="2.1 两种作用域"></a>2.1 两种作用域</h3><p>自定义指令可以定义全局的，也可以定义局部的。</p><p>在正式开搞之前，小伙伴们需要先明白，自定义指令有两种作用域，一种是局部的自定义指令，还有一种是全局的自定义指令。局部的自定义指令就只能在当前 <code>.vue</code> 文件中使用，全局的则可以在所有的 <code>.vue</code> 文件中使用。</p><h4 id="2-1-1-局部指令"><a href="#2-1-1-局部指令" class="headerlink" title="2.1.1 局部指令"></a>2.1.1 局部指令</h4><p>直接在当前 .vue 文件中定义即可，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    <span class="hljs-comment">// 指令的定义</span></span><br><span class="line">    mounted(el) &#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，在 Vue3 中，也可以这样写：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button v-onceClick=<span class="hljs-string">"10000"</span> @click=<span class="hljs-string">"btnClick"</span>&gt;ClickMe&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    import &#123;ref&#125; from 'vue';</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    export default &#123;</span></span><br><span class="line"><span class="hljs-regexp">        name: "MyVue01",</span></span><br><span class="line"><span class="hljs-regexp">        setup() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            const a = ref(1);</span></span><br><span class="line"><span class="hljs-regexp">            const btnClick = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">                a.value++;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            return &#123;a, btnClick&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &#125;,</span></span><br><span class="line"><span class="hljs-regexp">        directives: &#123;</span></span><br><span class="line"><span class="hljs-regexp">            onceClick: &#123;</span></span><br><span class="line"><span class="hljs-regexp">                mounted(el, binding, vnode) &#123;</span></span><br><span class="line"><span class="hljs-regexp">                    el.addEventListener('click', () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">                        if (!el.disabled) &#123;</span></span><br><span class="line"><span class="hljs-regexp">                            el.disabled = true;</span></span><br><span class="line"><span class="hljs-regexp">                            setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">                                el.disabled = false;</span></span><br><span class="line"><span class="hljs-regexp">                            &#125;, binding.value || 1000);</span></span><br><span class="line"><span class="hljs-regexp">                        &#125;</span></span><br><span class="line"><span class="hljs-regexp">                    &#125;);</span></span><br><span class="line"><span class="hljs-regexp">                &#125;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>这里我自定义了一个名叫 onceClick 的指令，给一个 button 按钮加上这个指令之后，可以设置这个 button 按钮在点击多久之后，处于禁用状态，防止用户重复点击。</p><p>小伙伴们看，这个指令的执行逻辑其实很简单，el 相当于添加了这个指令的元素，监听该元素的点击事件，如果点击该元素时，该元素不是处于禁用状态，那么就设置该元素为禁用，给一个定时任务，到期后使该元素变为可用。这里边具体的参数，松哥下面会跟大家详细介绍。</p><p>不过这只是一个局部指令，只能在当前 .vue 文件中使用，我们也可以定义全局指令，这样就可以在所有的 .vue 文件中使用了。</p><h4 id="2-1-2-全局指令"><a href="#2-1-2-全局指令" class="headerlink" title="2.1.2 全局指令"></a>2.1.2 全局指令</h4><p>全局指令我们一般写在 main.js 中，或者写一个单独的 js 文件然后在 main.js 中引入，下面的例子是直接写在 main.js 中：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line">app.directive(<span class="hljs-string">'onceClick'</span>,&#123;</span><br><span class="line">    mounted(el, binding, vnode) &#123;</span><br><span class="line">        el.addEventListener(<span class="hljs-string">'click'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!el.disabled) &#123;</span><br><span class="line">                el.disabled = <span class="hljs-literal">true</span>;</span><br><span class="line">                setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    el.disabled = <span class="hljs-literal">false</span>;</span><br><span class="line">                &#125;, binding.value || <span class="hljs-number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样，我们就可以随时随地去使用 <code>v-onceClick</code> 这个指令了。</p><p>可能小伙伴感觉比较疑惑，自定义指令时候的 mounted 以及这里的参数都是咋回事，那么接下来松哥就来和大家详细介绍一下这些方法和参数。</p><h3 id="2-2-七个钩子函数"><a href="#2-2-七个钩子函数" class="headerlink" title="2.2 七个钩子函数"></a>2.2 七个钩子函数</h3><p>在 Vue3 中，自定义指令的钩子函数主要有如下七种（这块跟 Vue2 差异较大）：</p><ul><li>created：在绑定元素的 attribute 或事件监听器被应用之前调用。在指令需要附加在普通的 v-on 事件监听器调用前的事件监听器中时，这很有用。</li><li>beforeMount：当指令第一次绑定到元素并且在挂载父组件之前调用。</li><li>mounted：在绑定元素的父组件被挂载后调用，<strong>大部分自定义指令都写在这里</strong>。</li><li>beforeUpdate：在更新包含组件的 VNode 之前调用。</li><li>updated：在包含组件的 VNode 及其子组件的 VNode 更新后调用。</li><li>beforeUnmount：在卸载绑定元素的父组件之前调用</li><li>unmounted：当指令与元素解除绑定且父组件已卸载时，只调用一次。</li></ul><p>虽然钩子函数比较多，看着有点唬人，不过我们日常开发中用的最多的其实是 mounted 函数。</p><h3 id="2-3-四个参数"><a href="#2-3-四个参数" class="headerlink" title="2.3 四个参数"></a>2.3 四个参数</h3><p>这里七个钩子函数，钩子函数中有回调参数，回调参数有四个，含义基本上和 Vue2 一致：</p><ul><li>el：指令所绑定的元素，可以用来直接操作 DOM，我们松哥说想实现一个可以自动判断组件显示还是隐藏的指令，那么就可以通过 el 对象来操作 DOM 节点，进而实现组件的隐藏。</li><li>binding：我们通过自定义指令传递的各种参数，主要存在于这个对象中，该对象属性较多，如下属性是我们日常开发使用较多的几个：<ul><li>name：指令名，不包括 v- 前缀。</li><li>value：指令的绑定值，例如：<code>v-hasPermission=&quot;[&#39;user:delete&#39;]&quot;</code> 中，绑定值为 <code>&#39;user:delete&#39;</code>，不过需要小伙伴们注意的是，这个绑定值可以是数组也可以是普通对象，关键是看你具体绑定的是什么，在 2.1 小节的案例中，我们的 value 就是一个数字。</li><li>expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li><li>arg：传给指令的参数，可选。例如 <code>v-hasPermission:[name]=&quot;&#39;zhangsan&#39;&quot;</code> 中，参数为 “name”。</li></ul></li><li>vnode：Vue 编译生成的虚拟节点。</li><li>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><p>除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行。</p><h2 id="2-4-动态参数"><a href="#2-4-动态参数" class="headerlink" title="2.4 动态参数"></a>2.4 动态参数</h2><p>有一种动态参数，这里也和小伙伴们分享下。正常情况下，我们自定义指令时传递的参数都是通过 binding.value 来获取到的，不过在这之外还有一种方式就是通过 binding.arg 获取参数。</p><p>我举一个简单例子，假设我们上面这个 onceClick 指令，默认的时间单位时毫秒，假设现在想给时间设置单位，那么我们就可以这样写：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line">app.directive(<span class="hljs-string">'onceClick'</span>,&#123;</span><br><span class="line">    mounted(el, binding, vnode) &#123;</span><br><span class="line">        el.addEventListener(<span class="hljs-string">'click'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!el.disabled) &#123;</span><br><span class="line">                el.disabled = <span class="hljs-literal">true</span>;</span><br><span class="line">                <span class="hljs-keyword">let</span> time = binding.value;</span><br><span class="line">                <span class="hljs-keyword">if</span> (binding.arg == <span class="hljs-string">"s"</span>) &#123;</span><br><span class="line">                    time = time * <span class="hljs-number">1000</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    el.disabled = <span class="hljs-literal">false</span>;</span><br><span class="line">                &#125;, time);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在自定义指令的时候，获取到 binding.arg 的值，这样就可以知道时间单位了，在使用该指令的时候，方式如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-onceClick:</span>[<span class="hljs-attr">timeUnit</span>]=<span class="hljs-string">"10"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btnClick"</span>&gt;</span>ClickMe<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">        name: <span class="hljs-string">"MyVue01"</span>,</span></span><br><span class="line"><span class="hljs-undefined">        setup() &#123;</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-keyword">const</span> timeUnit = ref(<span class="hljs-string">'s'</span>);</span></span><br><span class="line"><span class="hljs-javascript">            <span class="hljs-keyword">return</span> &#123;timeUnit&#125;</span></span><br><span class="line"><span class="hljs-undefined">        &#125;</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>timeUnit 是一个提前定义好的变量。</p><h2 id="3-自定义权限指令"><a href="#3-自定义权限指令" class="headerlink" title="3. 自定义权限指令"></a>3. 自定义权限指令</h2><p>好啦，有了上面的基础知识，接下来就来看我们本文的主题，自定义权限指令，我写一个简单的例子大家来看下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> usersPermissions = [<span class="hljs-string">'user'</span>];</span><br><span class="line"></span><br><span class="line">app.directive(<span class="hljs-string">'hasPermission'</span>, &#123;</span><br><span class="line">    mounted(el, binding, vnode) &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> &#123;value&#125; = binding;</span><br><span class="line">        <span class="hljs-keyword">let</span> f = usersPermissions.some(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> p.indexOf(value) !== <span class="hljs-number">-1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="hljs-keyword">if</span> (!f) &#123;</span><br><span class="line">            el.parentNode &amp;&amp; el.parentNode.removeChild(el);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>usersPermissions 表示当前用户所具备的权限，正常该数据应该是从服务端加载而来，但是我这里简单起见，就直接定义好了。</p><p>具体的逻辑很简单，先从 binding 中提取出 value 的值，这就是当前控件所需要的权限，然后遍历 usersPermissions 用一个 some 函数，去查看 usersPermissions 中是否有满足条件的值，如果没有，说明当前用户不具备展示该组件所需要的权限，那么就要隐藏这个组件，隐藏的方式就是获取到当前组件的父组件，然后从父组件中移除当前组件即可。</p><p>这是一个全局的指令，定义好之后，我们就可以在组件中直接使用了：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btnClick"</span> <span class="hljs-attr">v-hasPermission</span>=<span class="hljs-string">"['user:delete']"</span>&gt;</span>删除用户<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>好啦，Vue3 自定义组件学会了没？松哥在最近的 TienChin 项目视频中也会和大家分享这块的内容，敬请期待。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;TienChin 项目前端是 Vue3，前端有这样的一个需求：有一些前端页面上的按钮要根据用户的权限来决定是否展示出来，如果用户具备相应的权限，那么就展示对应的按钮；如果用户不具备对应的权限，那么按钮就隐藏起来。大致上就这样一个需求。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue3" scheme="http://www.javaboy.org/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 整合 Swagger3 指北</title>
    <link href="http://www.javaboy.org/2022/0721/springboot-swagger3.html"/>
    <id>http://www.javaboy.org/2022/0721/springboot-swagger3.html</id>
    <published>2022-07-21T12:21:37.000Z</published>
    <updated>2022-07-21T12:25:14.595Z</updated>
    
    <content type="html"><![CDATA[<p>Swagger 好早之前就更新到 3 了，不过一直没空和小伙伴们分享下具体玩法，主要是也是因为 Swagger 虽然升级了，但是我们在 Spring Boot 中却依然可以使用老版本的 Swagger，不过好像是从 Spring Boot2.6 开始，你会发现用不了老版本的 Swagger 了，哎，反正迟早都得搞，那不如就今天吧！</p><a id="more"></a><p>今天我们就来看看，在 Spring Boot2.7.1 中如何使用 Swagger3。</p><h2 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1. 依赖"></a>1. 依赖</h2><p>首先我们创建一个 Spring Boot 项目，引入 Swagger3 依赖，如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以前在 Swagger2 的时代，这个依赖我们需要引入两个，现在就只需要这一个即可。</p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><p>接下来在启动类上添加两个注解，开启 Swagger：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@SpringBootApplication</span></span><br><span class="line"><span class="hljs-comment">//开启swagger</span></span><br><span class="line"><span class="hljs-meta">@EnableSwagger</span>2</span><br><span class="line"><span class="hljs-meta">@EnableOpenApi</span></span><br><span class="line"><span class="hljs-meta">@EnableWebMvc</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SwaggerDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，基本工作就已经完成了，此时即使我们不做任何额外的事情，Swagger 文档也已经可以自动生成了。</p><p>启动项目，浏览器输入 <code>http://localhost:8080/swagger-ui/index.html</code> 查看 Swagger 文档：</p><p><img src="evernotecid://79DF73BC-F1E1-48CC-A2CB-54B5D68418AE/appyinxiangcom/28106892/ENResource/p224" alt="6fd0ff460477f4f232c81b7d022c3fd4.png"></p><p>小伙伴们需要注意，这个默认的文档访问路径跟以前的 Swagger2 不一样哦！</p><p>现在扫描出来的接口中有一个是 BasicErrorController，这个是 Spring Boot 默认提供的异常处理器，因为我们现在没有为 Swagger 设置包扫描路径，所以就连同这个一起被扫描出来了。</p><p>好了，现在我们可以对这个网页稍微做一些定制，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swagger2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                <span class="hljs-comment">//配置网站的基本信息</span></span><br><span class="line">                .apiInfo(<span class="hljs-keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                        <span class="hljs-comment">//网站标题</span></span><br><span class="line">                        .title(<span class="hljs-string">"TienChin项目在线接口文档"</span>)</span><br><span class="line">                        <span class="hljs-comment">//标题后面的版本号</span></span><br><span class="line">                        .version(<span class="hljs-string">"v1.0"</span>)</span><br><span class="line">                        .description(<span class="hljs-string">"TienChin项目接口文档"</span>)</span><br><span class="line">                        <span class="hljs-comment">//联系人信息</span></span><br><span class="line">                        .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">"javaboy"</span>, <span class="hljs-string">"http://www.javaboy.org"</span>, <span class="hljs-string">"111@qq.com"</span>))</span><br><span class="line">                        .build())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="hljs-comment">//指定接口的位置</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">"org.javaboy.swagger_demo.controller"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段配置基本上和之前的 Swagger2 的一致，配置完成后，Swagger 页面的基本信息就会更新过来：</p><p><img src="evernotecid://79DF73BC-F1E1-48CC-A2CB-54B5D68418AE/appyinxiangcom/28106892/ENResource/p225" alt="e1db462ed0c63a9baef5f9b8e6118471.png"></p><h2 id="3-接口配置"><a href="#3-接口配置" class="headerlink" title="3. 接口配置"></a>3. 接口配置</h2><p>接下来就是一些具体的接口配置了。</p><p>这个和 Swagger2 也基本一致，而且很容易懂，下面我来分别向小伙伴们举例说明：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-meta">@Api</span>(tags = <span class="hljs-string">"用户管理相关接口"</span>)</span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/user"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/"</span>)</span><br><span class="line">    <span class="hljs-meta">@ApiOperation</span>(<span class="hljs-string">"添加用户的接口"</span>)</span><br><span class="line">    <span class="hljs-meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="hljs-meta">@ApiImplicitParam</span>(name = <span class="hljs-string">"username"</span>, value = <span class="hljs-string">"用户名"</span>, defaultValue = <span class="hljs-string">"李四"</span>),</span><br><span class="line">            <span class="hljs-meta">@ApiImplicitParam</span>(name = <span class="hljs-string">"address"</span>, value = <span class="hljs-string">"用户地址"</span>, defaultValue = <span class="hljs-string">"深圳"</span>, required = <span class="hljs-keyword">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">addUser</span><span class="hljs-params">(String username, @RequestParam(required = <span class="hljs-keyword">true</span>)</span> String address) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RespBean();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/"</span>)</span><br><span class="line">    <span class="hljs-meta">@ApiOperation</span>(<span class="hljs-string">"根据id查询用户的接口"</span>)</span><br><span class="line">    <span class="hljs-meta">@ApiImplicitParam</span>(name = <span class="hljs-string">"id"</span>, value = <span class="hljs-string">"用户id"</span>, defaultValue = <span class="hljs-string">"99"</span>, required = <span class="hljs-keyword">true</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="hljs-keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        <span class="hljs-keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@PutMapping</span>(<span class="hljs-string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="hljs-meta">@ApiOperation</span>(<span class="hljs-string">"根据id更新用户的接口"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">updateUserById</span><span class="hljs-params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里边涉及到多个 API，我来向小伙伴们分别说明：</p><ol><li>@Api 注解可以用来标记当前 Controller 的功能。</li><li>@ApiOperation 注解用来标记一个方法的作用。</li><li>@ApiImplicitParam 注解用来描述一个参数，可以配置参数的中文含义，也可以给参数设置默认值，这样在接口测试的时候可以避免手动输入。</li><li>如果有多个参数，则需要使用多个 @ApiImplicitParam 注解来描述，多个 @ApiImplicitParam 注解需要放在一个 @ApiImplicitParams 注解中。</li><li>需要注意的是，@ApiImplicitParam 注解中虽然可以指定参数是必填的，但是却不能代替 @RequestParam(required = true) ，前者的必填只是在 Swagger 框架内必填，抛弃了 Swagger ，这个限制就没用了，所以假如开发者需要指定一个参数必填， @RequestParam(required = true) 注解还是不能省略。</li><li>如果参数是一个对象（例如上文的更新接口），对于参数的描述也可以放在实体类中。例如下面一段代码：</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@ApiModel</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"用户id"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer id;</span><br><span class="line">    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"用户名"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String username;</span><br><span class="line">    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"用户地址"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String address;</span><br><span class="line">    <span class="hljs-comment">//getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，经过如上配置之后，接下来，刷新刚刚打开的页面，可以看到如下效果：</p><p><img src="http://img.itboyhub.com/2021/springboot2/17-2.png" alt></p><p>可以看到，所有的接口这里都列出来了，包括接口请求方式，接口地址以及接口的名字等，点开一个接口，可以看到如下信息：</p><p><img src="http://img.itboyhub.com/2021/springboot2/17-3.png" alt></p><p>可以看到，接口的参数，参数要求，参数默认值等等统统都展示出来了，参数类型下的 query 表示参数以 <code>key/value</code> 的形式传递，点击右上角的 Try it out，就可以进行接口测试：</p><p><img src="http://img.itboyhub.com/2021/springboot2/17-4.png" alt></p><p>点击 Execute 按钮，表示发送请求进行测试。测试结果会展示在下面的 Response 中。</p><p>小伙伴们注意，参数类型下面的 query 表示参数以 key/value 的形式传递，这里的值也可能是 body，body 表示参数以请求体的方式传递，例如上文的更新接口，如下：</p><p><img src="http://img.itboyhub.com/2021/springboot2/17-5.png" alt></p><p>当然还有一种可能就是这里的参数为 path，表示参数放在路径中传递，例如根据 id 查询用户的接口：</p><p><img src="http://img.itboyhub.com/2021/springboot2/17-6.png" alt></p><p>当然，除了这些之外，还有一些响应值的注解，都比较简单，小伙伴可以自己摸索下。</p><h2 id="4-在-Security-中的配置"><a href="#4-在-Security-中的配置" class="headerlink" title="4. 在 Security 中的配置"></a>4. 在 Security 中的配置</h2><p>如果我们的 Spring Boot 项目中集成了 Spring Security，那么如果不做额外配置，Swagger 文档可能会被拦截，此时只需要在 Spring Security 的配置类中为 Swagger 相关的文件和接口放行即可（SpringBoot2.7.1 最新写法）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class SecurityConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    WebSecurityCustomizer webSecurityCustomizer() &#123;</span><br><span class="line">        return new WebSecurityCustomizer() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void customize(WebSecurity web) &#123;</span><br><span class="line">                web.ignoring().antMatchers(&quot;/swagger-ui/**&quot;)</span><br><span class="line">                        .antMatchers(&quot;/swagger-resources/**&quot;)</span><br><span class="line">                        .antMatchers(&quot;/v3/**&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此之后，Swagger 文件就不需要认证就能访问了。不知道小伙伴们有没有看懂呢？有问题欢迎留言讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swagger 好早之前就更新到 3 了，不过一直没空和小伙伴们分享下具体玩法，主要是也是因为 Swagger 虽然升级了，但是我们在 Spring Boot 中却依然可以使用老版本的 Swagger，不过好像是从 Spring Boot2.6 开始，你会发现用不了老版本的 Swagger 了，哎，反正迟早都得搞，那不如就今天吧！&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 中如何加载动态菜单？</title>
    <link href="http://www.javaboy.org/2022/0720/vue3-dynamic-menu.html"/>
    <id>http://www.javaboy.org/2022/0720/vue3-dynamic-menu.html</id>
    <published>2022-07-20T12:21:20.000Z</published>
    <updated>2022-07-21T12:25:22.367Z</updated>
    
    <content type="html"><![CDATA[<p>松哥之前写了两篇文章和大家分享了 TienChin 项目中的菜单数据问题，还没看过的小伙伴请戳这里：</p><a id="more"></a><ul><li><a href="https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg" target="_blank" rel="noopener">Vue 里，多级菜单要如何设计才显得专业？</a></li><li><a href="https://mp.weixin.qq.com/s/bv4bqRG28hVDc31u7UXyGg" target="_blank" rel="noopener">TienChin 项目动态菜单接口分析</a></li></ul><p>这两篇文章主要是和大家说明了后端如何根据当前登录用户，动态生成一个菜单 JSON。</p><p>那么现在的问题就是，当前端收到后端返回来的菜单 JSON 之后，该如何将之渲染出来？这就是我们目前所面临的问题了。</p><p>TienChin 项目基于 RuoYi 脚手架来完成，所以本文的分析你也可以看作是对 <code>RuoYi-Vue3</code> 项目的分析。</p><h2 id="1-整体思路"><a href="#1-整体思路" class="headerlink" title="1. 整体思路"></a>1. 整体思路</h2><p>首先我们来梳理下整体上的实现思路，首先一点：<strong>整体思路和 vhr 一模一样。</strong></p><p>考虑到有的小伙伴可能已经忘记 vhr 中前端动态菜单的实现思路了，因此本文再和大家分析一下。</p><p>为了确保在所有的 <code>.vue</code> 文件中都能访问到到菜单数据，所以选择将菜单数据存入 vuex 中，vuex 是 vue 中一个存储数据的公共地方，所有的 <code>.vue</code> 文件都可以从 <code>vuex</code> 中读取到数据。存储在 <code>vuex</code> 中的数据本质上是存在内存中，所以它有一个特点，就是浏览器按 F5 刷新之后，数据就没了。所以在发生页面的跳转的时候，我们应该去区分一下，是用户点击了页面上的菜单按钮之后发生了页面跳转还是用户点击了浏览器刷新按钮（或者按了 F5）发生了跳转。</p><p>为了实现这一点，我们需要用到 vue 中的路由导航守卫功能，对于我们 Java 工程师而言，这些可能听起来有点陌生，但是你把它当作 Java 中的 Filter 来看待就好理解了，实际上我们视频中和小伙伴们讲解的时候就是这么类比的，将一个新事物跟我们脑海中一个已有的熟悉的事物进行类比，就很容易理解了。</p><p>vue 中的导航守卫就类似一个监控，它可以监控到所有的页面跳转，在页面跳转中，我们可以去判断一下 vuex 中的菜单数据是否还在，如果还在，就说明用户是点击了页面上的菜单按钮完成了跳转的，如果不在，就说明用户是点击了浏览器的刷新按钮或者是按了 F5 进行页面刷新的，此时我们就要赶紧去服务端重新加载一下菜单数据。</p><p>—xxxxxxxxxxxxxxxxxx—</p><p>整体上的实现思路就是这样，接下来我们来看看一些具体的实现细节。</p><h2 id="2-实现细节"><a href="#2-实现细节" class="headerlink" title="2. 实现细节"></a>2. 实现细节</h2><h3 id="2-1-加载细节"><a href="#2-1-加载细节" class="headerlink" title="2.1 加载细节"></a>2.1 加载细节</h3><p>首先我们来看看加载的细节。</p><p>小伙伴们知道，单页面项目的入口是 <code>main.js</code>，路由加载的内容在 src/permission.js 文件中，该文件在 main.js 中被引入，src/permission.js 中的前置导航守卫内容如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  NProgress.start()</span><br><span class="line">  <span class="hljs-keyword">if</span> (getToken()) &#123;</span><br><span class="line">    to.meta.title &amp;&amp; useSettingsStore().setTitle(to.meta.title)</span><br><span class="line">    <span class="hljs-comment">/* has token*/</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (to.path === <span class="hljs-string">'/login'</span>) &#123;</span><br><span class="line">      next(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span> &#125;)</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (useUserStore().roles.length === <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        isRelogin.show = <span class="hljs-literal">true</span></span><br><span class="line">        <span class="hljs-comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">        useUserStore().getInfo().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">          isRelogin.show = <span class="hljs-literal">false</span></span><br><span class="line">          usePermissionStore().generateRoutes().then(<span class="hljs-function"><span class="hljs-params">accessRoutes</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">            accessRoutes.forEach(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="hljs-keyword">if</span> (!isHttp(route.path)) &#123;</span><br><span class="line">                router.addRoute(route) <span class="hljs-comment">// 动态添加可访问路由表</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            next(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;) <span class="hljs-comment">// hack方法 确保addRoutes已完成</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line">          useUserStore().logOut().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">            ElMessage.error(err)</span><br><span class="line">            next(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span> &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 没有token</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (whiteList.indexOf(to.path) !== <span class="hljs-number">-1</span>) &#123;</span><br><span class="line">      <span class="hljs-comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      next(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.fullPath&#125;</span>`</span>) <span class="hljs-comment">// 否则全部重定向到登录页</span></span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我跟大家捋一下这个前置导航守卫中的思路：</p><ol><li>首先调用 getToken 方法，这个方法实际上是去 Cookie 中拿认证 Token，也就是登录成功后后端返回给前端的那个 JWT 字符串。</li><li>如果 getToken 方法有返回值，说明用户已经登录了，那么进入到 if 分支中，如果 getToken 没拿到值，说明用户未登录，未登录的话，又分为两种情况：i：访问的目标地址处于免登录白名单中，那么此时直接访问即可；ii：访问的目标地址不在白名单中，那么此时就跳转到登录页面去，跳转的时候同时携带一个 redirect 参数，这样方便在登录成功之后，再跳转回访问的目标页面。这个免登录访问的白名单，是一个在 src/permission.js 文件中定义的变量，默认有四个路径，分别是 <code>[&#39;/login&#39;, &#39;/auth-redirect&#39;, &#39;/bind&#39;, &#39;/register&#39;]</code>。</li><li>如果 getToken 拿到了值，说明用户已经登录了，此时又分情况：如果用户访问的路径是登录页面，那么就给他重定向到项目首页（也就是在已经登录的情况下，不允许用户再次访问登录页面）；如果用户访问的路径不是登录页面，那么首先判断 vuex 中的 roles 是否还有值？如果有值，说明当前就是用户点击了一个菜单按钮进行跳转的，那么直接跳转就行了；如果没有值，说明用户是按了浏览器的刷新按钮或者是 F5 按钮刷新进行的页面跳转，那么此时首先调用 getInfo 方法（位于 src/store/modules/user.js 文件中）去服务端重新加载当前用户的基本信息、角色信息以及权限信息，然后再调用 generateRoutes 方法（位于 src/store/modules/permission.js 文件中）去服务端加载路由信息，并将加载到的路由信息放入到 router 对象中（前提是这个路由对象不是一个 http 链接，就是普通的路由地址）。</li></ol><p>这就是动态路由的加载整体思路。</p><p>在第三步骤中，涉及到两个方法，一个是 getInfo 还有一个 generateRoutes，这两个方法也都比较关键，我们再来稍微看下。</p><h3 id="2-2-getInfo"><a href="#2-2-getInfo" class="headerlink" title="2.2 getInfo"></a>2.2 getInfo</h3><p>首先这个加载用户信息的方法位于 <code>src/store/modules/user.js</code> 文件中，换言之，这些用户的基本信息加载到之后，是存储在 vuex 中的，如果刷新浏览器这些数据就会丢失：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">getInfo() &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    getInfo().then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> user = res.user</span><br><span class="line">      <span class="hljs-keyword">const</span> avatar = (user.avatar == <span class="hljs-string">""</span> || user.avatar == <span class="hljs-literal">null</span>) ? defAva : <span class="hljs-keyword">import</span>.meta.env.VITE_APP_BASE_API + user.avatar;</span><br><span class="line">      <span class="hljs-keyword">if</span> (res.roles &amp;&amp; res.roles.length &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 验证返回的roles是否是一个非空数组</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.roles = res.roles</span><br><span class="line">        <span class="hljs-keyword">this</span>.permissions = res.permissions</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.roles = [<span class="hljs-string">'ROLE_DEFAULT'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">this</span>.name = user.userName</span><br><span class="line">      <span class="hljs-keyword">this</span>.avatar = avatar;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>方法的逻辑其实倒没啥好说的，结合服务端返回的 JSON 格式，应该就很好理解了（部分 JSON）：</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"permissions"</span>:[</span><br><span class="line">        <span class="hljs-string">"*:*:*"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="hljs-attr">"roles"</span>:[</span><br><span class="line">        <span class="hljs-string">"admin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="hljs-attr">"user"</span>:</span><br><span class="line">        <span class="hljs-string">"userName"</span>:<span class="hljs-string">"admin"</span>,</span><br><span class="line">        <span class="hljs-attr">"nickName"</span>:<span class="hljs-string">"TienChin健身"</span>,</span><br><span class="line">        <span class="hljs-attr">"avatar"</span>:<span class="hljs-string">""</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外再强调下，之前在 vhr 中，我们是将请求封装成了一个 api.js 文件，里边有常用的 get、post、put 以及 delete 请求等，然后在需要使用的地方，直接去调用这些方法发送请求即可，但是在 TienChin 中，脚手架的封装是将所有的请求都提前统一封装好，在需要的时候直接调用封装好的方法，连请求地址都不用传递了（封装的时候就已经写死了），所以小伙伴们看上面的 getInfo 方法只有方法调用，没有传递路径参数等。</p><h3 id="2-3-generateRoutes"><a href="#2-3-generateRoutes" class="headerlink" title="2.3 generateRoutes"></a>2.3 generateRoutes</h3><p>generateRoutes 方法则位于 src/store/modules/permission.js 文件中，这里值得说道的地方就比较多了：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">generateRoutes(roles) &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 向后端请求路由数据</span></span><br><span class="line">    getRouters().then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> sdata = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(res.data))</span><br><span class="line">      <span class="hljs-keyword">const</span> rdata = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(res.data))</span><br><span class="line">      <span class="hljs-keyword">const</span> defaultData = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(res.data))</span><br><span class="line">      <span class="hljs-keyword">const</span> sidebarRoutes = filterAsyncRouter(sdata)</span><br><span class="line">      <span class="hljs-keyword">const</span> rewriteRoutes = filterAsyncRouter(rdata, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)</span><br><span class="line">      <span class="hljs-keyword">const</span> defaultRoutes = filterAsyncRouter(defaultData)</span><br><span class="line">      <span class="hljs-keyword">const</span> asyncRoutes = filterDynamicRoutes(dynamicRoutes)</span><br><span class="line">      asyncRoutes.forEach(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123; router.addRoute(route) &#125;)</span><br><span class="line">      <span class="hljs-keyword">this</span>.setRoutes(rewriteRoutes)</span><br><span class="line">      <span class="hljs-keyword">this</span>.setSidebarRouters(constantRoutes.concat(sidebarRoutes))</span><br><span class="line">      <span class="hljs-keyword">this</span>.setDefaultRoutes(sidebarRoutes)</span><br><span class="line">      <span class="hljs-keyword">this</span>.setTopbarRoutes(defaultRoutes)</span><br><span class="line">      resolve(rewriteRoutes)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先大家看到，服务端返回的动态菜单数据解析了三次，分别拿到了三个对象，这三个对象都是将来要用的，只不过使用的场景不同，下面结合页面的显示跟大家细说。</p><ol><li>首先是调用 filterAsyncRouter 方法，这个方法的核心作用就是将服务端返回的 component 组件动态加载为一个 component 对象。不过这个方法在调用的过程中，后面还有两个参数，第二个是 lastRouter 在该方法中并无实质性作用；第三个参数则主要是说是否需要对 children 的 path 进行重写。小伙伴们知道，服务端返回的动态菜单的 path 属性都是只有一层的，例如一级菜单系统管理的 path 是 system，二级菜单用户管理的 path 则是 user，那么用户管理最终访问的 path 就是 <code>system/path</code>，如果第三个参数为 true，则会进行 path 的重写，将 path 最终设置正确。</li><li>所以这里的 sidebarRoutes 和 defaultRoutes 只是能用于菜单渲染（因为这两个里边的菜单 path 不对），而最终的页面跳转要通过 rewriteRoutes 才可以实现。</li><li>除了服务端返回的动态菜单，前端本身也定义了一些基础菜单，前端的基础菜单分为两大类，分别是 constantRoutes 和 dynamicRoutes，其中 constantRoutes 是固定菜单，也就是一些跟用户权限无关的菜单，例如 404 页面、首页等；dynamicRoutes 是动态菜单，也就是也根据用户权限来决定是否展示的菜单，例如分配用户、字典数据、调度日志等等。</li><li>filterDynamicRoutes 方法则是将前端提前定义好的 dynamicRoutes 菜单进行过滤，找出那些符合当前用户权限的菜单将之添加到路由中（这些菜单都不需要在菜单栏渲染出来）。</li><li>接下来涉及到四个不同的保存路由数据的变量，分别是 routes、addRoutes（经松哥分析，这个变量并无实际作用，可以删除之）、defaultRoutes、topbarRouters 以及 sidebarRouters，四个路由变量的作用各有不同：</li></ol><p><strong>routes：</strong></p><p>routes 中保存的是 constantRoutes 以及服务端返回的动态路由数据，并且这个动态路由数据中的 path 已经完成了重写，所以这个 routes 主要用在两个地方：</p><ul><li>首页的搜索上：首页的搜索也可以按照路径去搜索，所以需要用到这个 routes，如下图：</li></ul><p><img src="http://img.itboyhub.com/2021/10/tran/20220709221523.png" alt></p><ul><li>用在 TagsView，这个地方也需要根据页面渲染不同的菜单，也是用的 routes：</li></ul><p><img src="http://img.itboyhub.com/2021/10/tran/20220709221839.png" alt></p><p><strong>sidebarRouters：</strong></p><p>这个就是大家所熟知的侧边栏菜单了，具体展示是 constantRoutes+服务端返回的菜单，不过这些 constantRoutes 基本上 hidden 属性都是 false，渲染的时候是不会被渲染出来的。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220709222506.png" alt></p><p><strong>topbarRouters：</strong></p><p>这个是用在 TopNav 组件中，这个是将系统的一级菜单在头部显示出来的，如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220709223027.png" alt></p><p>一级菜单在顶部显示，左边显示的都是二级三级菜单，那么顶部菜单的渲染，用的就是这个 topbarRouters。</p><p><strong>defaultRoutes：</strong></p><p>想要开启顶部菜单，需要在 src/layout/components/Settings/index.vue 组件中设置，如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220709223235.png" alt></p><p>开启顶部菜单之后，点击顶部菜单，左边菜单栏会跟着切换，此时就是从 defaultRoutes 中遍历出相关的菜单设置给 sidebarRouters。</p><p>好了，这就是这四个 routes 变量的作用，老实说，脚手架中这块的代码设计有点混乱，没必要搞这么多变量，等松哥抽空给大家优化下。</p><p>generateRoutes 方法最终会返回 rewriteRoutes 变量到前面说的那个前置导航守卫中，最终前置导航守卫将数据添加到 router 中。</p><p>菜单的渲染都是在 src/layout/components/Sidebar/index.vue 中完成的，看了下都是常规操作，没啥好说的。</p><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><p>好啦，这就是 RuoYi-Vue3 中的动态菜单渲染逻辑，不知道小伙伴们看明白没有？视频即将奉上，对视频感兴趣的小伙伴请戳这里：<a href="https://mp.weixin.qq.com/s/Qzj-tCYBB6QsviqF9H56rg" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;松哥之前写了两篇文章和大家分享了 TienChin 项目中的菜单数据问题，还没看过的小伙伴请戳这里：&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue3" scheme="http://www.javaboy.org/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>一个 Java 猿眼中 Vue3 和 Vue2 的差异</title>
    <link href="http://www.javaboy.org/2022/0718/vue3-vs-vue2.html"/>
    <id>http://www.javaboy.org/2022/0718/vue3-vs-vue2.html</id>
    <published>2022-07-18T15:22:10.000Z</published>
    <updated>2022-07-19T15:48:45.392Z</updated>
    
    <content type="html"><![CDATA[<p>随着 TienChin 项目视频的录制，松哥终于也要静下心来，认真捋一捋 Vue3 中的各种新特性了，然后再和小伙伴们进行分享，其实 Vue3 中还是带来了很多新鲜的玩意，今天我们就不卷 Java 了，来卷卷前端。</p><a id="more"></a><p>以下内容是一个 Java 猿对 Vue3 的理解，主要是应用层面上，如果有专业的前端小伙伴，请轻拍。</p><h2 id="1-script-写法"><a href="#1-script-写法" class="headerlink" title="1. script 写法"></a>1. script 写法</h2><p>进入到 Vue3 时代，最明显的感受就是在一个 .vue 文件中，script 标签的写法大变样了。以前在 Vue2 中，我们都是这样写的：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"SysHr"</span>,</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">                <span class="hljs-comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            <span class="hljs-comment">//</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            deleteHr(hr) &#123;</span><br><span class="line">                <span class="hljs-comment">//</span></span><br><span class="line">            &#125;,</span><br><span class="line">            doSearch() &#123;</span><br><span class="line">                <span class="hljs-comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>不过到了 Vue3 里边，这个写法变了，变成下面这样了：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;result&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;button @click=<span class="hljs-string">"btnClick"</span>&gt;clickMe&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    import &#123;ref&#125; from 'vue';</span></span><br><span class="line"><span class="hljs-regexp">    import &#123;onMounted,computed&#125; from 'vue'</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    export default &#123;</span></span><br><span class="line"><span class="hljs-regexp">        name: "MyVue01",</span></span><br><span class="line"><span class="hljs-regexp">        setup() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            const a = ref(1);</span></span><br><span class="line"><span class="hljs-regexp">            const btnClick=()=&gt;&#123;</span></span><br><span class="line"><span class="hljs-regexp">                a.value++;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            onMounted(() =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">                a.value++;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            const result = computed(()=&gt;&#123;</span></span><br><span class="line"><span class="hljs-regexp">                return Date.now();</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            return &#123;a,btnClick,result&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>先从大的方面来看，细节实现咱们后面再细聊。</p><p>大的方面，就是在这个 export default 中，以后就只有两个元素了，name 和 setup，我们以前的各种方法定义、生命周期函数、计算属性等等，都写在 setup 中，并且需要在 setup 中返回，setup 中返回了什么，上面的 template 中就能用什么。</p><p>这种写法稍微有点费事，所以还有一种简化的写法，像下面这样：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;result&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;button @click=<span class="hljs-string">"btnClick"</span>&gt;clickMe&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">&lt;script setup&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    import &#123;ref&#125; from 'vue';</span></span><br><span class="line"><span class="hljs-regexp">    import &#123;onMounted, computed&#125; from 'vue'</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    const a = ref(1);</span></span><br><span class="line"><span class="hljs-regexp">    const btnClick = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">        a.value++;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    onMounted(() =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">        a.value++;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;);</span></span><br><span class="line"><span class="hljs-regexp">    const result = computed(() =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">        return Date.now();</span></span><br><span class="line"><span class="hljs-regexp">    &#125;);</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>这种写法就是直接在 script 标签中加入 setup，然后在 script 标签中该怎么定义就怎么定义，也不用 return 了。这个场景，又有点 jQuery 的感觉了。</p><p>上面这个实现里有几个细节，我们再来详细说说。</p><h2 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2. 生命周期"></a>2. 生命周期</h2><p>首先就是生命周期函数的写法。</p><p>以前 Vue2 里的写法有一个专业名词叫做 options API，现在在 Vue3 里也有一个专业名词叫做 composition API。在 Vue3 中，这些对应的生命周期函数都要先从 vue 中导出，然后调用并传入一个回调函数，像我们上一小节那样写。</p><p>下图这张表格展示了 options API 和 composition API 的一一对应关系：</p><table><thead><tr><th style="text-align:left">options API</th><th style="text-align:left">composition API</th></tr></thead><tbody><tr><td style="text-align:left">beforeCreate</td><td style="text-align:left">Not Needed</td></tr><tr><td style="text-align:left">created</td><td style="text-align:left">Not Needed</td></tr><tr><td style="text-align:left">mounted</td><td style="text-align:left">onMounted</td></tr><tr><td style="text-align:left">beforeUpdate</td><td style="text-align:left">onBeforeUpdate</td></tr><tr><td style="text-align:left">updated</td><td style="text-align:left">onUpdated</td></tr><tr><td style="text-align:left">beforeUnmount</td><td style="text-align:left">onBeforeUnmount</td></tr><tr><td style="text-align:left">unmounted</td><td style="text-align:left">onUnmounted</td></tr><tr><td style="text-align:left">errorCaptured</td><td style="text-align:left">onErrorCaptured</td></tr><tr><td style="text-align:left">renderTracked</td><td style="text-align:left">onRenderTracked</td></tr><tr><td style="text-align:left">renderTriggered</td><td style="text-align:left">onRenderTriggered</td></tr><tr><td style="text-align:left">activated</td><td style="text-align:left">onActivated</td></tr><tr><td style="text-align:left">deactivated</td><td style="text-align:left">onDeactivated</td></tr></tbody></table><p>想用哪个生命周期函数，就从 vue 中导出这个函数，然后传入回一个回调就可以使用了。例如第一小节中松哥给大家举的 onMounted 的用法。</p><h2 id="3-计算属性"><a href="#3-计算属性" class="headerlink" title="3. 计算属性"></a>3. 计算属性</h2><p>除了生命周期函数，计算属性、watch 监听等等，用法也和生命周期函数类似，需要先从 vue 中导出，导出之后，也是传入一个回调函数就可以使用了。上文有例子，我就不再啰嗦了。</p><p>像 watch 的监控，写法如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;</span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;onMounted,computed,watch&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"MyVue01"</span>,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="hljs-keyword">const</span> a = ref(<span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">const</span> btnClick=<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">                a.value++;</span><br><span class="line">            &#125;</span><br><span class="line">            onMounted(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">                a.value++;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-keyword">const</span> result = computed(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Date</span>.now();</span><br><span class="line">            &#125;);</span><br><span class="line">            watch(a,(value,oldValue)=&gt;&#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"value"</span>, value);</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"oldValue"</span>, oldValue);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;a,btnClick,result&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>导入 watch 之后，然后直接使用即可。</p><h2 id="4-ref-于-reactive"><a href="#4-ref-于-reactive" class="headerlink" title="4. ref 于 reactive"></a>4. ref 于 reactive</h2><p>上面的例子中还有一个 ref，这个玩意也需要跟大家介绍下。</p><p>在 Vue2 里边，如果我们想要定义响应式数据，一般都是写在 data 函数中的，类似下面这样：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"SysHr"</span>,</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">                keywords: <span class="hljs-string">''</span>,</span><br><span class="line">                hrs: [],</span><br><span class="line">                selectedRoles: [],</span><br><span class="line">                allroles: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>但是在 Vue3 里边，你已经看不到 data 函数了，那怎么定义响应式数据呢？就是通过 ref 或者 reactive 来定义了。</p><p>在第一小节中，我们就是通过 ref 定义了一个名为 a 的响应式变量。</p><p>这个 a 在 script 中写的时候，有一个 value 属性，不过在 HTML 中引用的时候，是没有 value 的，可千万别写成了 <code></code>，我们再来回顾下上文的案例：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"MyVue04"</span>,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="hljs-keyword">const</span> a = ref(<span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">const</span> btnClick=<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">                a.value++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;a,btnClick&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>现在就是通过这样的方式来定义响应式对象，修改值的时候，需要用 <code>a.value</code>，但是真正的上面的 template 节点中访问的时候是不需要 value 的（注意，函数也得返回后才能在页面中使用）。</p><p><strong>和 Vue2 相比，这种写法有一个很大的好处就是在方法中引用的时候不用再写 this 了。</strong></p><p>ref 一般用来定义原始数据类型，像 String、Number、BigInt、Boolean、Symbol、Null、Undefined 这些。</p><p>如果你想定义对象，那么可以使用 reactive 来定义，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;book.name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;book.author&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;ref, reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"MyVue04"</span>,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="hljs-keyword">const</span> a = ref(<span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">const</span> book = reactive(&#123;</span><br><span class="line">                name: <span class="hljs-string">"三国演义"</span>,</span><br><span class="line">                author: <span class="hljs-string">"罗贯中"</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-keyword">const</span> btnClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">                a.value++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;a, btnClick,book&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>这里定义了 book 对象，book 对象中包含了 name 和 author 两个属性。</p><p>有的时候，你可能批量把数据定义好了，但是在访问的时候却希望直接访问，那么我们可以使用数据展开，像下面这样：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;author&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;ref, reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"MyVue04"</span>,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="hljs-keyword">const</span> a = ref(<span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">const</span> book = reactive(&#123;</span><br><span class="line">                name: <span class="hljs-string">"三国演义"</span>,</span><br><span class="line">                author: <span class="hljs-string">"罗贯中"</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-keyword">const</span> btnClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">                a.value++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;a, btnClick,...book&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>这样，在上面访问的时候，就可以直接访问 name 和 author 两个属性了，就不用添加 book 前缀了。</p><p>不过！！！</p><p>这种写法其实有一个小坑。</p><p>比如我再添加一个按钮，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;author&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;button @click=<span class="hljs-string">"updateBook"</span>&gt;更新图书信息&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    import &#123;ref, reactive&#125; from 'vue';</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    export default &#123;</span></span><br><span class="line"><span class="hljs-regexp">        name: "MyVue04",</span></span><br><span class="line"><span class="hljs-regexp">        setup() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            const a = ref(1);</span></span><br><span class="line"><span class="hljs-regexp">            const book = reactive(&#123;</span></span><br><span class="line"><span class="hljs-regexp">                name: "三国演义",</span></span><br><span class="line"><span class="hljs-regexp">                author: "罗贯中"</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            const btnClick = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">                a.value++;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            const updateBook=()=&gt;&#123;</span></span><br><span class="line"><span class="hljs-regexp">                book.name = '123';</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            return &#123;a, btnClick,...book,updateBook&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>这个时候点击更新按钮，你会发现没反应！因为用了数据展开之后，响应式就失效了。所以，对于这种展开的数据，应该再用 toRefs 来处理下，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;author&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;button @click=<span class="hljs-string">"updateBook"</span>&gt;更新图书信息&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    import &#123;ref, reactive, toRefs&#125; from 'vue';</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    export default &#123;</span></span><br><span class="line"><span class="hljs-regexp">        name: "MyVue04",</span></span><br><span class="line"><span class="hljs-regexp">        setup() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            const a = ref(1);</span></span><br><span class="line"><span class="hljs-regexp">            const book = reactive(&#123;</span></span><br><span class="line"><span class="hljs-regexp">                name: "三国演义",</span></span><br><span class="line"><span class="hljs-regexp">                author: "罗贯中"</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            const btnClick = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">                a.value++;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            const updateBook = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">                book.name = '123';</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            return &#123;a, btnClick, ...toRefs(book),updateBook&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>当然，如果你将 setup 直接写在了 script 标签中，那么可以直接按照如下方式来展开数据：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;author&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;button @click=<span class="hljs-string">"updateBook"</span>&gt;更新图书信息&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">&lt;script setup&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    import &#123;ref, reactive, toRefs&#125; from 'vue';</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    const a = ref(1);</span></span><br><span class="line"><span class="hljs-regexp">    const book = reactive(&#123;</span></span><br><span class="line"><span class="hljs-regexp">        name: "三国演义",</span></span><br><span class="line"><span class="hljs-regexp">        author: "罗贯中"</span></span><br><span class="line"><span class="hljs-regexp">    &#125;);</span></span><br><span class="line"><span class="hljs-regexp">    const btnClick = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">        a.value++;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    const updateBook = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">        book.name = '123';</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    const &#123;name, author&#125; = toRefs(book);</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>好啦，今天就和小伙伴们分享了 Vue3 中几个新鲜的玩法～作为我们 TienChin 项目的基础（Vue 基本用法在 vhr 中都已经讲过了，所以这里就不再赘述了），当然，Vue3 和 Vue2 还有其他一些差异，这些我们都将在 TienChin 项目视频中和小伙伴们再仔细分享。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着 TienChin 项目视频的录制，松哥终于也要静下心来，认真捋一捋 Vue3 中的各种新特性了，然后再和小伙伴们进行分享，其实 Vue3 中还是带来了很多新鲜的玩意，今天我们就不卷 Java 了，来卷卷前端。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>如何随意切换 NodeJs 版本？</title>
    <link href="http://www.javaboy.org/2022/0715/nodejs-nvm.html"/>
    <id>http://www.javaboy.org/2022/0715/nodejs-nvm.html</id>
    <published>2022-07-15T15:21:59.000Z</published>
    <updated>2022-07-19T15:48:42.146Z</updated>
    
    <content type="html"><![CDATA[<p>小伙伴们知道松哥最近在录<a href>TienChin</a>项目的视频，其中前端用的是 Vue3，这个用的是 RuoYi-Vue3，这个脚手架里边前端用的 yarn，并且还使用了一些插件，导致 Node 版本必须要 &gt;=14。</p><a id="more"></a><p>正准备更新我的 Node 的时候，忽然想起来我电脑上还有我的个人网站 <code>www.javaboy.org</code>，这个网站我是用 <code>Hexo</code> 在 2019 年构建的，当时用的 <code>Hexo</code> 的版本也比较老，如果使用高版本的 <code>NodeJS</code> 会导致我的 <code>Hexo</code> 运行有问题（这个坑之前踩过一次了），如果重新安装最新版的 <code>Hexo</code> 估计就没啥问题了，但是我的那个个人网站我做了很多定制，不仅仅是修改 <code>Hexo</code> 的配置，甚至还自己上手改了不少代码，所以要是重新安装 <code>Hexo</code> 也费事，要改好多东西，太折腾了。</p><p>思来想去，要是能在电脑上安装多个不同的 NodeJS 版本就好了，并且这个安装还得方便不能太折腾（否则我还不如去折腾我的 Hexo），那么不妨看看 NVM。</p><p>作为 Java 工程师，我觉得这个 NVM 还挺方便的，不过在专业的前端工程师看了，可能会觉得有点幼稚了哈哈。</p><h2 id="1-NVM"><a href="#1-NVM" class="headerlink" title="1. NVM"></a>1. NVM</h2><p>NVM 是 Mac 下的 node 管理工具，当我第一次看到这个工具的时候，就想到了 Ruby 中的 rvm（之前在《Spring Boot+Vue 全栈开发实战》一书中，为了教大家搭建 Redis 集群，不得不教大家用 rvm 安装 Ruby）。</p><p>如果需要管理 Windows 下的 node，官方推荐使用 <code>nvmw</code> 或 <code>nvm-windows</code>，不过，<code>nvm-windows</code> 并不是 nvm 的简单移植，他们也没有任何关系。</p><p>大部分情况下，Windows 下的 nvm 和 mac 里的 nvm 使用都没有大的差异，基本上是一致的，会有个别命令不太相同，这个下文中我会和大家梳理。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>安装之前记得先把自己之前安装的 NodeJS 删除掉，否则可能会起冲突。</p><p>Windows 上好说，控制面板找到对应的文件直接卸载即可，Mac 上则执行如下命令删除：</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo npm uninstall npm -g</span><br><span class="line"></span><br><span class="line">sudo rm -rf /usr/<span class="hljs-built_in">local</span>/lib/node /usr/<span class="hljs-built_in">local</span>/lib/node_modules /var/db/receipts/org.nodejs.*</span><br><span class="line"></span><br><span class="line">sudo rm -rf /usr/<span class="hljs-built_in">local</span>/include/node /Users/<span class="hljs-variable">$USER</span>/.npm</span><br><span class="line"></span><br><span class="line">sudo rm /usr/<span class="hljs-built_in">local</span>/bin/node</span><br><span class="line"></span><br><span class="line">sudo rm /usr/<span class="hljs-built_in">local</span>/share/man/man1/node.1</span><br><span class="line"></span><br><span class="line">sudo rm /usr/<span class="hljs-built_in">local</span>/lib/dtrace/node.d</span><br></pre></td></tr></table></figure><p>一顿操作下来，然后执行如下命令，如果找不到对应的命令，那就表示删除成功了：</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">// -bash: /usr/<span class="hljs-built_in">local</span>/bin/node: No such file or directory</span><br><span class="line"></span><br><span class="line">npm -v</span><br><span class="line">// -bash: /usr/<span class="hljs-built_in">local</span>/bin/npm: No such file or directory</span><br></pre></td></tr></table></figure><p>Windows 上有一个 exe 文件，直接双击安装就行了，这个没啥好说的。</p><p>Mac 或者 Linux 上我们则直接可以在线安装，非常方便：</p><p>可以使用 curl 命令安装：</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><p>也可以使用 wget 命令安装：</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><p>执行完成后，通过 <code>nvm -v</code> 命令可以查看是否安装成功：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220705234001.png" alt></p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><p>使用命令也是比较容易的。给小伙伴们列举一个常见的命令：</p><p>指定当前 Node 版本：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nvm use 16</span><br><span class="line">Now using node v16.9.1 (npm v7.21.1)</span><br><span class="line">$ node -v</span><br><span class="line">v16.9.1</span><br><span class="line">$ nvm use 14</span><br><span class="line">Now using node v14.18.0 (npm v6.14.15)</span><br><span class="line">$ node -v</span><br><span class="line">v14.18.0</span><br></pre></td></tr></table></figure><p>安装一个 Node 版本：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install 12</span><br><span class="line">Now using node v12.22.6 (npm v6.14.5)</span><br><span class="line">$ node -v</span><br><span class="line">v12.22.6</span><br></pre></td></tr></table></figure><p>查看目前已安装的 Node 版本：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><p>查看有哪些可用的 Node 版本：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Mac</span><br><span class="line">nvm ls-remote</span><br><span class="line"># Windows</span><br><span class="line">nvm list available</span><br></pre></td></tr></table></figure><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>好啦，如果小伙伴们也有要使用不同 Node 版本的烦恼，那么不妨试试这个～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小伙伴们知道松哥最近在录&lt;a href&gt;TienChin&lt;/a&gt;项目的视频，其中前端用的是 Vue3，这个用的是 RuoYi-Vue3，这个脚手架里边前端用的 yarn，并且还使用了一些插件，导致 Node 版本必须要 &amp;gt;=14。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot+Vue3 动态菜单实现思路梳理</title>
    <link href="http://www.javaboy.org/2022/0714/vue3-dynamic-menu.html"/>
    <id>http://www.javaboy.org/2022/0714/vue3-dynamic-menu.html</id>
    <published>2022-07-14T15:21:48.000Z</published>
    <updated>2022-07-19T15:48:38.504Z</updated>
    
    <content type="html"><![CDATA[<p>关于 Spring Boot + Vue3 的动态菜单，松哥之前已经写了两篇文章了，这两篇文章主要是从代码上和大家分析动态菜单最终的实现方式，但是还是有小伙伴觉得没太看明白，感觉缺乏一个提纲挈领的思路，所以，今天松哥再整一篇文章和大家再来捋一捋这个问题，希望这篇文章能让小伙伴们彻底搞清楚这个问题。</p><a id="more"></a><h2 id="1-整体思路"><a href="#1-整体思路" class="headerlink" title="1. 整体思路"></a>1. 整体思路</h2><p>首先我们来看整体思路。</p><p>光说思路大家还是云里雾里，我们结合具体的效果图来看：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220712230354.png" alt></p><p>最终菜单显示效果类似上图，我把这里的菜单分为了四类：</p><ol><li>有父有子：像系统管理那种，既有父菜单，又有子菜单。</li><li>只有一个一级菜单，这种又细分为三种情况：<ol><li>普通的菜单，点击之后在右边主页面打开某个功能页面。</li><li>一个超链接，但不是外链，是一个在当前系统中打开的外部网页，点击之后，会在右边的主页面中新开一个选项卡，这个选项卡中显示的是一个外部网页（本质上是通过 iframe 标签引入的一个外部网页）。</li><li>一个超链接，并且还是一个外链，点击之后，直接在浏览器中打开一个新的选项卡，新的选项卡中展示一个外部链接。</li></ol></li></ol><p>整体上来说，就分为这四种情况。其中 1、2.1、2.3 应该都好理解，2.2 有的小伙伴可能不清楚，我给大家截个图看下就知道了：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220627235423.png" alt></p><p>四种菜单对应的 JSON 格式分别如下：</p><ol><li>有父有子：</li></ol><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"/monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"redirect"</span>: <span class="hljs-string">"noRedirect"</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line"><span class="hljs-attr">"alwaysShow"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"系统监控"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="hljs-attr">"children"</span>: [&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Online"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"online"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"monitor/online/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"在线用户"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"online"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Job"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"job"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"monitor/job/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"定时任务"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"job"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>只有一个一级菜单，且一级菜单点击后是一个功能页面：</li></ol><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"/"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line"><span class="hljs-attr">"children"</span>: [&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Role"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"role"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"system/role/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"角色管理"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"peoples"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>只有一个一级菜单，且一级菜单点击之后在当前系统中一个新的选项卡里打开一个网页：</li></ol><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/"</span>,</span><br><span class="line">    <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line">    <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">        <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">        <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-attr">"children"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Www.javaboy.org"</span>,</span><br><span class="line">            <span class="hljs-attr">"path"</span>: <span class="hljs-string">"www.javaboy.org"</span>,</span><br><span class="line">            <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">            <span class="hljs-attr">"component"</span>: <span class="hljs-string">"InnerLink"</span>,</span><br><span class="line">            <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">                <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">                <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">                <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">                <span class="hljs-attr">"link"</span>: <span class="hljs-string">"http://www.javaboy.org"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>只有一个一级菜单，且一级菜单点击之后在浏览器打开一个新的选项卡：</li></ol><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"path"</span>: <span class="hljs-string">"http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line">    <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">        <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">        <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-attr">"link"</span>: <span class="hljs-string">"http://www.javaboy.org"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据以上四种不同的 JSON，我们总结出以下规律：</p><ol><li>父组件都是 Layout，这里的 Layout 就相当于我们 vhr 中的 Home 组件，也就是整个页面的框架。</li><li>如果想在当前系统中，新开选项卡打开一个功能项，那么这个菜单项必然有 children，即使 children 中只有一项菜单。</li><li>如果菜单项是一个外链，那么这个菜单项就不需要有 children 了。</li><li>某种程度上，我们其实可以将 2、3 归为一类，毕竟 3 只是展示内容的组件固定为 InnerLink，2 则视情况而定。</li><li>整体上，可以点击的菜单的 path 都是父菜单的 path + 子菜单的 path，如果菜单项有父有子，那就正常拼接就行了；如果只有一个子菜单，那么父菜单的 path 就是 /；如果是一个外链，那就只有父菜单的 path 了。</li></ol><p>好了，这就是动态菜单的整体设计。</p><h2 id="2-前端渲染"><a href="#2-前端渲染" class="headerlink" title="2. 前端渲染"></a>2. 前端渲染</h2><p>接下来我们再来看一看前端的菜单渲染，前端的动态菜单渲染位于 <code>tienchin-ui/src/layout/components/Sidebar/SidebarItem.vue</code> 文件中：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"!item.hidden"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"hasOneShowingChild(item.children, item) &amp;&amp; (!onlyOneChild.children || onlyOneChild.noShowingChildren) &amp;&amp; !item.alwaysShow"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">app-link</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"onlyOneChild.meta"</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">"resolvePath(onlyOneChild.path, onlyOneChild.query)"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"resolvePath(onlyOneChild.path)"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"&#123; 'submenu-title-noDropdown': !isNest &#125;"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">:icon-class</span>=<span class="hljs-string">"onlyOneChild.meta.icon || (item.meta &amp;&amp; item.meta.icon)"</span>/&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"menu-title"</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"hasTitle(onlyOneChild.meta.title)"</span>&gt;</span>&#123;&#123; onlyOneChild.meta.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">app-link</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">el-sub-menu</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"subMenu"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"resolvePath(item.path)"</span> <span class="hljs-attr">popper-append-to-body</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"item.meta"</span> #<span class="hljs-attr">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">:icon-class</span>=<span class="hljs-string">"item.meta &amp;&amp; item.meta.icon"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"menu-title"</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"hasTitle(item.meta.title)"</span>&gt;</span>&#123;&#123; item.meta.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">sidebar-item</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">"child in item.children"</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">:key</span>=<span class="hljs-string">"child.path"</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">:is-nest</span>=<span class="hljs-string">"true"</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">:item</span>=<span class="hljs-string">"child"</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">:base-path</span>=<span class="hljs-string">"resolvePath(child.path)"</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">"nest-menu"</span></span></span><br><span class="line"><span class="hljs-tag">      /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-sub-menu</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里涉及到几个方法，具体的方法细节我就不贴出来了，主要和大家说下实现思路。</p><ol><li>先看整体上，这个菜单要是非隐藏的，隐藏的菜单，那么直接一级菜单及其下的子菜单就都不渲染了。</li><li>渲染整体上分两块，上面的 template 主要是渲染只有一个子菜单的情况，也就是第一小节的 2、3、4 三种情况，下面的渲染正常的有父有子的情况，也就是第一小节的菜单 1。</li><li>hasOneShowingChild 主要是判断这个菜单项是否只有一个需要渲染的子菜单，如果有多个子菜单，但是大部分都是隐藏，只有一个需要渲染出来，那也算只有一个子菜单，如果一个菜单项都没有子菜单，那也算一个子菜单，只不过这个子菜单就是他自身，对应第一小节第 4 种情况。在判断的过程中，将唯一需要渲染的菜单的数据赋值给 onlyOneChild 变量，那么最终，如果当前菜单项只有一个子菜单，且这个子菜单没有子菜单（或者有子菜单但是子菜单不用显示），并且当前菜单也不是必须要渲染的，那就将 onlyOneChild 的数据渲染出来。</li><li>对于普通的有父有子的情况，渲染的时候，通过 el-sub-menu 标签进行渲染，但是注意子项是 sidebar-item，sidebar-item 其实就是当前项！换言之，这里的渲染其实还用到了递归（直到没有 children 的时候结束），这样即便菜单有三级四级五级等等，只要不嫌难看，都是可以渲染出来的。</li></ol><h2 id="3-后端菜单生成"><a href="#3-后端菜单生成" class="headerlink" title="3. 后端菜单生成"></a>3. 后端菜单生成</h2><h3 id="3-1-菜单表"><a href="#3-1-菜单表" class="headerlink" title="3.1 菜单表"></a>3.1 菜单表</h3><p>首先我们来看看菜单表的定义，也就是 <code>sys_menu</code>。</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`sys_menu`</span> (</span><br><span class="line">  <span class="hljs-string">`menu_id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单ID'</span>,</span><br><span class="line">  <span class="hljs-string">`menu_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单名称'</span>,</span><br><span class="line">  <span class="hljs-string">`parent_id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'父菜单ID'</span>,</span><br><span class="line">  <span class="hljs-string">`order_num`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'显示顺序'</span>,</span><br><span class="line">  <span class="hljs-string">`path`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'路由地址'</span>,</span><br><span class="line">  <span class="hljs-string">`component`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'组件路径'</span>,</span><br><span class="line">  <span class="hljs-string">`query`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'路由参数'</span>,</span><br><span class="line">  <span class="hljs-string">`is_frame`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'1'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否为外链（0是 1否）'</span>,</span><br><span class="line">  <span class="hljs-string">`is_cache`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否缓存（0缓存 1不缓存）'</span>,</span><br><span class="line">  <span class="hljs-string">`menu_type`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单类型（M目录 C菜单 F按钮）'</span>,</span><br><span class="line">  <span class="hljs-string">`visible`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单状态（0显示 1隐藏）'</span>,</span><br><span class="line">  <span class="hljs-string">`status`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单状态（0正常 1停用）'</span>,</span><br><span class="line">  <span class="hljs-string">`perms`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'权限标识'</span>,</span><br><span class="line">  <span class="hljs-string">`icon`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'#'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单图标'</span>,</span><br><span class="line">  <span class="hljs-string">`create_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建者'</span>,</span><br><span class="line">  <span class="hljs-string">`create_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建时间'</span>,</span><br><span class="line">  <span class="hljs-string">`update_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新者'</span>,</span><br><span class="line">  <span class="hljs-string">`update_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新时间'</span>,</span><br><span class="line">  <span class="hljs-string">`remark`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'备注'</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`menu_id`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">3054</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci <span class="hljs-keyword">COMMENT</span>=<span class="hljs-string">'菜单权限表'</span>;</span><br></pre></td></tr></table></figure><p>其实这里很多字段都和我们 vhr 项目项目很相似，我也就不重复啰嗦了，我这里主要和小伙伴们说一个字段，那就是 <code>menu_type</code>。</p><p><code>menu_type</code> 表示一个菜单字段的类型，一个菜单有三种类型，分别是目录（M）、菜单（C）以及按钮（F）。这里所说的目录，相当于我们在 vhr 中所说的一级菜单，菜单相当于我们在 vhr 中所说的二级菜单。</p><p>当用户从前端登录成功后，要去动态加载的菜单的时候，就查询 M 和 C 类型的数据即可，F 类型的数据不是菜单项，查询的时候直接过滤掉即可，通过 <code>menu_type</code> 这个字段可以轻松的过滤掉 F 类型的数据。小伙伴们想想，F 类型的数据过滤掉之后，剩下的数据不就是一级菜单和二级菜单了，那不就和 vhr 又一样了么！</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220626194444.png" alt></p><p>在 vhr 中，考虑到菜单就是只有两级：一级菜单和二级菜单，一级菜单是目录，二级菜单是则是具体的菜单项，没有三级菜单！所以在 vhr 中，查询菜单的时候我直接用了一个一对多的查询，将一级菜单做一的一方，二级菜单做多的一方，这样比较省事。当然灵活度差一点，所以在 TienChin 项目中，这块还是用上了递归。</p><h3 id="3-2-菜单接口"><a href="#3-2-菜单接口" class="headerlink" title="3.2 菜单接口"></a>3.2 菜单接口</h3><p>当用户登录成功之后，会自动请求 <code>/getRouters</code> 接口来获取菜单信息，我们一起来看下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取路由信息</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由信息</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"getRouters"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">getRouters</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    Long userId = SecurityUtils.getUserId();</span><br><span class="line">    List&lt;SysMenu&gt; menus = menuService.selectMenuTreeByUserId(userId);</span><br><span class="line">    <span class="hljs-keyword">return</span> AjaxResult.success(menuService.buildMenus(menus));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的查询实际上分为两个步骤：</p><ol><li>根据用户 id 查询到所有的菜单信息，这一步的查询实际上是比较容易的，就单纯的多张表联合在一起，然后过滤出和当前用户相关并且菜单类型为 M 或者 C 的菜单（类型为 F 的表示按钮，就不要了），查询到菜单信息之后，然后进行一个递归操作，将菜单数据的层级排列出来。</li><li><code>menuService.buildMenus</code> 这一步则是将菜单数据专为前端所需要的路由数据。</li></ol><p>一共就这两个步骤，我们来逐一进行分析。</p><p>先来看查询菜单数据。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 根据用户ID查询菜单</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId 用户名称</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 菜单列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SysMenu&gt; <span class="hljs-title">selectMenuTreeByUserId</span><span class="hljs-params">(Long userId)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; menus = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (SecurityUtils.isAdmin(userId)) &#123;</span><br><span class="line">        menus = menuMapper.selectMenuTreeAll();</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        menus = menuMapper.selectMenuTreeByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> getChildPerms(menus, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 根据父节点的ID获取所有子节点</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list     分类表</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parentId 传入的父节点ID</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> String</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SysMenu&gt; <span class="hljs-title">getChildPerms</span><span class="hljs-params">(List&lt;SysMenu&gt; list, <span class="hljs-keyword">int</span> parentId)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; returnList = <span class="hljs-keyword">new</span> ArrayList&lt;SysMenu&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (Iterator&lt;SysMenu&gt; iterator = list.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">        SysMenu t = (SysMenu) iterator.next();</span><br><span class="line">        <span class="hljs-comment">// 一、根据传入的某个父节点ID,遍历该父节点的所有子节点</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (t.getParentId() == parentId) &#123;</span><br><span class="line">            recursionFn(list, t);</span><br><span class="line">            returnList.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> returnList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 递归列表</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> t</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">recursionFn</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 得到子节点列表</span></span><br><span class="line">    List&lt;SysMenu&gt; childList = getChildList(list, t);</span><br><span class="line">    t.setChildren(childList);</span><br><span class="line">    <span class="hljs-keyword">for</span> (SysMenu tChild : childList) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (hasChild(list, tChild)) &#123;</span><br><span class="line">            recursionFn(list, tChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 得到子节点列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SysMenu&gt; <span class="hljs-title">getChildList</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; tlist = <span class="hljs-keyword">new</span> ArrayList&lt;SysMenu&gt;();</span><br><span class="line">    Iterator&lt;SysMenu&gt; it = list.iterator();</span><br><span class="line">    <span class="hljs-keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        SysMenu n = (SysMenu) it.next();</span><br><span class="line">        <span class="hljs-keyword">if</span> (n.getParentId().longValue() == t.getMenuId().longValue()) &#123;</span><br><span class="line">            tlist.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> tlist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 判断是否有子节点</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasChild</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> getChildList(list, t).size() &gt; <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里一共涉及到五个关键方法，我们来逐一进行分析：</p><ol><li>selectMenuTreeByUserId：这个方法的执行比较容易，如果当前用户是管理员，那就不用加过滤条件了，直接查询出所有的类型为 M 和 C 的菜单项即可。</li><li>getChildPerms：这个方法主要是将前面查询出来的菜单数据进行重组，本来都是一个集合中的数据，现在在该方法中处理成树状，处理的核心逻辑就是调用 recursionFn 方法将之进行递归。</li><li>recursionFn：这是最为关键的递归方法了，首先调用 getChildList 获取当前菜单项的 children，然后将获取到的 children 设置给当前菜单项，最后还要遍历获取到的 children，如果这个 children 也是有子菜单的，则继续调用 recursionFn 方法进行处理。</li><li>getChildList：这个是查询某一个菜单的子菜单，这个很容易，如果某一个菜单的 parentId 是当前菜单的 id，那么这个菜单就是当前菜单的子菜单。</li><li>hasChild：这个是判断给定的菜单是否有子菜单，这个逻辑就比较简单了。</li></ol><p>好啦，这个就是整个的查询逻辑，整体上来说是比较容易的，就是查询 M 和 C 类型的菜单，然后再做一个递归操作，将菜单数据变成一个树状数据。</p><p>但是因为 SysMenu 和前后端所需要的路由数据的字段名称对不上，并且格式参数等都不符合前端的要求，所以还需要再做一个转换，这就是 <code>menuService.buildMenus</code> 所做的事情了：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 构建前端路由所需要的菜单</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menus 菜单列表</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;RouterVo&gt; <span class="hljs-title">buildMenus</span><span class="hljs-params">(List&lt;SysMenu&gt; menus)</span> </span>&#123;</span><br><span class="line">    List&lt;RouterVo&gt; routers = <span class="hljs-keyword">new</span> LinkedList&lt;RouterVo&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (SysMenu menu : menus) &#123;</span><br><span class="line">        RouterVo router = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">        router.setHidden(<span class="hljs-string">"1"</span>.equals(menu.getVisible()));</span><br><span class="line">        router.setName(getRouteName(menu));</span><br><span class="line">        router.setPath(getRouterPath(menu));</span><br><span class="line">        router.setComponent(getComponent(menu));</span><br><span class="line">        router.setQuery(menu.getQuery());</span><br><span class="line">        router.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), StringUtils.equals(<span class="hljs-string">"1"</span>, menu.getIsCache()), menu.getPath()));</span><br><span class="line">        List&lt;SysMenu&gt; cMenus = menu.getChildren();</span><br><span class="line">        <span class="hljs-keyword">if</span> (!cMenus.isEmpty() &amp;&amp; cMenus.size() &gt; <span class="hljs-number">0</span> &amp;&amp; UserConstants.TYPE_DIR.equals(menu.getMenuType())) &#123;</span><br><span class="line">            router.setAlwaysShow(<span class="hljs-keyword">true</span>);</span><br><span class="line">            router.setRedirect(<span class="hljs-string">"noRedirect"</span>);</span><br><span class="line">            router.setChildren(buildMenus(cMenus));</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMenuFrame(menu)) &#123;</span><br><span class="line">            router.setMeta(<span class="hljs-keyword">null</span>);</span><br><span class="line">            List&lt;RouterVo&gt; childrenList = <span class="hljs-keyword">new</span> ArrayList&lt;RouterVo&gt;();</span><br><span class="line">            RouterVo children = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">            children.setPath(menu.getPath());</span><br><span class="line">            children.setComponent(menu.getComponent());</span><br><span class="line">            children.setName(StringUtils.capitalize(menu.getPath()));</span><br><span class="line">            children.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), StringUtils.equals(<span class="hljs-string">"1"</span>, menu.getIsCache()), menu.getPath()));</span><br><span class="line">            children.setQuery(menu.getQuery());</span><br><span class="line">            childrenList.add(children);</span><br><span class="line">            router.setChildren(childrenList);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (menu.getParentId().intValue() == <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">            router.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon()));</span><br><span class="line">            router.setPath(<span class="hljs-string">"/"</span>);</span><br><span class="line">            List&lt;RouterVo&gt; childrenList = <span class="hljs-keyword">new</span> ArrayList&lt;RouterVo&gt;();</span><br><span class="line">            RouterVo children = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">            String routerPath = innerLinkReplaceEach(menu.getPath());</span><br><span class="line">            children.setPath(routerPath);</span><br><span class="line">            children.setComponent(UserConstants.INNER_LINK);</span><br><span class="line">            children.setName(StringUtils.capitalize(routerPath));</span><br><span class="line">            children.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), menu.getPath()));</span><br><span class="line">            childrenList.add(children);</span><br><span class="line">            router.setChildren(childrenList);</span><br><span class="line">        &#125;</span><br><span class="line">        routers.add(router);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> routers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个方法的执行逻辑上我们可以看到，这里的菜单数据一共分为了四种情况，其实刚好就和我们第一小节所介绍的情况相对应。</p><p>整体上来看，分支语句外面设置了组件的最基本的属性。三个分支语句：</p><ol><li>第一个分支，处理普通的有父有子的情况。</li><li>第二个分支，处理第一小节第二种情况。</li><li>第三个分支，处理第一小节第三种情况。</li><li>如果三个分支都没进去，那就是第一小节的第四种情况，以及各个子菜单的情况了。</li></ol><p>好了，基于这样大的思路，再来看各个属性的具体设置，就很容易了。</p><ol><li>首先是可见性 hidden，这个没啥好说的。</li><li>接下来是菜单的 name 属性，name 属性分为了两种情况：路由的 name 属性是菜单表中的 path 字段值且首字母大写（菜单 1、3、4）；如果在一级菜单中，出现了一个菜单 C（本来这一级别只有 M），并且还不是外链，那么就设置菜单的 name 为空字符串（相当于此时不需要 name 属性了，对应菜单 2 的情况）。</li><li>接下来是路由的 path，设置 path 的时候也分好种情况，松哥对照着代码来和大家说一下：</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取路由地址</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menu 菜单信息</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由地址</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRouterPath</span><span class="hljs-params">(SysMenu menu)</span> </span>&#123;</span><br><span class="line">    String routerPath = menu.getPath();</span><br><span class="line">    <span class="hljs-comment">// 内链打开外网方式</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (menu.getParentId().intValue() != <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">        routerPath = innerLinkReplaceEach(routerPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 非外链并且是一级目录（类型为目录）</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == menu.getParentId().intValue() &amp;&amp; UserConstants.TYPE_DIR.equals(menu.getMenuType())</span><br><span class="line">            &amp;&amp; UserConstants.NO_FRAME.equals(menu.getIsFrame())) &#123;</span><br><span class="line">        routerPath = <span class="hljs-string">"/"</span> + menu.getPath();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 非外链并且是一级目录（类型为菜单）</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMenuFrame(menu)) &#123;</span><br><span class="line">        routerPath = <span class="hljs-string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> routerPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a. 首先获取从数据库中查询到的 path 属性。<br>b. 如果当前组件不是一级菜单，并且是在内部组件中展示，那么除去这个 path 里边的 http 或者 https（对应菜单 3 的 children 的情况）。<br>c. 如果当前组件是一级菜单并且是 M 型并且不是外链，那么就在原有的 path 上加上 / 前缀（对应菜单 1 的一级菜单的 path 情况）。<br>d. 如果当前组件是一级菜单，且是 C 型菜单，那么设置 path 为 /（对应菜单 2、3 中一级菜单的 path 情况）。<br>e. 其他情况，菜单都是从数据库查到什么返回什么。</p><ol start="4"><li>接下来是设置前端 component，这个菜单项用哪个 component 组件显示出来。</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取组件信息</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menu 菜单信息</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 组件信息</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponent</span><span class="hljs-params">(SysMenu menu)</span> </span>&#123;</span><br><span class="line">    String component = UserConstants.LAYOUT;</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(menu.getComponent()) &amp;&amp; !isMenuFrame(menu)) &#123;</span><br><span class="line">        component = menu.getComponent();</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.isEmpty(menu.getComponent()) &amp;&amp; menu.getParentId().intValue() != <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">        component = UserConstants.INNER_LINK;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.isEmpty(menu.getComponent()) &amp;&amp; isParentView(menu)) &#123;</span><br><span class="line">        component = UserConstants.PARENT_VIEW;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a. 首先默认的组件是 Layout（菜单1、2、3、4 的一级菜单）。<br>b. 如果配置的时候就有 component，并且当前菜单项也不是外链，那么就使用配置的 component（菜单 1、2 的子菜单情况）。<br>c. 如果不是一级菜单（是一个子菜单），并且是一个在当前系统展示的外链，那么就使用 InnerLink 这个组件（这个组件中有一个 iframe 标签可以把外链展示出来，如菜单 4 的子菜单情况）。<br>d. 如果配置的时候没有设置组件并且菜单类型是 M（二级菜单中还有三级菜单的情况），那么就设置显示组件为 ParentView。</p><p>component 就分为这几种情况。</p><ol start="5"><li>接下来就是 query 和 meta 这两个参数就没啥好说的。</li></ol><p>接下来就是三个分支的情况了。</p><p>其他属性都比较容易，我就不啰嗦啦～</p><p>好啦，Vue3+Spring Boot 动态菜单管理，最近整了好几篇了，就先说这么多吧，小伙伴们有问题欢迎留言讨论！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 Spring Boot + Vue3 的动态菜单，松哥之前已经写了两篇文章了，这两篇文章主要是从代码上和大家分析动态菜单最终的实现方式，但是还是有小伙伴觉得没太看明白，感觉缺乏一个提纲挈领的思路，所以，今天松哥再整一篇文章和大家再来捋一捋这个问题，希望这篇文章能让小伙伴们彻底搞清楚这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>TienChin 项目动态菜单接口分析</title>
    <link href="http://www.javaboy.org/2022/0711/dynamic-menu.html"/>
    <id>http://www.javaboy.org/2022/0711/dynamic-menu.html</id>
    <published>2022-07-11T15:21:31.000Z</published>
    <updated>2022-07-19T15:48:31.552Z</updated>
    
    <content type="html"><![CDATA[<p>本文一定要结合<a href="https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg" target="_blank" rel="noopener">Vue 里，多级菜单要如何设计才显得专业？</a>一文一起食用效果良好，否则可能会看不懂。</p><a id="more"></a><p>做过 vhr 的小伙伴应该都知道动态菜单是咋回事，就是不同权限的用户登录成功之后，可以看到不同的菜单项，这在前后端不分的项目中，其实是很好实现的，然而在前后端分离项目中，实现起来略微有一些麻烦，不过不管怎么说，想要实现，总是有办法的，并且办法还不止一个！今天松哥就来和大家聊一聊 TienChin 项目中动态菜单的实现方案，一起来学习一个不同于 vhr 的动态菜单实现思路。</p><p>TienChin 项目基于 RuoYi-Vue 脚手架，所以接下来的分析也是在说 RuoYi-Vue 这个脚手架中动态菜单的实现方案。</p><h2 id="1-菜单表"><a href="#1-菜单表" class="headerlink" title="1. 菜单表"></a>1. 菜单表</h2><p>首先我们来看看菜单表的定义，也就是 <code>sys_menu</code>。</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`sys_menu`</span> (</span><br><span class="line">  <span class="hljs-string">`menu_id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单ID'</span>,</span><br><span class="line">  <span class="hljs-string">`menu_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单名称'</span>,</span><br><span class="line">  <span class="hljs-string">`parent_id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'父菜单ID'</span>,</span><br><span class="line">  <span class="hljs-string">`order_num`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'显示顺序'</span>,</span><br><span class="line">  <span class="hljs-string">`path`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'路由地址'</span>,</span><br><span class="line">  <span class="hljs-string">`component`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'组件路径'</span>,</span><br><span class="line">  <span class="hljs-string">`query`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'路由参数'</span>,</span><br><span class="line">  <span class="hljs-string">`is_frame`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'1'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否为外链（0是 1否）'</span>,</span><br><span class="line">  <span class="hljs-string">`is_cache`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否缓存（0缓存 1不缓存）'</span>,</span><br><span class="line">  <span class="hljs-string">`menu_type`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单类型（M目录 C菜单 F按钮）'</span>,</span><br><span class="line">  <span class="hljs-string">`visible`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单状态（0显示 1隐藏）'</span>,</span><br><span class="line">  <span class="hljs-string">`status`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单状态（0正常 1停用）'</span>,</span><br><span class="line">  <span class="hljs-string">`perms`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'权限标识'</span>,</span><br><span class="line">  <span class="hljs-string">`icon`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'#'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单图标'</span>,</span><br><span class="line">  <span class="hljs-string">`create_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建者'</span>,</span><br><span class="line">  <span class="hljs-string">`create_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建时间'</span>,</span><br><span class="line">  <span class="hljs-string">`update_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新者'</span>,</span><br><span class="line">  <span class="hljs-string">`update_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新时间'</span>,</span><br><span class="line">  <span class="hljs-string">`remark`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'备注'</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`menu_id`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">3054</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci <span class="hljs-keyword">COMMENT</span>=<span class="hljs-string">'菜单权限表'</span>;</span><br></pre></td></tr></table></figure><p>其实这里很多字段都和我们 vhr 项目项目很相似，我也就不重复啰嗦了，我这里主要和小伙伴们说一个字段，那就是 <code>menu_type</code>。</p><p><code>menu_type</code> 表示一个菜单字段的类型，一个菜单有三种类型，分别是目录（M）、菜单（C）以及按钮（F）。这里所说的目录，相当于我们在 vhr 中所说的一级菜单，菜单相当于我们在 vhr 中所说的二级菜单。</p><p>当用户从前端登录成功后，要去动态加载的菜单的时候，就查询 M 和 C 类型的数据即可，F 类型的数据不是菜单项，查询的时候直接过滤掉即可，通过 <code>menu_type</code> 这个字段可以轻松的过滤掉 F 类型的数据。小伙伴们想想，F 类型的数据过滤掉之后，剩下的数据不就是一级菜单和二级菜单了，那不就和 vhr 又一样了么！</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220626194444.png" alt></p><p>在 vhr 中，考虑到菜单就是只有两级：一级菜单和二级菜单，一级菜单是目录，二级菜单是则是具体的菜单项，没有三级菜单！所以在 vhr 中，查询菜单的时候我直接用了一个一对多的查询，将一级菜单做一的一方，二级菜单做多的一方，这样比较省事。当然灵活度差一点，所以在 TienChin 项目中，这块还是用上了递归。</p><h2 id="2-前端菜单展示"><a href="#2-前端菜单展示" class="headerlink" title="2. 前端菜单展示"></a>2. 前端菜单展示</h2><p>接下来，前端菜单展示分为了几种情况？这个松哥在之前的文章中已经和大家聊过了，具体可以参考<a href="https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg" target="_blank" rel="noopener">Vue 里，多级菜单要如何设计才显得专业？</a>一文，这里不再赘述。</p><h2 id="3-菜单接口"><a href="#3-菜单接口" class="headerlink" title="3. 菜单接口"></a>3. 菜单接口</h2><p>当用户登录成功之后，会自动请求 <code>/getRouters</code> 接口来获取菜单信息，我们一起来看下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取路由信息</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由信息</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"getRouters"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">getRouters</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    Long userId = SecurityUtils.getUserId();</span><br><span class="line">    List&lt;SysMenu&gt; menus = menuService.selectMenuTreeByUserId(userId);</span><br><span class="line">    <span class="hljs-keyword">return</span> AjaxResult.success(menuService.buildMenus(menus));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的查询实际上分为两个步骤：</p><ol><li>根据用户 id 查询到所有的菜单信息，这一步的查询实际上是比较容易的，就单纯的多张表联合在一起，然后过滤出和当前用户相关并且菜单类型为 M 或者 C 的菜单（类型为 F 的表示按钮，就不要了），查询到菜单信息之后，然后进行一个递归操作，将菜单数据的层级排列出来。</li><li><code>menuService.buildMenus</code> 这一步则是将菜单数据专为前端所需要的路由数据。</li></ol><p>一共就这两个步骤，我们来逐一进行分析。</p><p>先来看查询菜单数据。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 根据用户ID查询菜单</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId 用户名称</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 菜单列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SysMenu&gt; <span class="hljs-title">selectMenuTreeByUserId</span><span class="hljs-params">(Long userId)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; menus = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (SecurityUtils.isAdmin(userId)) &#123;</span><br><span class="line">        menus = menuMapper.selectMenuTreeAll();</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        menus = menuMapper.selectMenuTreeByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> getChildPerms(menus, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 根据父节点的ID获取所有子节点</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list     分类表</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parentId 传入的父节点ID</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> String</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SysMenu&gt; <span class="hljs-title">getChildPerms</span><span class="hljs-params">(List&lt;SysMenu&gt; list, <span class="hljs-keyword">int</span> parentId)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; returnList = <span class="hljs-keyword">new</span> ArrayList&lt;SysMenu&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (Iterator&lt;SysMenu&gt; iterator = list.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">        SysMenu t = (SysMenu) iterator.next();</span><br><span class="line">        <span class="hljs-comment">// 一、根据传入的某个父节点ID,遍历该父节点的所有子节点</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (t.getParentId() == parentId) &#123;</span><br><span class="line">            recursionFn(list, t);</span><br><span class="line">            returnList.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> returnList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 递归列表</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> t</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">recursionFn</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 得到子节点列表</span></span><br><span class="line">    List&lt;SysMenu&gt; childList = getChildList(list, t);</span><br><span class="line">    t.setChildren(childList);</span><br><span class="line">    <span class="hljs-keyword">for</span> (SysMenu tChild : childList) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (hasChild(list, tChild)) &#123;</span><br><span class="line">            recursionFn(list, tChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 得到子节点列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SysMenu&gt; <span class="hljs-title">getChildList</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; tlist = <span class="hljs-keyword">new</span> ArrayList&lt;SysMenu&gt;();</span><br><span class="line">    Iterator&lt;SysMenu&gt; it = list.iterator();</span><br><span class="line">    <span class="hljs-keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        SysMenu n = (SysMenu) it.next();</span><br><span class="line">        <span class="hljs-keyword">if</span> (n.getParentId().longValue() == t.getMenuId().longValue()) &#123;</span><br><span class="line">            tlist.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> tlist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 判断是否有子节点</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasChild</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> getChildList(list, t).size() &gt; <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里一共涉及到五个关键方法，我们来逐一进行分析：</p><ol><li>selectMenuTreeByUserId：这个方法的执行比较容易，如果当前用户是管理员，那就不用加过滤条件了，直接查询出所有的类型为 M 和 C 的菜单项即可。</li><li>getChildPerms：这个方法主要是将前面查询出来的菜单数据进行重组，本来都是一个集合中的数据，现在在该方法中处理成树状，处理的核心逻辑就是调用 recursionFn 方法将之进行递归。</li><li>recursionFn：这是最为关键的递归方法了，首先调用 getChildList 获取当前菜单项的 children，然后将获取到的 children 设置给当前菜单项，最后还要遍历获取到的 children，如果这个 children 也是有子菜单的，则继续调用 recursionFn 方法进行处理。</li><li>getChildList：这个是查询某一个菜单的子菜单，这个很容易，如果某一个菜单的 parentId 是当前菜单的 id，那么这个菜单就是当前菜单的子菜单。</li><li>hasChild：这个是判断给定的菜单是否有子菜单，这个逻辑就比较简单了。</li></ol><p>好啦，这个就是整个的查询逻辑，整体上来说是比较容易的，就是查询 M 和 C 类型的菜单，然后再做一个递归操作，将菜单数据变成一个树状数据。</p><p>但是因为 SysMenu 和前后端所需要的路由数据的字段名称对不上，并且格式参数等都不符合前端的要求，所以还需要再做一个转换，这就是 <code>menuService.buildMenus</code> 所做的事情了，在分析 <code>menuService.buildMenus</code> 方法之前，我觉得大家有必要先来回顾一下<a href="https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg" target="_blank" rel="noopener">Vue 里，多级菜单要如何设计才显得专业？</a>一文，再来捋一捋菜单的四种情况，我们先来回顾下四种菜单格式：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"/monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"redirect"</span>: <span class="hljs-string">"noRedirect"</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line"><span class="hljs-attr">"alwaysShow"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"系统监控"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="hljs-attr">"children"</span>: [&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Online"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"online"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"monitor/online/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"在线用户"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"online"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Job"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"job"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"monitor/job/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"定时任务"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"job"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"/"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line"><span class="hljs-attr">"children"</span>: [&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Role"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"role"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"system/role/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"角色管理"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"peoples"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"path"</span>: <span class="hljs-string">"http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line">    <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">        <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">        <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-attr">"link"</span>: <span class="hljs-string">"http://www.javaboy.org"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/"</span>,</span><br><span class="line">    <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line">    <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">        <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">        <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-attr">"children"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Www.javaboy.org"</span>,</span><br><span class="line">            <span class="hljs-attr">"path"</span>: <span class="hljs-string">"www.javaboy.org"</span>,</span><br><span class="line">            <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">            <span class="hljs-attr">"component"</span>: <span class="hljs-string">"InnerLink"</span>,</span><br><span class="line">            <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">                <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">                <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">                <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">                <span class="hljs-attr">"link"</span>: <span class="hljs-string">"http://www.javaboy.org"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>这四种菜单 JSON，从上往下显示效果依次是：</p><ol><li>一级菜单中有二级菜单，一级菜单不可点击，二级菜单点击后在右边打开相应的页面。</li><li>只有一个一级菜单，点击之后，右边打开相应的页面。</li><li>一个外链（只有一级菜单），点击之后，在新的选项卡中打开新的页面。</li><li>一个外链（只有一级菜单），点击之后，在当前系统中打开新的页面（第三方页面通过 iframe 标签出现在当前系统中）。</li></ol><p>牢记这四种不同的菜单情况，再来看 <code>buildMenus</code> 方法，就会容易很多了（下文我说菜单 1、2、3、4 分别对应上面的四种情况）：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 构建前端路由所需要的菜单</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menus 菜单列表</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;RouterVo&gt; <span class="hljs-title">buildMenus</span><span class="hljs-params">(List&lt;SysMenu&gt; menus)</span> </span>&#123;</span><br><span class="line">    List&lt;RouterVo&gt; routers = <span class="hljs-keyword">new</span> LinkedList&lt;RouterVo&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (SysMenu menu : menus) &#123;</span><br><span class="line">        RouterVo router = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">        router.setHidden(<span class="hljs-string">"1"</span>.equals(menu.getVisible()));</span><br><span class="line">        router.setName(getRouteName(menu));</span><br><span class="line">        router.setPath(getRouterPath(menu));</span><br><span class="line">        router.setComponent(getComponent(menu));</span><br><span class="line">        router.setQuery(menu.getQuery());</span><br><span class="line">        router.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), StringUtils.equals(<span class="hljs-string">"1"</span>, menu.getIsCache()), menu.getPath()));</span><br><span class="line">        List&lt;SysMenu&gt; cMenus = menu.getChildren();</span><br><span class="line">        <span class="hljs-keyword">if</span> (!cMenus.isEmpty() &amp;&amp; cMenus.size() &gt; <span class="hljs-number">0</span> &amp;&amp; UserConstants.TYPE_DIR.equals(menu.getMenuType())) &#123;</span><br><span class="line">            router.setAlwaysShow(<span class="hljs-keyword">true</span>);</span><br><span class="line">            router.setRedirect(<span class="hljs-string">"noRedirect"</span>);</span><br><span class="line">            router.setChildren(buildMenus(cMenus));</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMenuFrame(menu)) &#123;</span><br><span class="line">            router.setMeta(<span class="hljs-keyword">null</span>);</span><br><span class="line">            List&lt;RouterVo&gt; childrenList = <span class="hljs-keyword">new</span> ArrayList&lt;RouterVo&gt;();</span><br><span class="line">            RouterVo children = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">            children.setPath(menu.getPath());</span><br><span class="line">            children.setComponent(menu.getComponent());</span><br><span class="line">            children.setName(StringUtils.capitalize(menu.getPath()));</span><br><span class="line">            children.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), StringUtils.equals(<span class="hljs-string">"1"</span>, menu.getIsCache()), menu.getPath()));</span><br><span class="line">            children.setQuery(menu.getQuery());</span><br><span class="line">            childrenList.add(children);</span><br><span class="line">            router.setChildren(childrenList);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (menu.getParentId().intValue() == <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">            router.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon()));</span><br><span class="line">            router.setPath(<span class="hljs-string">"/"</span>);</span><br><span class="line">            List&lt;RouterVo&gt; childrenList = <span class="hljs-keyword">new</span> ArrayList&lt;RouterVo&gt;();</span><br><span class="line">            RouterVo children = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">            String routerPath = innerLinkReplaceEach(menu.getPath());</span><br><span class="line">            children.setPath(routerPath);</span><br><span class="line">            children.setComponent(UserConstants.INNER_LINK);</span><br><span class="line">            children.setName(StringUtils.capitalize(routerPath));</span><br><span class="line">            children.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), menu.getPath()));</span><br><span class="line">            childrenList.add(children);</span><br><span class="line">            router.setChildren(childrenList);</span><br><span class="line">        &#125;</span><br><span class="line">        routers.add(router);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> routers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法一个核心思想就是格式转换，其他的都没啥，不过看似简单的逻辑里边，其实也隐藏了很多实现细节。</p><p>这个方法细看的话，会有很多地方感觉比较绕。但是，小伙伴们仔细回顾一下<a href="https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg" target="_blank" rel="noopener">Vue 里，多级菜单要如何设计才显得专业？</a>一文，在该文章中，松哥将前端展示出来的菜单分为了四种情况，根据那四种显示的情况，再来看这里的数据组装逻辑，就很好懂了。</p><p>首先我们来看 router 基本属性的设置：</p><ol><li>首先是可见性 hidden，这个没啥好说的。</li><li>接下来是菜单的 name 属性，name 属性分为了两种情况：路由的 name 属性是菜单表中的 path 字段值且首字母大写（菜单 1、3、4）；如果在一级菜单中，出现了一个菜单 C（本来这一级别只有 M），并且还不是外链，那么就设置菜单的 name 为空字符串（相当于此时不需要 name 属性了，对应菜单 2 的情况）。</li><li>接下来是路由的 path，设置 path 的时候也分好种情况，松哥对照着代码来和大家说一下：</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取路由地址</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menu 菜单信息</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由地址</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRouterPath</span><span class="hljs-params">(SysMenu menu)</span> </span>&#123;</span><br><span class="line">    String routerPath = menu.getPath();</span><br><span class="line">    <span class="hljs-comment">// 内链打开外网方式</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (menu.getParentId().intValue() != <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">        routerPath = innerLinkReplaceEach(routerPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 非外链并且是一级目录（类型为目录）</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == menu.getParentId().intValue() &amp;&amp; UserConstants.TYPE_DIR.equals(menu.getMenuType())</span><br><span class="line">            &amp;&amp; UserConstants.NO_FRAME.equals(menu.getIsFrame())) &#123;</span><br><span class="line">        routerPath = <span class="hljs-string">"/"</span> + menu.getPath();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 非外链并且是一级目录（类型为菜单）</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMenuFrame(menu)) &#123;</span><br><span class="line">        routerPath = <span class="hljs-string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> routerPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a. 首先获取从数据库中查询到的 path 属性。<br>b. 如果当前组件不是一级菜单，并且是在内部组件中展示，那么除去这个 path 里边的 http 或者 https（对应菜单 4 的 children 的情况）。<br>c. 如果当前组件是一级菜单并且是 M 型并且不是外链，那么就在原有的 path 上加上 / 前缀（对应菜单 1 的一级菜单的 path 情况）。<br>d. 如果当前组件是一级菜单，且是 C 型菜单，那么设置 path 为 /（对应菜单 2、4 中一级菜单的 path 情况）。<br>e. 其他情况，菜单都是从数据库查到什么返回什么。</p><ol start="4"><li>接下来是设置前端 component，这个菜单项用哪个 component 组件显示出来。</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取组件信息</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menu 菜单信息</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 组件信息</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponent</span><span class="hljs-params">(SysMenu menu)</span> </span>&#123;</span><br><span class="line">    String component = UserConstants.LAYOUT;</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(menu.getComponent()) &amp;&amp; !isMenuFrame(menu)) &#123;</span><br><span class="line">        component = menu.getComponent();</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.isEmpty(menu.getComponent()) &amp;&amp; menu.getParentId().intValue() != <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">        component = UserConstants.INNER_LINK;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.isEmpty(menu.getComponent()) &amp;&amp; isParentView(menu)) &#123;</span><br><span class="line">        component = UserConstants.PARENT_VIEW;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a. 首先默认的组件是 Layout（菜单1、2、3、4 的一级菜单）。<br>b. 如果配置的时候就有 component，并且当前菜单项也不是外链，那么就使用配置的 component（菜单 1、2 的子菜单情况）。<br>c. 如果不是一级菜单（是一个子菜单），并且是一个在当前系统展示的外链，那么就使用 InnerLink 这个组件（这个组件中有一个 iframe 标签可以把外链展示出来，如菜单 4 的子菜单情况）。<br>d. 如果配置的时候没有设置组件并且菜单类型是 M（二级菜单中还有三级菜单的情况），那么就设置显示组件为 ParentView。</p><p>component 就分为这几种情况。</p><ol start="5"><li>接下来就是 query 和 meta 这两个参数就没啥好说的。</li></ol><p>接下来就是三个分支的情况了。</p><ol start="6"><li>首先第一个 if，处理的就是常规情况，一级菜单中有二级菜单的情况（对应菜单 1 的一级菜单情况）。</li><li>第二个分支处理一级 C 型菜单是非外链的情况（对应菜单 2 的情况），此时自动给该菜单项加上一个 children。</li><li>第三个分支是处理一级 M 型菜单是外链的情况（对应菜单 4 的情况），此时自动给该菜单加上一个 children。</li><li>如果三个分支都不进去，实际上就是菜单 3 的情况了。</li></ol><p>好啦，这就是菜单接口分析的全部内容了，有点绕，后面松哥再整几集视频和大家详细分析，对视频感兴趣的小伙伴戳这里：<a href="https://mp.weixin.qq.com/s/Qzj-tCYBB6QsviqF9H56rg" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文一定要结合&lt;a href=&quot;https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue 里，多级菜单要如何设计才显得专业？&lt;/a&gt;一文一起食用效果良好，否则可能会看不懂。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Spring 事务失效了，怎么办？</title>
    <link href="http://www.javaboy.org/2022/0705/spring-transaction.html"/>
    <id>http://www.javaboy.org/2022/0705/spring-transaction.html</id>
    <published>2022-07-05T15:21:07.000Z</published>
    <updated>2022-07-19T15:48:04.008Z</updated>
    
    <content type="html"><![CDATA[<p>这是小伙伴们在微信上问的一个问题：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220702180737.png" alt></p><a id="more"></a><p>这个问题比较典型，让我想到面试时有一个 Spring 事务失效的问题，跟这个原因以及解决方案是一模一样的，因此，抽空整篇文章和小伙伴们分享下。</p><h2 id="1-AOP-的原理"><a href="#1-AOP-的原理" class="headerlink" title="1. AOP 的原理"></a>1. AOP 的原理</h2><p>小伙伴们知道，AOP 底层就是动态代理，动态代理有两种实现方式：</p><ul><li>JDK 动态代理：利用拦截器（必须实现 InvocationHandler）加上反射机制生成一个代理接口的匿名类，在调用具体方法前调用 InvokeHandler 来处理。举个例子，假设有一个接口 A，A 有一个实现类 B，现在要给 B 生成代理对象，那么实际上是给 A 接口自动生成了一个匿名实现类，并且在这个匿名实现类中调用到 B 中的方法。</li><li>CGLIB 动态代理：利用 ASM 框架，对代理对象类生成的 class 文件加载进来，通过修改其字节码生成子类来处理。举个例子，现在有一个类 A，A 没有接口，现在想给 A 生成一个代理对象，那么实际上是自动给 A 生成了一个子类，在这个子类中覆盖了 A 中的方法，<strong>所以，小伙伴们要注意，A 类以及它里边的方法不能是 final 类型的，否则无法生成代理</strong>。</li></ul><p>如果被代理的对象有接口，则可以使用 JDK 动态代理，没有接口就可以使用 CGLIB 动态代理。</p><p>在 Spring 中，默认情况下，如果被代理的对象有接口，就使用 JDK 动态代理，如果被代理的对象没有接口，则使用 CGLIB 动态代理。</p><p>在 Spring Boot 中，2.0 之前也跟 Spring 中的规则一样，2.0 之后则统一都使用 CGLIB 动态代理。</p><p>不过这些都是默认的规则，如果有接口，但是你又希望使用 CGLIB 动态代理，通过修改配置，也都是可以实现的：</p><p>如果是 XML 配置，想使用 CGLIB 动态代理，可以按如下方式实现：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">"true"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pc1"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"。。。"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"logAdvice"</span>&gt;</span></span><br><span class="line">        。。。</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是 Java 配置，想使用 CGLIB 动态代理，可以按如下方式实现：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-meta">@Aspect</span></span><br><span class="line"><span class="hljs-meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="hljs-keyword">true</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogAspect</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，在新版 Spring Boot 项目中，有接口的类默认就是使用 CGLIB 动态代理的。但是此时如果有接口的类你又想使用 JDK 动态代理，那么可以通过如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.aop.proxy-target-class=false</span><br></pre></td></tr></table></figure><p>关于 Spring Boot 中的 AOP 代理问题，可以参考去年松哥写的文章：<a href="https://mp.weixin.qq.com/s/V3bJGgjP2OZDmngtAuM8aw" target="_blank" rel="noopener"><br>Spring Boot 中的 AOP，到底是 JDK 动态代理还是 Cglib 动态代理？</a>。</p><h2 id="2-实际用的类"><a href="#2-实际用的类" class="headerlink" title="2. 实际用的类"></a>2. 实际用的类</h2><p>基于第一小节的讲解，小伙伴们知道，当你在项目中用到了 AOP 之后，其实你所以见到的类，并不是原本的类了。</p><p>松哥前面写了好几篇 AOP 相关的文章，如下：</p><ul><li><a href="https://mp.weixin.qq.com/s/g71F3cnLtD4zqJGFCeJckQ" target="_blank" rel="noopener">手把手教你玩多数据源动态切换！</a></li><li><a href="https://mp.weixin.qq.com/s/rzz2tgBBJpWz7gjmEfz2XQ" target="_blank" rel="noopener">Redis 做接口限流，一个注解的事！</a></li><li><a href="https://mp.weixin.qq.com/s/qSXS401IX2libPKVVVuChQ" target="_blank" rel="noopener">处理接口幂等性的两种常见方案|手把手教你</a></li><li><a href="https://mp.weixin.qq.com/s/_dsdL5hDjd3CMxuWfWJ8Fg" target="_blank" rel="noopener">数据权限，一个注解搞定！</a></li></ul><p>虽然是解决不同的问题，但是有一个共同的点，那就是都是通过自定义注解+ AOP 解决问题的。</p><p>现在我就以<a href="https://mp.weixin.qq.com/s/g71F3cnLtD4zqJGFCeJckQ" target="_blank" rel="noopener">手把手教你玩多数据源动态切换！</a>为例，来和大家说说这里的动态代理到底是咋回事，没看过这篇文章的小伙伴可以先看下。</p><p>小伙伴们看下，我的 UserService 大致上是下面这样：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@DS</span>(<span class="hljs-string">"master"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> userMapper.getCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小伙伴们看到，count() 方法上加了 @DS 注解，所以这个 count() 方法将来是要被自动代理的。换言之，当你在另外一个类中注入 UserService 的时候，其实不是这个 UserService，我 DEBUG 小伙伴们来看一下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220702184820.png" alt></p><p>小伙伴们从图中可以看到，此时我注入的 UserService 并不是真正的 UserService，而是一个通过 CGLIB 动态代理为 UserService 生成的子类，这个子类里边的 count 方法大致逻辑类似下面这样（其实就是 AOP 中的代码，具体小伙伴们可以参考 <a href="https://mp.weixin.qq.com/s/g71F3cnLtD4zqJGFCeJckQ" target="_blank" rel="noopener">手把手教你玩多数据源动态切换！</a>一文）：</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 切换数据源</span><br><span class="line"># 去数据库查询 count</span><br><span class="line"># 清空 ThreadLocal 中的变量</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>但是，如果我的调用逻辑是这样呢：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">count2</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@DS</span>(<span class="hljs-string">"master"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> userMapper.getCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小伙伴们来看，count2 方法，这个时候直接在 count2 方法中调用了 count 方法，当然，count2() 方法中的调用也可以写作 <code>this.count();</code>，这样看起来就更明确了，我们调用 count 方法，使用的是当前对象，而当前对象是不包含代理对象中的代码的，我们通过 DEBUG 来看下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220702222216.png" alt></p><p>所以，当我们在 count2 中直接调用 count 方法的时候，那么加在 count 方法上的注解就会失效。</p><h2 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3. 问题解决"></a>3. 问题解决</h2><p>这个问题存在于所有使用了 AOP 的地方，存在的原因第二小节已经分析的很清楚了。</p><p>解决办法其实也有很多种，最为简单省事的一种，就是在当前类中注入代理对象，然后通过代理对象去调用其他方法，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">count2</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> userService.count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Transactional</span></span><br><span class="line">    <span class="hljs-meta">@DS</span>(<span class="hljs-string">"master"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> userMapper.getCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.itboyhub.com/2021/10/tran/20220702222746.png" alt></p><p>虽然问题解决了，不过这毕竟不是一个好的解决办法（因为自己中注入自己，在新版 Spring Boot 中要开启循环依赖才能实现），大家在实际开发中，还是要从设计上尽量避免这种问题。</p><p>好啦，这个问题搞明白了，那么事务失效这个问题，也不用我多说了吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是小伙伴们在微信上问的一个问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.itboyhub.com/2021/10/tran/20220702180737.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>如何在 TienChin 项目中自定义权限表达式</title>
    <link href="http://www.javaboy.org/2022/0704/custom-permission-expression.html"/>
    <id>http://www.javaboy.org/2022/0704/custom-permission-expression.html</id>
    <published>2022-07-04T15:20:55.000Z</published>
    <updated>2022-07-19T15:50:20.585Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">前面的文章</a>中，松哥已经和小伙伴们聊了 Spring Security 中的权限表达式了，还没看过的小伙伴们可以先看下，本文将在前文的基础上继续完善：</p><a id="more"></a><ul><li><a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">Spring Security 中，想在权限中使用通配符，怎么做？</a></li></ul><h2 id="1-SpEL-回顾"><a href="#1-SpEL-回顾" class="headerlink" title="1. SpEL 回顾"></a>1. SpEL 回顾</h2><p>经过<a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">上篇文章</a>的学习，小伙伴们已经知道了，在 Spring Security 中，@PreAuthorize、@PostAuthorize 等注解都是支持 SpEL 表达式的。</p><p>在 SpEL 表达式中，如果上来就直接写要执行的方法名，那么就说明这个方法是 RootObject 对象中的方法，如果要执行其他对象的方法，那么还需要写上对象的名字，例如如下两个例子：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"hasAuthority('system:user:add')"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子中，表达式中的方法是 hasAuthority，没有写对象名，那么就说明这个方法是 SpEL 中 RootObject 对象中的方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('monitor:operlog:list')"</span>)</span><br><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/list"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title">list</span><span class="hljs-params">(SysOperLog operLog)</span> </span>&#123;</span><br><span class="line">    startPage();</span><br><span class="line">    List&lt;SysOperLog&gt; list = operLogService.selectOperLogList(operLog);</span><br><span class="line">    <span class="hljs-keyword">return</span> getDataTable(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子中，权限注解中的表达式方法是 <a href="mailto:`@ss.hasPermi" target="_blank" rel="noopener">`@ss.hasPermi</a>(‘monitor:operlog:list’)`，其中 ss 是指 Spring 容器中的一个对象名，hasPermi 则是这个对象中的方法。</p><p>好啦，经过<a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">前面文章</a>的学习，这些基本知识大家都已经掌握了。</p><h2 id="2-如何自定义"><a href="#2-如何自定义" class="headerlink" title="2. 如何自定义"></a>2. 如何自定义</h2><p>其实上面给出来的第二个例子就是一个自定义的例子。</p><p>不过，这种自定义方式太自由了，自由到没有在 Spring Security 架构内完成这件事。所以，今天我想和小伙伴们聊一聊，如何在不使用第三方对象的情况下，来自定义一个权限判断的表达式。</p><p>首先小伙伴们知道，我们在 @PreAuthorize 注解中使用的不用加对象名就能调用的权限方法，如 <code>hasAuthority</code>、<code>hasPermission</code>、<code>hasRole</code>、<code>hasAnyRole</code> 等，基本上都是由 SecurityExpressionRoot 及其子类提供的，准确来说是由 MethodSecurityExpressionRoot 类提供的。</p><p>MethodSecurityExpressionRoot 类实际上继承自 SecurityExpressionRoot，只不过增加了过滤对象以及返回值对象。我们来看下 MethodSecurityExpressionRoot 的方法摘要：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220702110528.png" alt></p><p>再来看看 SecurityExpressionRoot 中的方法：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220702110613.png" alt></p><p>这些就是 RootObject 对象中的所有方法了，也是我们能够在 @PreAuthorize 注解中使用的所有方法了。</p><p>那么现在想在已有方法上继续扩展新方法，那么我们可以通过自定义类继承自 SecurityExpressionRoot 对象，扩展这个 RootObject 对象，在该对象中继续添加新的方法，进而实现自定义权限表达式。</p><p>好啦，说干就干，开搞！</p><p>本文的案例在<a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">前文</a>的基础上继续完成，所以这里我就不从头开始写了。</p><h2 id="3-自定义-ExpressionRoot"><a href="#3-自定义-ExpressionRoot" class="headerlink" title="3. 自定义 ExpressionRoot"></a>3. 自定义 ExpressionRoot</h2><p>首先我们自定义一个类继承自 SecurityExpressionRoot 并实现 MethodSecurityExpressionOperations 接口（本来直接继承自 MethodSecurityExpressionRoot 即可，但是因为这个类不是 public 的，没法继承，所以我们就实现 MethodSecurityExpressionOperations 接口即可）：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomSecurityExpressionRoot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SecurityExpressionRoot</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodSecurityExpressionOperations</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> Object filterObject;</span><br><span class="line">    <span class="hljs-keyword">private</span> Object returnObject;</span><br><span class="line">    <span class="hljs-keyword">private</span> AntPathMatcher antPathMatcher = <span class="hljs-keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * Creates a new instance</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> authentication the &#123;<span class="hljs-doctag">@link</span> Authentication&#125; to use. Cannot be null.</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CustomSecurityExpressionRoot</span><span class="hljs-params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(authentication);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 判断当前对象是否具备某一个权限</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> permission</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermission</span><span class="hljs-params">(String permission)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//获取当前登录用户所具有的权限</span></span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">        <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (antPathMatcher.match(authority.getAuthority(), permission)) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 是否具备多个权限中的任意一个权限</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> permissions</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasAnyPermissions</span><span class="hljs-params">(String... permissions)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (permissions == <span class="hljs-keyword">null</span> || permissions.length == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">        <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (String permission : permissions) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (antPathMatcher.match(authority.getAuthority(), permission)) &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> hasAllPermissions：(String... permissions) &#123;</span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">        <span class="hljs-keyword">if</span> (permissions == <span class="hljs-keyword">null</span> || permissions.length == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (String permission : permissions) &#123;</span><br><span class="line">            <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (antPathMatcher.match(authority.getAuthority(), permission)) &#123;</span><br><span class="line">                    flag = <span class="hljs-keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFilterObject</span><span class="hljs-params">(Object filterObject)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.filterObject = filterObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getFilterObject</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> filterObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setReturnObject</span><span class="hljs-params">(Object returnObject)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.returnObject = returnObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getReturnObject</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> returnObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getThis</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加了 @Override 注解的方法，都是普普通通的常规方法，没啥好说的。我们自己主要实现了三个方法，分别是：</p><ul><li>hasPermission：判断当前用户是否具备某一个给定的权限。</li><li>hasAnyPermissions：判断当前用户是否具备给定的多个权限中的某一个。</li><li>hasAllPermissions：判断当前用户是否具备所有的给定的权限。</li></ul><p>这里边的逻辑我就不啰嗦了，都是基本的 Java 语法而已。</p><p>另外，用 AntPathMatcher 做比对是为了支持通配符，这个在<a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">上篇文章</a>中已经说过了，这里不再赘述。</p><p>Spring Security 中，MethodSecurityExpressionRoot 的配置是通过 DefaultMethodSecurityExpressionHandler 来完成的，现在我们自定义了 CustomSecurityExpressionRoot，那也得有一个 Handler 来配置 CustomSecurityExpressionRoot，所以，再来一个类继承自 DefaultMethodSecurityExpressionHandler，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomMethodSecurityExpressionHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultMethodSecurityExpressionHandler</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> MethodSecurityExpressionOperations <span class="hljs-title">createSecurityExpressionRoot</span><span class="hljs-params">(Authentication authentication, MethodInvocation invocation)</span> </span>&#123;</span><br><span class="line">        CustomSecurityExpressionRoot root = <span class="hljs-keyword">new</span> CustomSecurityExpressionRoot(authentication);</span><br><span class="line">        root.setTrustResolver(getTrustResolver());</span><br><span class="line">        root.setPermissionEvaluator(getPermissionEvaluator());</span><br><span class="line">        root.setRoleHierarchy(getRoleHierarchy());</span><br><span class="line">        <span class="hljs-keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 createSecurityExpressionRoot 方法中创建一个 CustomSecurityExpressionRoot 对象，对象的 TrustResolver、权限评估器以及角色层级等，统统都用默认的方案即可。</p><p>配置完成后，再配置一下 CustomMethodSecurityExpressionHandler 这个 Bean 即可，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-function">CustomMethodSecurityExpressionHandler <span class="hljs-title">customMethodSecurityExpressionHandler</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CustomMethodSecurityExpressionHandler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好啦，这就注入成功了。</p><p>接下来，我们就可以在权限注解中使用这个自定义的方法了：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"hasPermission('system:user:add')"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个自定义权限表达式的思路，说到底还是在 Spring Security 体系中玩，个人感觉这种方式更合理一些。</p><p>在 TienChin 项目中，松哥也将按照这种思路去改造 RuoYi-Vue 脚手架。届时在 TienChin 项目视频中，我再和大伙细聊，对视频感兴趣的小伙伴，戳这里：<a href="https://mp.weixin.qq.com/s/Qzj-tCYBB6QsviqF9H56rg" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前面的文章&lt;/a&gt;中，松哥已经和小伙伴们聊了 Spring Security 中的权限表达式了，还没看过的小伙伴们可以先看下，本文将在前文的基础上继续完善：&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>一个月过去了，TienChin 项目视频进度怎么样了呢？给大家汇报下！</title>
    <link href="http://www.javaboy.org/2022/0630/tienchin-video.html"/>
    <id>http://www.javaboy.org/2022/0630/tienchin-video.html</id>
    <published>2022-06-30T15:20:36.000Z</published>
    <updated>2022-07-19T15:50:17.604Z</updated>
    
    <content type="html"><![CDATA[<p>距离上次跟小伙伴们汇报 TienChin 项目视频进度已经过去一个月啦，今天是 6 月 30 号，再来汇报一下这个月视频的进展。</p><a id="more"></a><p>其实也没啥好说的，直接上目录吧！</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">├── 000.开篇.mp4</span><br><span class="line">├── 001.运行RuoYi-Vue.mp4</span><br><span class="line">├── 002.代码格式化.mp4</span><br><span class="line">├── 003.项目结构大改造.mp4</span><br><span class="line">├── 004.项目改造完善.mp4</span><br><span class="line">├── 005.项目结构分析.mp4</span><br><span class="line">├── 006.验证码响应结果分析.mp4</span><br><span class="line">├── 007.验证码生成接口分析.mp4</span><br><span class="line">├── 008.验证码配置分析.mp4</span><br><span class="line">├── 009.验证码的校验.mp4</span><br><span class="line">├── 010.登录流程分析.mp4</span><br><span class="line">├── 011.登录JWT校验.mp4</span><br><span class="line">├── 012.SpringSecurity登录配置分析.mp4</span><br><span class="line">├── 013.自定义多数据源思路分析.mp4</span><br><span class="line">├── 014.自定义多数据源-1.mp4</span><br><span class="line">├── 015.自定义多数据源-2.mp4</span><br><span class="line">├── 016.手动实现网页上切换数据源.mp4</span><br><span class="line">├── 017.RateLimiter注解简介.mp4</span><br><span class="line">├── 018.自定义限流注解-1.mp4</span><br><span class="line">├── 019.自定义限流注解-2.mp4</span><br><span class="line">├── 020.RuoYi脚手架限流注解分析.mp4</span><br><span class="line">├── 021.幂等性实现的6中思路梳理.mp4</span><br><span class="line">├── 022.实现JSON格式参数多次读取.mp4</span><br><span class="line">├── 023.防止请求重复提交.mp4</span><br><span class="line">├── 024.防止接口重复提交注解分析.mp4</span><br><span class="line">├── 025.数据权限注解介绍.mp4</span><br><span class="line">├── 026.数据权限案例准备工作.mp4</span><br><span class="line">├── 027.权限注解实现思路分析.mp4</span><br><span class="line">├── 028.自定义数据权限注解@DataScope.mp4</span><br><span class="line">├── 029.数据权限过滤角色数据.mp4</span><br><span class="line">├── 030.数据权限过滤用户数据.mp4</span><br><span class="line">├── 031.数据权限注解总结.mp4</span><br><span class="line">├── 032.操作日志记录.mp4</span><br><span class="line">├── 033.修改日志方法名称.mp4</span><br><span class="line">├── 034.理解Aware接口.mp4</span><br><span class="line">├── 035.自定义注解+AOP整理.mp4</span><br><span class="line">├── 036.TienChin细化到按钮的权限实现思路.mp4</span><br><span class="line">├── 037.理解TienChin项目中的权限注解.mp4</span><br><span class="line">├── 038.角色和权限概念梳理.mp4</span><br><span class="line">├── 039.Spring Security中角色和权限的区别.mp4</span><br><span class="line">├── 040.SpringSecurity中的权限处理逻辑.mp4</span><br><span class="line">├── 041.SpringSecurity中使用权限通配符.mp4</span><br><span class="line">├── 042.SpringSecurity另一种权限判断方式.mp4</span><br><span class="line">├── 043.使用POSTMAN测试项目接口.mp4</span><br><span class="line">├── 【号外001】.登录流程解析.mp4</span><br><span class="line">├── 【号外002】.分布式事务开篇.mp4</span><br><span class="line">├── 【号外003】.分布式事务seata三个核心概念.mp4</span><br><span class="line">├── 【号外004】.分布式事务seata四种事务模式.mp4</span><br><span class="line">├── 【号外005】.分布式事务seata中的at模式.mp4</span><br><span class="line">├── 【号外006】.分布式事务安装seata-server.mp4</span><br><span class="line">├── 【号外007】.分布式事务seata-at模式实战.mp4</span><br><span class="line">├── 【号外008】.分布式事务seata-at模式总结.mp4</span><br><span class="line">├── 【号外009】.多数据源如何处理事务问题.mp4</span><br><span class="line">├── 【号外010】.分布式事务seata-at模式补充.mp4</span><br><span class="line">├── 【号外011】.分布式事务seata-tcc模式简介.mp4</span><br><span class="line">├── 【号外012】.分布式事务seata-tcc模式实战-1.mp4</span><br><span class="line">├── 【号外013】.分布式事务seata-tcc模式实战-2.mp4</span><br><span class="line">├── 【号外014】.分布式事务seata-tcc模式实战-3.mp4</span><br><span class="line">├── 【号外015】.分布式事务seata-tcc模式实战-4.mp4</span><br><span class="line">├── 【号外016】.分布式事务seata-tcc总结.mp4</span><br><span class="line">├── 【号外017】.分布式事务seata-xa简介.mp4</span><br><span class="line">├── 【号外018】.MySQL中的XA事务实践.mp4</span><br><span class="line">├── 【号外019】.分布式事务seata-xa模式实战-1.mp4</span><br><span class="line">├── 【号外020】.分布式事务seata-xa模式实战-2.mp4</span><br><span class="line">├── 【号外021】.分布式事务总结-1.mp4</span><br><span class="line">├── 【号外022】.分布式事务总结-2 copy.mp4</span><br><span class="line">└── 【号外022】.分布式事务总结-2.mp4</span><br></pre></td></tr></table></figure><p><strong>目前已经录的总共是 44+22=66 集，约 18 个小时。</strong>和五月底的时候相比，集数和时间基本上都翻倍了。</p><p>可能有小伙伴还不知道我最近在录这个项目，因此这里再跟大伙啰嗦一下：</p><blockquote><p>TienChin 项目是一个健身会员管理系统，基于 RuoYi-Vue 脚手架来做，使用 Spring Boot + Vue3 开发，不同于之前的 vhr 是一个脚手架，TienChin 项目的业务完成度会超过 90%。这个项目的视频教程整体上分为两大块：第一块主要是解剖 RuoYi-Vue 脚手架，让小伙伴们能够熟练掌握这个脚手架的使用，在这个过程中，我会讲许多技术点，前面列出来的视频目录都属于这一部分的内容，这个过程中我不会带领大家从头敲一边 RuoYi-Vue 脚手架，但是对项目里边的一些技术点，会有针对性的讲解，也会写一些案例来帮助大家理解这些技术点。第二块内容则主要是业务功能的完成了，业务功能涉及到的技术点主要有：SpringBoot、Vue、MyBatis Plus、MySQL、Redis、Flowable、EasyExcel、NodeJS 等。</p></blockquote><p>目前更新的视频主要出于第一阶段。</p><p>这些视频基本上都是工作之余录制的，大部分都是早上 6-8 点之间录的，所以是付费视频，视频定价是 399，不过目前可以 7 折上车，也就是 279，之前买过 vhr 的小伙伴可在此基础上再优惠 30，即只要 249，随着视频的录制，内容越来越多，折扣力度也会变小，这个之前买过 vhr 视频得小伙伴应该都懂，无论你何时上车，当前价格都是你在未来能够买到的最低价格啦。</p><p>录视频还是蛮辛苦的，一方面赚点小钱养家糊口，另一方面也是小伙伴们的认可在支撑着我把这件事做下去，得瑟一下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/996.jpg" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/995.jpg" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/013.jpeg" alt></p><p><strong>有时候看小伙伴们发的，我真的特别动容。虽然大家看我天天写文章聊技术，其实我在生活中除了工作之外很少和人交流，真的特别想给这些爱学习会说话的小伙伴们点赞，他们肯定会混的比我好。</strong></p><hr><p>好啦，最后再统一回答大家几个关于视频的问题。</p><p><strong>Q1：视频放在哪里，怎么播放？</strong></p><p>视频放在百度网盘上，下载后使用专用播放器授权播放，专用播放器一机一码一人一码。至于小伙伴们推荐的阿里网盘等，由于空间、分享文件类型等限制，并无法用在 TienChin 项目视频分发中。</p><p><strong>Q2：视频为什么不支持在线播放？</strong></p><p>在线播放的话，一般都是和平台合作，但是国内大家所熟知的平台如慕课网、csdn 学院等，平台抽成基本都是 4 成起，松哥之前还合作了一个平台拿 6 成（也就是假如 100 块钱的课，平台拿走 60）。这样的分成比例无形中会推高课程的价格，现在我自己分发，所以才能做到<strong>低价</strong>。同时为了防止视频泄露，松哥对视频做了加密处理，这样可以确保大家不会在其他地方看到一模一样的免费视频，加密后的视频只能使用专用播放器播放，因此不支持在线播放。</p><p><strong>Q3：视频可以试看吗？</strong></p><p>其实我最近在公号发的视频，大家都可以当作试看的，反正的录视频风格是不变的。和 vhr 视频相比，现在的 TienChin 项目视频音质是杠杠滴，下面三个视频是我最近发过的，小伙伴们可以当作试看的视频：</p><p><strong>Q4：可以砍价吗？</strong></p><p>不可以，这个价格已经很便宜了，没法砍了（悄悄告诉大家，从 vhr 到 tienchin，暂时没有人砍价成功过）。</p><p><strong>Q5：视频多久更新完毕？</strong></p><p>其实如果单纯带着大家写业务功能，这个项目不会花太多时间，这样虽然大家完整的做了一个项目，但是技术却不会有太多长进，而我则希望在这个过程中多整点活，能让小伙伴们技术也有一些提升，这样内容一加，最终何时更完就不确定了。不过，有一点是可以保证的，每周至少一次，每周至少更一个半小时精品视频。</p><p><strong>Q6：知识星球是什么？</strong></p><p>星球主要是用来更新视频下载地址的地方，大家在这套视频教程时遇到问题时，都可以在星球上提问，小伙伴们购买视频后，我会拉你进星球。</p><p><strong>Q7：这套视频适合哪些人看？</strong></p><p>学习这套视频，首先需要有 SSM 基础，如果没有，可以在公众号后台回复 SSM，有我录制的免费视频教程；另外也需要一些 Spring Boot 基础和 Vue 基础，要是没接触过 Spring Boot 和 Vue 的话，那么建议先看看 vhr，戳这里：<a href="https://mp.weixin.qq.com/s/aIyP77WrrswWNXaueBXj7w" target="_blank" rel="noopener">Spring Boot+Vue+微人事视频教程</a></p><p><strong>Q8：看视频有问题可以问吗？</strong></p><p>参考 Q6。</p><p><strong>Q9：这套视频我能学到啥？</strong></p><p>TienChin 项目基于 RuoYi-Vue 脚手架（Spring Boot+Vue3），这套视频学完后，小伙伴们对 RuoYi-Vue 脚手架基本上就融会贯通了，并能在 RuoYi-Vue 脚手架上随心所欲的开发常规的企业后台应用。并且对于分布式事务 seata、Flowable 流程引擎等框架也能熟练使用并掌握其原理，对于 Redis 在项目中的各种实际应用场景也会有较好的掌握。</p><hr><p><strong>好啦，七折 279 抄底就在今天啦！</strong></p><p>P.s.：可能有小伙伴加了松哥多个微信，其实没有必要重复添加，任意一个都能找到我。当然，如果你还没有松哥微信，扫码加微信，转账 279 上车吧（买过 vhr 的小伙伴可在此基础上再优惠 ¥30 哦）～</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220504151134.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离上次跟小伙伴们汇报 TienChin 项目视频进度已经过去一个月啦，今天是 6 月 30 号，再来汇报一下这个月视频的进展。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
  </entry>
  
</feed>
