<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江南一点雨</title>
  
  <subtitle>江南一点雨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.javaboy.org/"/>
  <updated>2022-07-17T17:04:29.815Z</updated>
  <id>http://www.javaboy.org/</id>
  
  <author>
    <name>江南一点雨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手把手教你玩多数据源动态切换！</title>
    <link href="http://www.javaboy.org/2022/0510/dynamic-datasource.html"/>
    <id>http://www.javaboy.org/2022/0510/dynamic-datasource.html</id>
    <published>2022-05-09T16:45:50.000Z</published>
    <updated>2022-07-17T17:04:29.815Z</updated>
    
    <content type="html"><![CDATA[<p>为了提高应用的可靠性，多数据源现在也很常见，数据库可以搭建双 M 结构，这个松哥之前也发文和大家分享过<a href="https://mp.weixin.qq.com/s/mfpmQ3VeBazDEzzgw4lwWw" target="_blank" rel="noopener">如何搭建双 M 结构的主从备份？</a>，那么 Java 代码里该如何操作多数据源呢？</p><p>我在 19 年的时候写过几篇文章教大家配置 JdbcTemplate、MyBatis 以及 JPA 中的多数据源（公众号江南一点雨后台回复 666 有相关的资料），不过那几篇文章的整体思路都是弄多个 Dao 层实例，然后手动选择用哪个实例，这样总感觉不太方便。</p><a id="more"></a><p>MyBatis-Plus 也提供了相应的工具，感兴趣的小伙伴可以自行尝试。</p><p>今天我想带领小伙伴们，利用 AOP 的思想，自己来写一个简单的多数据源切换工具。</p><h2 id="1-预备知识"><a href="#1-预备知识" class="headerlink" title="1. 预备知识"></a>1. 预备知识</h2><p>想要自定义动态数据源切换，得先了解一个类 <code>AbstractRoutingDataSource</code>：</p><p><code>AbstractRoutingDataSource</code> 是在 Spring2.0.1 中引入的（注意是 Spring2.0.1 不是 Spring Boot2.0.1，所以这其实也算是 Spring 一个非常古老的特性了）, 该类充当了 DataSource 的路由中介，它能够在运行时, 根据某种 key 值来动态切换到真正的 DataSource 上。</p><p>大致的用法就是你提前准备好各种数据源，存入到一个 Map 中，Map 的 key 就是这个数据源的名字，Map 的 value 就是这个具体的数据源，然后再把这个 Map 配置到 <code>AbstractRoutingDataSource</code> 中，最后，每次执行数据库查询的时候，拿一个 key 出来，<code>AbstractRoutingDataSource</code> 会找到具体的数据源去执行这次数据库操作。</p><p>大致思路就是这样。</p><p>接下来我们就来看看怎么玩。</p><h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h2><p>首先我们创建一个 Spring Boot 项目，引入 Web、MyBatis 以及 MySQL 依赖，项目创建成功之后，再手动加入 Druid 和 AOP 依赖，如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这块呢其实没啥好说的，都是常规操作。</p><h2 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h2><p>接下来我们创建一个 application-druid.yaml 用来配置我们的数据源信息，如下：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 数据源配置</span></span><br><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line"><span class="hljs-attr">    datasource:</span></span><br><span class="line"><span class="hljs-attr">        type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="hljs-attr">        driverClassName:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="hljs-attr">        ds:</span></span><br><span class="line">            <span class="hljs-comment"># 主库数据源，默认 master 不能变</span></span><br><span class="line"><span class="hljs-attr">            master:</span></span><br><span class="line"><span class="hljs-attr">                url:</span> <span class="hljs-attr">jdbc:mysql://127.0.0.1:3306/test08?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="hljs-attr">                username:</span> <span class="hljs-string">root</span></span><br><span class="line"><span class="hljs-attr">                password:</span> <span class="hljs-number">123</span></span><br><span class="line">            <span class="hljs-comment"># 从库数据源</span></span><br><span class="line"><span class="hljs-attr">            slave:</span></span><br><span class="line"><span class="hljs-attr">                url:</span> <span class="hljs-attr">jdbc:mysql://127.0.0.1:3306/test07?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="hljs-attr">                username:</span> <span class="hljs-string">root</span></span><br><span class="line"><span class="hljs-attr">                password:</span> <span class="hljs-number">123</span></span><br><span class="line">        <span class="hljs-comment"># 初始连接数</span></span><br><span class="line"><span class="hljs-attr">        initialSize:</span> <span class="hljs-number">5</span></span><br><span class="line">        <span class="hljs-comment"># 最小连接池数量</span></span><br><span class="line"><span class="hljs-attr">        minIdle:</span> <span class="hljs-number">10</span></span><br><span class="line">        <span class="hljs-comment"># 最大连接池数量</span></span><br><span class="line"><span class="hljs-attr">        maxActive:</span> <span class="hljs-number">20</span></span><br><span class="line">        <span class="hljs-comment"># 配置获取连接等待超时的时间</span></span><br><span class="line"><span class="hljs-attr">        maxWait:</span> <span class="hljs-number">60000</span></span><br><span class="line">        <span class="hljs-comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line"><span class="hljs-attr">        timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span></span><br><span class="line">        <span class="hljs-comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line"><span class="hljs-attr">        minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span></span><br><span class="line">        <span class="hljs-comment"># 配置一个连接在池中最大生存的时间，单位是毫秒</span></span><br><span class="line"><span class="hljs-attr">        maxEvictableIdleTimeMillis:</span> <span class="hljs-number">900000</span></span><br><span class="line">        <span class="hljs-comment"># 配置检测连接是否有效</span></span><br><span class="line"><span class="hljs-attr">        validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span></span><br><span class="line"><span class="hljs-attr">        testWhileIdle:</span> <span class="hljs-literal">true</span></span><br><span class="line"><span class="hljs-attr">        testOnBorrow:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-attr">        testOnReturn:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-attr">        druid:</span></span><br><span class="line"><span class="hljs-attr">            webStatFilter:</span></span><br><span class="line"><span class="hljs-attr">                enabled:</span> <span class="hljs-literal">true</span></span><br><span class="line"><span class="hljs-attr">            statViewServlet:</span></span><br><span class="line"><span class="hljs-attr">                enabled:</span> <span class="hljs-literal">true</span></span><br><span class="line">                <span class="hljs-comment"># 设置白名单，不填则允许所有访问</span></span><br><span class="line"><span class="hljs-attr">                allow:</span></span><br><span class="line"><span class="hljs-attr">                url-pattern:</span> <span class="hljs-string">/druid/*</span></span><br><span class="line">                <span class="hljs-comment"># 控制台管理用户名和密码</span></span><br><span class="line"><span class="hljs-attr">                login-username:</span> <span class="hljs-string">javaboy</span></span><br><span class="line"><span class="hljs-attr">                login-password:</span> <span class="hljs-number">123456</span></span><br><span class="line"><span class="hljs-attr">            filter:</span></span><br><span class="line"><span class="hljs-attr">                stat:</span></span><br><span class="line"><span class="hljs-attr">                    enabled:</span> <span class="hljs-literal">true</span></span><br><span class="line">                    <span class="hljs-comment"># 慢SQL记录</span></span><br><span class="line"><span class="hljs-attr">                    log-slow-sql:</span> <span class="hljs-literal">true</span></span><br><span class="line"><span class="hljs-attr">                    slow-sql-millis:</span> <span class="hljs-number">1000</span></span><br><span class="line"><span class="hljs-attr">                    merge-sql:</span> <span class="hljs-literal">true</span></span><br><span class="line"><span class="hljs-attr">                wall:</span></span><br><span class="line"><span class="hljs-attr">                    config:</span></span><br><span class="line"><span class="hljs-attr">                        multi-statement-allow:</span> <span class="hljs-literal">true</span></span><br></pre></td></tr></table></figure><p>都是 Druid 的常规配置，也没啥好说的，唯一需要注意的是我们整个配置文件的格式。ds 里边配置我们的所有数据源，每个数据源都有一个名字，master 是默认数据源的名字，不可修改，其他数据源都可以自定义名字。最后面我们还配置了 Druid 的监控功能，如果小伙伴们还不懂 Druid 的监控功能，可以查看<a href="https://mp.weixin.qq.com/s/5rsknrXgizcaUEs7yufUBQ" target="_blank" rel="noopener">Spring Boot 如何监控 SQL 运行情况？</a>。</p><p>不过小伙伴们知道，YAML 配置不像 properties 配置可以通过 <code>@PropertySource</code> 注解加载自定义的配置文件，YAML 配置没有类似的加载机制。不过工具是死的人是活的，我们可以利用 Spring Boot 的 profile 机制来加载这个自定义的 application-druid.yaml 配置文件，具体做法就是在 application.yaml 中加一行配置，如下：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line"><span class="hljs-attr">  profiles:</span></span><br><span class="line"><span class="hljs-attr">    active:</span> <span class="hljs-string">druid</span></span><br></pre></td></tr></table></figure><p>接下来我们还需要提供一个配置类，将这个配置文件的内容加载到配置类中，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"spring.datasource"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidProperties</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> initialSize;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> minIdle;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxActive;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxWait;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> timeBetweenEvictionRunsMillis;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> minEvictableIdleTimeMillis;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxEvictableIdleTimeMillis;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> String validationQuery;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> testWhileIdle;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> testOnBorrow;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> testOnReturn;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> Map&lt;String, Map&lt;String, String&gt;&gt; ds;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title">dataSource</span><span class="hljs-params">(DruidDataSource datasource)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">/** 配置初始化大小、最小、最大 */</span></span><br><span class="line">        datasource.setInitialSize(initialSize);</span><br><span class="line">        datasource.setMaxActive(maxActive);</span><br><span class="line">        datasource.setMinIdle(minIdle);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/** 配置获取连接等待超时的时间 */</span></span><br><span class="line">        datasource.setMaxWait(maxWait);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/** 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 */</span></span><br><span class="line">        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/** 配置一个连接在池中最小、最大生存的时间，单位是毫秒 */</span></span><br><span class="line">        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);</span><br><span class="line">        datasource.setMaxEvictableIdleTimeMillis(maxEvictableIdleTimeMillis);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        datasource.setValidationQuery(validationQuery);</span><br><span class="line">        <span class="hljs-comment">/** 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 */</span></span><br><span class="line">        datasource.setTestWhileIdle(testWhileIdle);</span><br><span class="line">        <span class="hljs-comment">/** 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 */</span></span><br><span class="line">        datasource.setTestOnBorrow(testOnBorrow);</span><br><span class="line">        <span class="hljs-comment">/** 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 */</span></span><br><span class="line">        datasource.setTestOnReturn(testOnReturn);</span><br><span class="line">        <span class="hljs-keyword">return</span> datasource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getInitialSize</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> initialSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setInitialSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialSize)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.initialSize = initialSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMinIdle</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> minIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMinIdle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minIdle)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.minIdle = minIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxActive</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> maxActive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMaxActive</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxActive)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.maxActive = maxActive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxWait</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> maxWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMaxWait</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxWait)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.maxWait = maxWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTimeBetweenEvictionRunsMillis</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> timeBetweenEvictionRunsMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTimeBetweenEvictionRunsMillis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> timeBetweenEvictionRunsMillis)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMinEvictableIdleTimeMillis</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> minEvictableIdleTimeMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMinEvictableIdleTimeMillis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minEvictableIdleTimeMillis)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxEvictableIdleTimeMillis</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> maxEvictableIdleTimeMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMaxEvictableIdleTimeMillis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxEvictableIdleTimeMillis)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.maxEvictableIdleTimeMillis = maxEvictableIdleTimeMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getValidationQuery</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> validationQuery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setValidationQuery</span><span class="hljs-params">(String validationQuery)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.validationQuery = validationQuery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isTestWhileIdle</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> testWhileIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTestWhileIdle</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> testWhileIdle)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.testWhileIdle = testWhileIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isTestOnBorrow</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> testOnBorrow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTestOnBorrow</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> testOnBorrow)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.testOnBorrow = testOnBorrow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isTestOnReturn</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> testOnReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTestOnReturn</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> testOnReturn)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.testOnReturn = testOnReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> Map&lt;String, Map&lt;String, String&gt;&gt; getDs() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDs</span><span class="hljs-params">(Map&lt;String, Map&lt;String, String&gt;&gt; ds)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.ds = ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置类没啥好说的，我们配置的多个数据源我将之读取到了一个名为 ds 的 Map 中，将来就根据这个 Map 中的数据来构造数据源。</p><h2 id="4-加载数据源"><a href="#4-加载数据源" class="headerlink" title="4. 加载数据源"></a>4. 加载数据源</h2><p>接下来我们要根据配置文件来加载数据源。加载方式如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DynamicDataSourceProvider</span> </span>&#123;</span><br><span class="line">    String DEFAULT_DATASOURCE = <span class="hljs-string">"master"</span>;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 加载所有的数据源</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function">Map&lt;String, DataSource&gt; <span class="hljs-title">loadDataSources</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-meta">@EnableConfigurationProperties</span>(DruidProperties.class)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YamlDynamicDataSourceProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DynamicDataSourceProvider</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    DruidProperties druidProperties;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, DataSource&gt; <span class="hljs-title">loadDataSources</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, DataSource&gt; ds = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(druidProperties.getDs().size());</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            Map&lt;String, Map&lt;String, String&gt;&gt; map = druidProperties.getDs();</span><br><span class="line">            Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">            <span class="hljs-keyword">for</span> (String s : keySet) &#123;</span><br><span class="line">                DruidDataSource dataSource = (DruidDataSource) DruidDataSourceFactory.createDataSource(map.get(s));</span><br><span class="line">                ds.put(s, druidProperties.dataSource(dataSource));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载的核心工作在 YamlDynamicDataSourceProvider 类中完成的。该类中有一个 loadDataSources 方法表示读取所有的数据源对象。数据源的相关属性都在 druidProperties 对象中，我们先根据基本的数据库连接信息创建一个 DataSource 对象，然后再调用 <code>druidProperties#dataSource</code> 方法为这些数据源连接池配置其他的属性（最大连接数、最小空闲数等），最后，以 key-value 的形式将数据源存入一个 Map 集合中，每一个数据源的 key 就是你在 YAML 中配置的数据源名称。</p><h2 id="5-数据源切换"><a href="#5-数据源切换" class="headerlink" title="5. 数据源切换"></a>5. 数据源切换</h2><p>对于当前数据库操作使用哪个数据源？我们有很多种不同的设置方案，当然最为省事的办法是把当前使用的数据源信息存入到 ThreadLocal 中，ThreadLocal 的特点，简单说就是在哪个线程中存入的数据，在哪个线程才能取出来，换一个线程就取不出来了，这样可以确保多线程环境下的数据安全。</p><p>先来一个简单的工具类，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicDataSourceContextHolder</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger(DynamicDataSourceContextHolder.class);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 使用ThreadLocal维护变量，ThreadLocal为每个使用该变量的线程提供独立的变量副本，</span></span><br><span class="line"><span class="hljs-comment">     * 所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;String&gt; CONTEXT_HOLDER = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 设置数据源的变量</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDataSourceType</span><span class="hljs-params">(String dsType)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="hljs-string">"切换到&#123;&#125;数据源"</span>, dsType);</span><br><span class="line">        CONTEXT_HOLDER.set(dsType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获得数据源的变量</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getDataSourceType</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> CONTEXT_HOLDER.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 清空数据源变量</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clearDataSourceType</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        CONTEXT_HOLDER.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们自定义一个注解用来标记当前的数据源，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="hljs-meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> DataSource &#123;</span><br><span class="line">    <span class="hljs-function">String <span class="hljs-title">dataSourceName</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> DynamicDataSourceProvider.DEFAULT_DATASOURCE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@AliasFor</span>(<span class="hljs-string">"dataSourceName"</span>)</span><br><span class="line">    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> DynamicDataSourceProvider.DEFAULT_DATASOURCE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个注解将来加在 Service 层的方法上，使用该注解的时候，需要指定一个数据源名称，不指定的话，默认就使用 master 作为数据源。</p><p>我们还需要通过 AOP 来解析当前的自定义注解，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Aspect</span></span><br><span class="line"><span class="hljs-meta">@Order</span>(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceAspect</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Pointcut</span>(<span class="hljs-string">"@annotation(org.javaboy.demo.annotation.DataSource)"</span></span><br><span class="line">            + <span class="hljs-string">"|| @within(org.javaboy.demo.annotation.DataSource)"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dsPc</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Around</span>(<span class="hljs-string">"dsPc()"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint point)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        DataSource dataSource = getDataSource(point);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (Objects.nonNull(dataSource)) &#123;</span><br><span class="line">            DynamicDataSourceContextHolder.setDataSourceType(dataSource.dataSourceName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> point.proceed();</span><br><span class="line">        &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// 销毁数据源 在执行方法之后</span></span><br><span class="line">            DynamicDataSourceContextHolder.clearDataSourceType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获取需要切换的数据源</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">(ProceedingJoinPoint point)</span> </span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class="line">        DataSource dataSource = AnnotationUtils.findAnnotation(signature.getMethod(), DataSource.class);</span><br><span class="line">        <span class="hljs-keyword">if</span> (Objects.nonNull(dataSource)) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> dataSource;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> AnnotationUtils.findAnnotation(signature.getDeclaringType(), DataSource.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先，我们在 dsPc() 方法上定义了切点，我们拦截下所有带有 <code>@DataSource</code> 注解的方法，同时由于该注解也可以加在类上，如果该注解加在类上，就表示类中的所有方法都使用该数据源。</li><li>接下来我们定义了一个环绕通知，首先根据当前的切点，调用 getDataSource 方法获取到 <code>@DataSource</code> 注解，这个注解可能来自方法上也可能来自类上，方法上的优先级高于类上的优先级。如果拿到的注解不为空，则我们在 DynamicDataSourceContextHolder 中设置当前的数据源名称，设置完成后进行方法的调用；如果拿到的注解为空，那么就直接进行方法的调用，不再设置数据源了（将来会自动使用默认的数据源）。最后记得方法调用完成后，从 ThreadLocal 中移除数据源。</li></ol><h2 id="6-定义动态数据源"><a href="#6-定义动态数据源" class="headerlink" title="6. 定义动态数据源"></a>6. 定义动态数据源</h2><p>接下来我们来自定义一个动态数据源：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    DynamicDataSourceProvider dynamicDataSourceProvider;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DynamicDataSource</span><span class="hljs-params">(DynamicDataSourceProvider dynamicDataSourceProvider)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.dynamicDataSourceProvider = dynamicDataSourceProvider;</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(dynamicDataSourceProvider.loadDataSources());</span><br><span class="line">        <span class="hljs-keyword">super</span>.setTargetDataSources(targetDataSources);</span><br><span class="line">        <span class="hljs-keyword">super</span>.setDefaultTargetDataSource(dynamicDataSourceProvider.loadDataSources().get(DynamicDataSourceProvider.DEFAULT_DATASOURCE));</span><br><span class="line">        <span class="hljs-keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">determineCurrentLookupKey</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        String dataSourceType = DynamicDataSourceContextHolder.getDataSourceType();</span><br><span class="line">        <span class="hljs-keyword">return</span> dataSourceType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是我们文章开头所说的 <code>AbstractRoutingDataSource</code> 了，该类有一个方法名为 determineCurrentLookupKey，当需要使用数据源的时候，系统会自动调用该方法，获取当前数据源的标记，如 master 或者 slave 或者其他，拿到标记之后，就可以据此获取到一个数据源了。</p><p>当我们配置 DynamicDataSource 的时候，需要配置两个关键的参数，<strong>一个是 setTargetDataSources</strong>，这个就是当前所有的数据源，把当前所有的数据源都告诉给 AbstractRoutingDataSource，这些数据源都是 key-value 的形式（将来根据 determineCurrentLookupKey 方法返回的 key 就可以获取到具体的数据源了）；<strong>另一个方法是 setDefaultTargetDataSource</strong>，这个就是默认的数据源，当我们执行一个数据库操作的时候，如果没有指定数据源（例如 Service 层的方法没有加 @DataSource 注解），那么默认就使用这个数据源。</p><p>最后，再将这个 bean 注册到 Spring 容器中，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    DynamicDataSourceProvider dynamicDataSourceProvider;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">DynamicDataSource <span class="hljs-title">dynamicDataSource</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DynamicDataSource(dynamicDataSourceProvider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 去除数据源监控页面的广告</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> properties</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-meta">@ConditionalOnProperty</span>(name = <span class="hljs-string">"spring.datasource.druid.statViewServlet.enabled"</span>, havingValue = <span class="hljs-string">"true"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">removeDruidFilterRegistrationBean</span><span class="hljs-params">(DruidStatProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// 获取web监控页面的参数</span></span><br><span class="line">        DruidStatProperties.StatViewServlet config = properties.getStatViewServlet();</span><br><span class="line">        <span class="hljs-comment">// 提取common.js的配置路径</span></span><br><span class="line">        String pattern = config.getUrlPattern() != <span class="hljs-keyword">null</span> ? config.getUrlPattern() : <span class="hljs-string">"/druid/*"</span>;</span><br><span class="line">        String commonJsPattern = pattern.replaceAll(<span class="hljs-string">"\\*"</span>, <span class="hljs-string">"js/common.js"</span>);</span><br><span class="line">        <span class="hljs-comment">// 创建filter进行过滤</span></span><br><span class="line">        Filter filter = <span class="hljs-keyword">new</span> Filter() &#123;</span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(javax.servlet.FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="hljs-function">                    <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                String text = Utils.readFromResource(<span class="hljs-string">"support/http/resources/js/common.js"</span>);</span><br><span class="line">                text = text.replace(<span class="hljs-string">"this.buildFooter();"</span>, <span class="hljs-string">""</span>);</span><br><span class="line">                response.getWriter().write(text);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        FilterRegistrationBean registrationBean = <span class="hljs-keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registrationBean.setFilter(filter);</span><br><span class="line">        registrationBean.addUrlPatterns(commonJsPattern);</span><br><span class="line">        <span class="hljs-keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面，我们还配置了一个过滤器，这个过滤器的目的是去除 Druid 监控页面的阿里广告，具体原理参考<a href="https://mp.weixin.qq.com/s/5rsknrXgizcaUEs7yufUBQ" target="_blank" rel="noopener">Spring Boot 如何监控 SQL 运行情况？</a>一文。</p><h2 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h2><p>好啦，大功告成，我们再来测试一下，写一个 UserMapper：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Mapper</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"select count(*) from user"</span>)</span><br><span class="line">    <span class="hljs-function">Integer <span class="hljs-title">count</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个很简单的数据库查询操作。</p><p>再来一个 service：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@DataSource</span>(<span class="hljs-string">"master"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">master</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> userMapper.count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@DataSource</span>(<span class="hljs-string">"slave"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">slave</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> userMapper.count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>@DataSource</code> 注解来指定具体操作的数据源，如果没有使用该注解指定，默认就使用 master 数据源。</p><p>最后去单元测试中测一下，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@SpringBootTest</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicDatasourceDemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Test</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"userService.master() = "</span> + userService.master());</span><br><span class="line">        System.out.println(<span class="hljs-string">"userService.slave() = "</span> + userService.slave());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我这里 master 和 slave 分别对应了不同的库，这里查询会展示出不同的结果。</p><h2 id="8-小结"><a href="#8-小结" class="headerlink" title="8. 小结"></a>8. 小结</h2><p>知其然知其所以然！</p><p>好啦，公众号江南一点雨后台回复 <strong>dynamic_datasource</strong>，获取本文源码下载链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了提高应用的可靠性，多数据源现在也很常见，数据库可以搭建双 M 结构，这个松哥之前也发文和大家分享过&lt;a href=&quot;https://mp.weixin.qq.com/s/mfpmQ3VeBazDEzzgw4lwWw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何搭建双 M 结构的主从备份？&lt;/a&gt;，那么 Java 代码里该如何操作多数据源呢？&lt;/p&gt;
&lt;p&gt;我在 19 年的时候写过几篇文章教大家配置 JdbcTemplate、MyBatis 以及 JPA 中的多数据源（公众号江南一点雨后台回复 666 有相关的资料），不过那几篇文章的整体思路都是弄多个 Dao 层实例，然后手动选择用哪个实例，这样总感觉不太方便。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>说一个大家都知道的 Spring Boot 小技巧</title>
    <link href="http://www.javaboy.org/2022/0509/springboot-yaml-profile.html"/>
    <id>http://www.javaboy.org/2022/0509/springboot-yaml-profile.html</id>
    <published>2022-05-08T16:45:37.000Z</published>
    <updated>2022-07-17T17:04:21.287Z</updated>
    
    <content type="html"><![CDATA[<p>手动狗头</p><p>小伙伴们都知道，在 Spring Boot 中，配置文件是 application.properties 或者 application.yaml，这个名为 application 的配置文件，无论是 properties 格式还是 yaml 格式，都会被 Spring Boot 容器自动加载。</p><a id="more"></a><p>然而很多时候我们会有一些额外的配置，这些额外的配置可能并非系统配置，所以我们不想将之放在 application.properties 或者 application.yaml 中，想搞一个单独的配置文件来处理，这时候就分情况了。</p><h2 id="1-properties"><a href="#1-properties" class="headerlink" title="1. properties"></a>1. properties</h2><p>对于 properties 格式的配置文件，我们可以随心所欲的自定义配置文件，例如在 resources 目录下新建一个 data.properties 的配置文件用来配置数据库的信息，像下面这样：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.username=root</span><br><span class="line">db.password=123</span><br><span class="line">db.url=jdbc:mysql:///vhr</span><br></pre></td></tr></table></figure><p>然后在 Java 代码中，利用 <code>@PropertySource</code> 和 <code>@ConfigurationProperties</code> 两个注解来加载配置文件：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PropertySource</span>(<span class="hljs-string">"classpath:data.properties"</span>)</span><br><span class="line"><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"db"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbProperties</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String username;</span><br><span class="line">    <span class="hljs-keyword">private</span> String password;</span><br><span class="line">    <span class="hljs-keyword">private</span> String url;</span><br><span class="line">    <span class="hljs-comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@PropertySource</code> 就是用来加载一个自定义的 properties 配置文件，这是 Spring 中就有的功能，而不是 Spring Boot 的功能。</p><p>所以，如果你使用了 properties 格式的配置文件，那么就可以非常方便的实现自定义配置文件了，甚至可以将不同的配置文件分门别类，管理的井井有条。</p><p>问题实际上是出在 yaml 这一块。</p><h2 id="2-YAML"><a href="#2-YAML" class="headerlink" title="2. YAML"></a>2. YAML</h2><p>小伙伴们知道，对于 YAML 格式的配置而言，它其实是没有一个类似于 <code>@PropertySource</code> 注解的东西的，也就是说 YAML 配置，你只能写在 application.yaml 中，不能写在其他地方。要是写在其他地方，就没法加载了，其实也不是没法加载，可以自己调用 snakeyaml 包中的类去加载，但是那样太费事了，所以我们期望能够有一个简便的办法来做这件事。</p><p>怎么做呢？</p><p>我们可以利用 Spring Boot 中对于 profile 多环境的处理方式来加载自定义的 YAML 配置。</p><p>大家知道，Spring Boot 中对于多环境的处理方式非常方便，以 yaml 配置为例，我们只需要定义一个名为 <code>application-{profile}.yaml</code> 的配置文件，然后在 application.yaml 中就可以指定这个环境了，利用这个漏洞，就可以非常方便的加载自定义的 yaml 配置了，不过这种方式对自定义的 yaml 配置文件名格式有要求，就是必须是 <code>application-{profile}.yaml</code> 格式的。</p><p>我举一个简单例子吧，例如对于数据库的配置，我想单独搞一个配置文件，那么我们可以新建一个 application-data.yaml 的配置文件，内容如下：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line"><span class="hljs-attr">  datasource:</span></span><br><span class="line"><span class="hljs-attr">    password:</span> <span class="hljs-number">123</span></span><br><span class="line"><span class="hljs-attr">    username:</span> <span class="hljs-string">root</span></span><br><span class="line"><span class="hljs-attr">    url:</span> <span class="hljs-attr">jdbc:mysql:///vhr</span></span><br></pre></td></tr></table></figure><p>然后在 application.yaml 中就像设置环境一样引入这个配置文件，如下：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line"><span class="hljs-attr">  profiles:</span></span><br><span class="line"><span class="hljs-attr">    active:</span> <span class="hljs-string">data</span></span><br></pre></td></tr></table></figure><p>这样就实现了对自定义 yaml 配置文件的加载。</p><p>如果有多个自定义的 yaml 配置，那么也可以一起加载，多个环境之间用 <code>,</code> 隔开即可。</p><p>just this。</p><p>小伙伴们都知道吧嘿嘿。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手动狗头&lt;/p&gt;
&lt;p&gt;小伙伴们都知道，在 Spring Boot 中，配置文件是 application.properties 或者 application.yaml，这个名为 application 的配置文件，无论是 properties 格式还是 yaml 格式，都会被 Spring Boot 容器自动加载。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.javaboy.org/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.javaboy.org/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>一个奇怪的登录需求</title>
    <link href="http://www.javaboy.org/2022/0509/springsecurity-login.html"/>
    <id>http://www.javaboy.org/2022/0509/springsecurity-login.html</id>
    <published>2022-05-08T16:45:26.000Z</published>
    <updated>2022-07-17T17:03:27.020Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>一个奇怪的登录需求。</p><a id="more"></a><p>这是小伙伴们在微信群里的一个提问，我觉得很有意思：</p><p><img src="http://img.itboyhub.com/2021/07/20210927122328.png" alt></p><p>虽然这并非一个典型需求，但是把这个问题解决了，有助于加深大家对于 Spring Security 的理解。</p><p>因此，松哥打算撸一篇文章和大家稍微聊聊这个话题。</p><h2 id="1-问题再现"><a href="#1-问题再现" class="headerlink" title="1. 问题再现"></a>1. 问题再现</h2><p>可能有小伙伴还不明白这个问题，因此我先稍微解释一下。</p><p>当我们登录失败的时候，可能用户名写错，也可能密码写错，但是出于安全考虑，服务端一般不会明确提示是用户名写错了还是密码写错了，而只会给出一个模糊的用户名或者密码写错了。</p><p>然而对于很多新手程序员而言，可能并不了解这样一些“潜规则”，可能会给用户一个明确的提示，明确提示是用户名写错了还是密码写错了。</p><p>为了避免这一情况，Spring Security 通过封装，隐藏了用户名不存在的异常，导致开发者在开发的时候，只能获取到 BadCredentialsException，这个异常既表示用户名不存在，也表示用户密码输入错误。Spring Security 这样做是为了确保我们的系统足够安全。</p><p>然而由于种种原因，有时候我们又希望能够分别获取到用户不存在的异常和密码输入错误的异常，这个时候就需要我们对 Spring Security 进行一些简单的定制了。</p><h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2. 源码分析"></a>2. 源码分析</h2><p>首先我们要先找到问题发生的原因，发生的地方。</p><p>在 Spring Security 中，负责用户校验的工作的类有很多，我这里就不一一列举了（感兴趣的小伙伴可以查看《<a href="https://mp.weixin.qq.com/s/i4qsE1atlKMEcLV22qYjVw" target="_blank" rel="noopener">深入浅出Spring Security</a>》一书），我这里直接说我们涉及到的关键类 <code>AbstractUserDetailsAuthenticationProvider</code>。</p><p>这个类将负责用户名密码的校验工作，具体在 authenticate 方法里边，这个方法本来特别长，我这里只把和本文相关的代码列出来：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (UsernameNotFoundException ex) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.hideUserNotFoundExceptions) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BadCredentialsException(<span class="hljs-keyword">this</span>.messages</span><br><span class="line">.getMessage(<span class="hljs-string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span>, <span class="hljs-string">"Bad credentials"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>retrieveUser 方法就是根据用户登录输入的用户名去查找用户，如果没找到，就会抛出一个 UsernameNotFoundException，这个异常被 catch 之后，会首先判断是否要隐藏这个异常，如果不隐藏，则原异常原封不动抛出来，如果需要隐藏，则抛出一个新的 BadCredentialsException 异常，BadCredentialsException 异常从字面理解就是密码输入错误的异常。</p><p>所以问题的核心就变成了 hideUserNotFoundExceptions 变量了。</p><p>这是一个 Boolean 类型的属性，默认是 true，<code>AbstractUserDetailsAuthenticationProvider</code> 也为该属性提供了 set 方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHideUserNotFoundExceptions</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> hideUserNotFoundExceptions)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.hideUserNotFoundExceptions = hideUserNotFoundExceptions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来修改 hideUserNotFoundExceptions 属性并不难！只要找到 <code>AbstractUserDetailsAuthenticationProvider</code> 的实例，然后调用相应的 set 方法就能修改了。</p><p>现在问题的核心变成了从哪里获取 <code>AbstractUserDetailsAuthenticationProvider</code> 的实例？</p><p>看名字就知道，<code>AbstractUserDetailsAuthenticationProvider</code> 是一个抽象类，所以它的实例其实就是它子类的实例，子类是谁？当然是负责用户密码校验工作的 <code>DaoAuthenticationProvider</code>。</p><p>这个知识点先记住，我们一会会用到。</p><h2 id="3-登录流程"><a href="#3-登录流程" class="headerlink" title="3. 登录流程"></a>3. 登录流程</h2><p>为了弄明白这个问题，我们还需要搞懂 Spring Security 一个大致的认证流程，这个也非常重要。</p><p>首先大家知道，Spring Security 的认证工作主要是由 AuthenticationManager 来完成的，而 AuthenticationManager 则是一个接口，它的实现类是 ProviderManager。简而言之，Spring Security 中具体负责校验工作的是 ProviderManager#authenticate 方法。</p><p>但是校验工作并不是由 ProviderManager 直接完成的，ProviderManager 中管理了若干个 AuthenticationProvider，ProviderManager 会调用它所管理的 AuthenticationProvider 去完成校验工作，如下图：</p><p><img src="http://img.itboyhub.com/2020/07/20200709222237.png" alt></p><p>另一方面，ProviderManager 又分为全局的和局部的。</p><p>当我们登录的时候，首先由局部的 ProviderManager 出场进行用户名密码的校验工作，如果校验成功，那么用户就登录成功了，如果校验失败，则会调用局部 ProviderManager 的 parent，也就是全局 ProviderManager 去完成校验工作，如果全局 ProviderManager 校验成功，就表示用户登录成功，如果全局 ProviderManager 校验失败，就表示用户登录失败，如下图：</p><p><img src="http://img.itboyhub.com/2020/07/20200721164221.png" alt></p><p>OK，有了上面的知识储备，我们再来分析一下我们想要抛出 UsernameNotFoundException 该怎么做。</p><h2 id="4-思路分析"><a href="#4-思路分析" class="headerlink" title="4. 思路分析"></a>4. 思路分析</h2><p>首先我们的用户校验工作在局部的 ProviderManager 中进行，局部的 ProviderManager 中管理了若干个 AuthenticationProvider，这若干个 AuthenticationProvider 中就有可能包含了我们所需要的 DaoAuthenticationProvider。那我们是否需要在这里调用 DaoAuthenticationProvider 的 setHideUserNotFoundExceptions 方法完成属性的修改呢？</p><p>松哥的建议是没必要！</p><p>为什么？</p><p>因为当用户登录的时候，首先去局部的 ProviderManager 中去校验，如果校验成功当然最好；如果校验失败，并不会立马抛出异常，而是去全局的 ProviderManager 中继续校验，这样即使我们在局部 ProviderManager 中抛出了 UsernameNotFoundException 也没用，因为最终这个异常能不能抛出来决定权在全局 ProviderManager 中（如果全局的 ProviderManager 所管理的 DaoAuthenticationProvider 没做任何特殊处理，那么局部 ProviderManager 中抛出来的 UsernameNotFoundException 异常最终还是会被隐藏）。</p><p>所以，我们要做的就是获取全局的 ProviderManager，进而获取到全局 ProviderManager 所管理的 DaoAuthenticationProvider，然后调用其 setHideUserNotFoundExceptions 方法修改相应属性值即可。</p><p>弄明白了原理，代码就简单了。</p><h2 id="5-具体实践"><a href="#5-具体实践" class="headerlink" title="5. 具体实践"></a>5. 具体实践</h2><p>全局 ProviderManager 的修改在 <code>WebSecurityConfigurerAdapter#configure(AuthenticationManagerBuilder)</code> 类中，这里配置的 AuthenticationManagerBuilder 最终用来生成全局的 ProviderManager，所以我们的配置如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DaoAuthenticationProvider daoAuthenticationProvider = <span class="hljs-keyword">new</span> DaoAuthenticationProvider();</span><br><span class="line">        daoAuthenticationProvider.setHideUserNotFoundExceptions(<span class="hljs-keyword">false</span>);</span><br><span class="line">        InMemoryUserDetailsManager userDetailsService = <span class="hljs-keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        userDetailsService.createUser(User.withUsername(<span class="hljs-string">"javaboy"</span>).password(<span class="hljs-string">"&#123;noop&#125;123"</span>).roles(<span class="hljs-string">"admin"</span>).build());</span><br><span class="line">        daoAuthenticationProvider.setUserDetailsService(userDetailsService);</span><br><span class="line">        auth.authenticationProvider(daoAuthenticationProvider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .failureHandler((request, response, exception) -&gt; System.out.println(exception))</span><br><span class="line">                .permitAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的代码就简单了：</p><ol><li>创建一个 DaoAuthenticationProvider 对象。</li><li>调用 DaoAuthenticationProvider 对象的 setHideUserNotFoundExceptions 方法，修改相应的属性值。</li><li>为 DaoAuthenticationProvider 配置用户数据源。</li><li>将 DaoAuthenticationProvider 设置给 auth 对象，auth 将用来生成全局的 ProviderManager。</li><li>在另一个 configure 方法中，我们就配置一下登录回调即可，登录失败的时候，打印异常信息看看。</li></ol><p>行啦。</p><p>接下来启动项目进行测试。输入一个错误的用户名，可以看到 IDEA 控制台会打印出如下信息：</p><p><img src="http://img.itboyhub.com/2021/07/20210923214411.png" alt></p><p>可以看到，UsernameNotFoundException 异常已经抛出来了。</p><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h2><p>好啦，今天就和小伙伴们分享了一下在 Spring Security 中如何抛出 UsernameNotFoundException 异常，虽然这只是一个小众需求，但是可以加深大家对 Spring Security 的理解，感兴趣的小伙伴可以仔细琢磨下。</p><p>题外话：</p><blockquote><p>这个需求还有一个简单的实现方式，就是自定义一个用户不存在的异常，当在 UserDetailsService 中查找用户查找不到时，抛出自定义的异常，这个自定义的异常不会被隐藏，这个比较简单，我就不写代码了，感兴趣的小伙伴可以去试试。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;一个奇怪的登录需求。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringSecurity" scheme="http://www.javaboy.org/categories/SpringSecurity/"/>
    
    
      <category term="SpringSecurity" scheme="http://www.javaboy.org/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>刚出炉的新鲜项目实战视频，赶紧体验一把！</title>
    <link href="http://www.javaboy.org/2022/0508/tienchin-video.html"/>
    <id>http://www.javaboy.org/2022/0508/tienchin-video.html</id>
    <published>2022-05-07T16:44:48.000Z</published>
    <updated>2022-07-17T17:04:17.711Z</updated>
    
    <content type="html"><![CDATA[<p>嚷嚷了一个礼拜的项目视频，终于来啦。</p><p>这次更新了 7 集，合计约一个半小时。</p><p>有的小伙伴可能对录视频的过程不太了解，我跟大家聊聊。</p><a id="more"></a><p>最终录完的视频是一个半小时，可不是说工作时间就是一个半小时。因为并不是所有视频点一下开始录制按钮，呱唧呱唧一顿讲就完事。要真是这样，那录视频也太容易了。</p><p>我这次更新的视频是 5.6-5.7 两天早上 6-8 点之间录的，总共耗时约四个小时，四个小时时间剪出来一个半小时的精品视频，其实我觉得成片率是比较高了。6 号早上是因为视频第四集步骤繁琐，讲了一遍之后，担心小伙伴们照着搞不定，于是我又重新梳理思路，换个思路重新讲一遍，还手动记录了一下步骤，一来一去时间就过去了；有时候出现一个 BUG，不小心爆了个粗，感觉不合适，又得停下来把爆粗内容剪掉；有时候是电脑运行有点慢，我得暂定录制，把视频里的等待时间去掉。。。不胜枚举，所以，小伙伴们看到的一个半小时视频不是一个半小时搞定的，往往花费了很多时间。</p><p>现在我的计划是先带领小伙伴们把脚手架跑起来，然后将脚手架按照我们的项目要求进行改造，改造完成之后，先对脚手架中一些常见的功能进行分析，在这个分析的过程中，加深小伙伴们对这个脚手架的理解，这样方便我们日后开发新功能。</p><p><img src="http://img.itboyhub.com/2021/10/tran/tienchin_01.jpg" alt></p><p>项目地址：</p><ul><li><a href="https://github.com/lenve/tienchin" target="_blank" rel="noopener">https://github.com/lenve/tienchin</a></li></ul><p>欢迎小伙伴们 star，现在 star 就是老粉啦～</p><p>目前这个项目源码所有功能点已经完成了 40% 左右了，有的功能点是比较简单的数据操作，有的业务则比较复杂，需要注意很多细节。那么我在这个项目中，还是希望能和小伙伴们多多分享一些常见的技术，多给小伙伴们整活，尽量在业务之外，多整一些技术点出来，像 MinIO、Flowable 等在这个项目中都会用到。</p><p>好啦不废话了，这次更新的视频链接已经发在星球上了，购买了视频的小伙伴快快微信上私我获取授权码吧～</p><p>对视频感兴趣的小伙伴欢迎微信骚扰哦。</p><p>原价 <strong>399</strong> 现在<strong>五折</strong>就可以入手，只要 <strong>199</strong>。</p><p>之前买过 vhr 的小伙伴，可在此基础上优惠 ¥30，169 即可。</p><p>随着视频的更新，会慢慢恢复原价，所以有需要的小伙伴们抓紧时间啦，松哥手把手带你做 TienChin 项目[机智]～</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220504151134.png" alt></p><p>最后再来一个视频小小体验一把吧～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嚷嚷了一个礼拜的项目视频，终于来啦。&lt;/p&gt;
&lt;p&gt;这次更新了 7 集，合计约一个半小时。&lt;/p&gt;
&lt;p&gt;有的小伙伴可能对录视频的过程不太了解，我跟大家聊聊。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 整合流程引擎 Flowable，so easy！</title>
    <link href="http://www.javaboy.org/2022/0506/springboot-flowable.html"/>
    <id>http://www.javaboy.org/2022/0506/springboot-flowable.html</id>
    <published>2022-05-05T16:44:31.000Z</published>
    <updated>2022-07-17T17:04:24.612Z</updated>
    
    <content type="html"><![CDATA[<p>tienchin 项目出视频啦～松哥手把手教你在 RuoYi-Vue 脚手架上做二次开发，一起做一个完成率超 90% 的项目，戳戳戳这里–&gt;<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247497456&amp;idx=1&amp;sn=982b594d1fb064ea451895a0bbb58efb&amp;chksm=e9c0a490deb72d86599b3daeb50b22ecaa297eaa6ad37578b5e4262f8a65febad5b52f1e1a54#rd" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p><p>为啥想写 flowable 呢？原因很简单，因为最近在录的 tienchin 项目视频会用到，先写一篇文章和大家打打预防针，后面视频再细讲。</p><a id="more"></a><p>流程引擎，也算是一个比较常见的工具了，我们在日常的很多开发中都会用到，当然用的最多的就是 OA 系统了，但是在一些非 OA 系统中，我们也会涉及到，比如一个 CRM 中，可能会有合同管理的需求，合同的审批，也是需要流程引擎的。</p><p>所以今天我们来简单聊聊流程引擎，顺便写一个简单的例子，小伙伴们一起来感受下流程引擎到底是个啥。</p><h2 id="1-流程引擎介绍"><a href="#1-流程引擎介绍" class="headerlink" title="1. 流程引擎介绍"></a>1. 流程引擎介绍</h2><p>Flowable 是一个使用 Java 编写的轻量级业务流程引擎。Flowable 流程引擎可用于部署 BPMN2.0 流程定义（用于定义流程的行业 XML 标准），创建这些流程定义的流程实例，进行查询，访问运行中或历史的流程实例与相关数据，等等。</p><p>Java 领域另一个流程引擎是 Activiti，不过我觉得这两个东西，只要你会使用其中一个，另一个就不在话下。</p><p>咱就不废话了，上代码吧。</p><h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h2><p>首先我们创建一个 Spring Boot 项目，引入 Web、和 MySQL 驱动两个依赖，如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220424172214.png" alt></p><p>项目创建成功之后，我们引入 flowable 依赖，如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.flowable<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flowable-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.7.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个会帮我们做一些自动化配置，默认情况下，所以位于 resources/processes 的流程都会被自动部署。</p><p>接下来我们在 application.yaml 中配置一下数据库连接信息，当项目启动的时候会自动初始化数据库，将来流程引擎运行时候的数据会被自动持久化到数据库中。</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line"><span class="hljs-attr">  datasource:</span></span><br><span class="line"><span class="hljs-attr">    username:</span> <span class="hljs-string">root</span></span><br><span class="line"><span class="hljs-attr">    password:</span> <span class="hljs-number">123</span></span><br><span class="line"><span class="hljs-attr">    url:</span> <span class="hljs-attr">jdbc:mysql:///flowable?serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br></pre></td></tr></table></figure><p>好啦，配置完成后，我们就可以启动项目了。项目启动成功之后，flowable 数据库中就会自动创建如下这些表，将来流程引擎相关的数据都会自动保存到这些表中。</p><p>默认的表比较多，截图只是其中一部分。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220424172908.png" alt></p><h2 id="3-画流程图"><a href="#3-画流程图" class="headerlink" title="3. 画流程图"></a>3. 画流程图</h2><p>画流程图算是比较有挑战的一个步骤了，也是流程引擎使用的关键。官方提供了一些流程引擎绘制工具，这个我就不说了，感兴趣的小伙伴可以自行去体验；IDEA 也自带了一个流程可视化的工具，但是特别难用，我这里也就 不说了。</p><p>这里说一下我常用的 IDEA 插件 <strong>Flowable BPMN visualizer</strong>，如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220424173529.png" alt></p><p>插件怎么安装就不用我教了吧，小伙伴们自行安装即可。</p><p>装好插件之后，我们在 resources 目录下新建 processes 目录，这个目录下的流程文件将来会被自动部署。</p><p>接下来我们在 processes 目录下，新建一个 BPMN 文件（插件装好了就有这个选项了），如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220424173724.png" alt></p><p>我们来画个请假的流程，就叫做 ask_for_leave.bpmn20.xml，注意最后面的 <code>.bpmn20.xml</code> 是固定后缀。</p><p>文件创建出来之后，右键单击，选择 View BPMN(Flowable) Diagram,就打开了可视化页面了，我们就可以来绘制自己的流程图了。</p><p>我的请假流程画出来是这样：</p><p><img src="http://img.itboyhub.com/2021/10/tran/diagram.png" alt></p><p>员工发起一个请假流程，首先是组长审核，组长审核通过了，就进入到经理审核，经理审核通过了，这个流程就结束了，如果组长审核未通过或者经理审核未通过，则流程给员工发送一个请假失败的通知，流程结束。</p><p>我们来看下这个流程对应的 XML 文件，一些流程细节会在 XML 文件中体现出来，如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">process</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ask_for_leave"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ask_for_leave"</span> <span class="hljs-attr">isExecutable</span>=<span class="hljs-string">"true"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">userTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"leaveTask"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"请假"</span> <span class="hljs-attr">flowable:assignee</span>=<span class="hljs-string">"#&#123;leaveTask&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">userTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"zuzhangTask"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"组长审核"</span> <span class="hljs-attr">flowable:assignee</span>=<span class="hljs-string">"#&#123;zuzhangTask&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">userTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"managerTask"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"经理审核"</span> <span class="hljs-attr">flowable:assignee</span>=<span class="hljs-string">"#&#123;managerTask&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">exclusiveGateway</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"managerJudgeTask"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">exclusiveGateway</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"zuzhangJudeTask"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">endEvent</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"endLeave"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"结束"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">startEvent</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"startLeave"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"开始"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"flowStart"</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"startLeave"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"leaveTask"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modeFlow"</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"leaveTask"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"zuzhangTask"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"zuzhang_go"</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"zuzhangJudeTask"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"managerTask"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"通过"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">conditionExpression</span> <span class="hljs-attr">xsi:type</span>=<span class="hljs-string">"tFormalExpression"</span>&gt;</span>&lt;![CDATA[$&#123;checkResult=='通过'&#125;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">conditionExpression</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"zuzhang_reject"</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"zuzhangJudeTask"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"sendMail"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"拒绝"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">conditionExpression</span> <span class="hljs-attr">xsi:type</span>=<span class="hljs-string">"tFormalExpression"</span>&gt;</span>&lt;![CDATA[$&#123;checkResult=='拒绝'&#125;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">conditionExpression</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"jugdeFlow"</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"managerTask"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"managerJudgeTask"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"flowEnd"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"通过"</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"managerJudgeTask"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"endLeave"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">conditionExpression</span> <span class="hljs-attr">xsi:type</span>=<span class="hljs-string">"tFormalExpression"</span>&gt;</span>&lt;![CDATA[$&#123;checkResult=='通过'&#125;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">conditionExpression</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"rejectFlow"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"拒绝"</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"managerJudgeTask"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"sendMail"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">conditionExpression</span> <span class="hljs-attr">xsi:type</span>=<span class="hljs-string">"tFormalExpression"</span>&gt;</span>&lt;![CDATA[$&#123;checkResult=='拒绝'&#125;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">conditionExpression</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">serviceTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sendMail"</span> <span class="hljs-attr">flowable:exclusive</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"发送失败提示"</span> <span class="hljs-attr">isForCompensation</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">flowable:class</span>=<span class="hljs-string">"org.javaboy.flowable.AskForLeaveFail"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"endFlow"</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"sendMail"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"askForLeaveFail"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">endEvent</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"askForLeaveFail"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"请假失败"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">sequenceFlow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"zuzhangTask_zuzhangJudeTask"</span> <span class="hljs-attr">sourceRef</span>=<span class="hljs-string">"zuzhangTask"</span> <span class="hljs-attr">targetRef</span>=<span class="hljs-string">"zuzhangJudeTask"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结合 XML 文件我来和大家解释一下这里涉及到的 Flowable 中的组件，我们来看下：</p><ul><li><code>&lt;process&gt;</code> ： 表示一个完整的工作流程。</li><li><code>&lt;startEvent&gt;</code> ： 工作流中起点位置，也就是图中的绿色按钮。</li><li><code>&lt;endEvent&gt;</code> ： 工作流中结束位置，也就是图中的红色按钮。</li><li><code>&lt;userTask&gt;</code> ： 代表一个任务审核节点（组长、经理等角色），这个节点上有一个 <code>flowable:assignee</code> 属性，这表示这个节点该由谁来处理，将来在 Java 代码中调用的时候，我们需要指定对应的处理人的 ID 或者其他唯一标记。</li><li><code>&lt;serviceTask&gt;</code>：这是服务任务，在具体的实现中，这个任务可以做任何事情。</li><li><code>&lt;exclusiveGateway&gt;</code> ： 逻辑判断节点，相当于流程图中的菱形框。</li><li><code>&lt;sequenceFlow&gt;</code> ：链接各个节点的线条，sourceRef 属性表示线的起始节点，targetRef 属性表示线指向的节点，我们图中的线条都属于这种。</li></ul><p>流程图这块松哥和大家稍微说一下，咋一看这个图挺复杂很难画，但是实际上只要你认认真真去捋一捋这里边的各个属性，基本上很快就明白到底是怎么一回事，我也相信各位小伙伴都有这样的悟性。</p><h2 id="4-开发接口"><a href="#4-开发接口" class="headerlink" title="4. 开发接口"></a>4. 开发接口</h2><p>接下来我们写几个接口，来体验一把流程引擎。</p><p>在正式体验之前，我们先来熟悉几个类，这几个类我们一会写代码会用到。</p><h3 id="4-1-Java-类梳理"><a href="#4-1-Java-类梳理" class="headerlink" title="4.1 Java 类梳理"></a>4.1 Java 类梳理</h3><ul><li>ProcessDefinition</li></ul><p>这个最好理解，就是流程的定义，也就相当于规范，每个 ProcessDefinition 都会有一个 id。</p><ul><li>ProcessInstance</li></ul><p>这个就是流程的一个实例。简单来说，ProcessDefinition 相当于是类，而 ProcessInstance 则相当于是根据类 new 出来的对象。</p><ul><li>Activity</li></ul><p>Activity 是流程标准规范 BPMN2.0 里面的规范，流程中的每一个步骤都是一个 Activity。</p><ul><li>Execution</li></ul><p>Execution 的含义是流程的执行线路，通过 Execution 可以获得当前 ProcessInstance 当前执行到哪个 Activity了。</p><ul><li>Task</li></ul><p>Task 就是当前要做的工作。</p><p>实际上这里涉及到的东西比较多，不过我们今天先整一个简单的例子，所以上面这些知识点暂时够用了。</p><h3 id="4-2-查看流程图"><a href="#4-2-查看流程图" class="headerlink" title="4.2 查看流程图"></a>4.2 查看流程图</h3><p>在正式开始之前，我们先准备一个接口，用来查看流程图的实时执行情况，这样方便我们查看流程到底执行到哪一步了。</p><p>具体的代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    RepositoryService repositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/pic"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showPic</span><span class="hljs-params">(HttpServletResponse resp, String processId)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ProcessInstance pi = runtimeService.createProcessInstanceQuery().processInstanceId(processId).singleResult();</span><br><span class="line">        <span class="hljs-keyword">if</span> (pi == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Execution&gt; executions = runtimeService</span><br><span class="line">                .createExecutionQuery()</span><br><span class="line">                .processInstanceId(processId)</span><br><span class="line">                .list();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; activityIds = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; flows = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="hljs-keyword">for</span> (Execution exe : executions) &#123;</span><br><span class="line">            List&lt;String&gt; ids = runtimeService.getActiveActivityIds(exe.getId());</span><br><span class="line">            activityIds.addAll(ids);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 生成流程图</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        BpmnModel bpmnModel = repositoryService.getBpmnModel(pi.getProcessDefinitionId());</span><br><span class="line">        ProcessEngineConfiguration engconf = processEngine.getProcessEngineConfiguration();</span><br><span class="line">        ProcessDiagramGenerator diagramGenerator = engconf.getProcessDiagramGenerator();</span><br><span class="line">        InputStream in = diagramGenerator.generateDiagram(bpmnModel, <span class="hljs-string">"png"</span>, activityIds, flows, engconf.getActivityFontName(), engconf.getLabelFontName(), engconf.getAnnotationFontName(), engconf.getClassLoader(), <span class="hljs-number">1.0</span>, <span class="hljs-keyword">false</span>);</span><br><span class="line">        OutputStream out = <span class="hljs-keyword">null</span>;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];</span><br><span class="line">        <span class="hljs-keyword">int</span> legth = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            out = resp.getOutputStream();</span><br><span class="line">            <span class="hljs-keyword">while</span> ((legth = in.read(buf)) != -<span class="hljs-number">1</span>) &#123;</span><br><span class="line">                out.write(buf, <span class="hljs-number">0</span>, legth);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (in != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就一个工具，没啥好说的，一会大家看完后面的代码，再回过头来看这个接口，很多地方就都懂了。</p><h3 id="4-3-开启一个流程"><a href="#4-3-开启一个流程" class="headerlink" title="4.3 开启一个流程"></a>4.3 开启一个流程</h3><p>为了方便，接下来的代码我们都在单元测试中完成。</p><p>首先我们来开启一个流程，代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String staffId = <span class="hljs-string">"1000"</span>;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 开启一个流程</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">askForLeave</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="hljs-string">"leaveTask"</span>, staffId);</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="hljs-string">"ask_for_leave"</span>, map);</span><br><span class="line">    runtimeService.setVariable(processInstance.getId(), <span class="hljs-string">"name"</span>, <span class="hljs-string">"javaboy"</span>);</span><br><span class="line">    runtimeService.setVariable(processInstance.getId(), <span class="hljs-string">"reason"</span>, <span class="hljs-string">"休息一下"</span>);</span><br><span class="line">    runtimeService.setVariable(processInstance.getId(), <span class="hljs-string">"days"</span>, <span class="hljs-number">10</span>);</span><br><span class="line">    logger.info(<span class="hljs-string">"创建请假流程 processId：&#123;&#125;"</span>, processInstance.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先由员工发起一个请假流程，map 中存放的 leaveTask 是我们在 XML 流程文件中提前定义好的，提前定义好当前这个任务创建之后，该由谁来处理，这里我们是假设由工号为 1000 的员工来发起这样一个请假流程。同时，我们还设置了一些额外信息。ask_for_leave 是我们在 XML 文件中定义的一个 process 的名称。</p><p>好啦，现在我们执行这个单元测试方法，执行完成后，控制台会打印出当前这个流程的 id，我们拿着这个 id 去访问 4.2 小节的接口，结果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220424224313.png" alt></p><p>可以看到，请假用红色的框框起来了，说明当前流程走到了这一步。</p><h3 id="4-4-将请求提交给组长"><a href="#4-4-将请求提交给组长" class="headerlink" title="4.4 将请求提交给组长"></a>4.4 将请求提交给组长</h3><p>接下来，我们就需要将这个请假流程向后推进一步，将请假事务提交给组长，代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String zuzhangId = <span class="hljs-string">"90"</span>;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 提交给组长审批</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">submitToZuzhang</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//员工查找到自己的任务，然后提交给组长审批</span></span><br><span class="line">    List&lt;Task&gt; list = taskService.createTaskQuery().taskAssignee(staffId).orderByTaskId().desc().list();</span><br><span class="line">    <span class="hljs-keyword">for</span> (Task task : list) &#123;</span><br><span class="line">        logger.info(<span class="hljs-string">"任务 ID：&#123;&#125;；任务处理人：&#123;&#125;；任务是否挂起：&#123;&#125;"</span>, task.getId(), task.getAssignee(), task.isSuspended());</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="hljs-comment">//提交给组长的时候，需要指定组长的 id</span></span><br><span class="line">        map.put(<span class="hljs-string">"zuzhangTask"</span>, zuzhangId);</span><br><span class="line">        taskService.complete(task.getId(), map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们利用 staffId 查找到当前员工的 id，进而找到当前员工需要执行的任务，遍历这个任务，调用 taskService.complete 方法将任务提交给组长，注意在 map 中指定组长的 id。</p><p>提交完成后，我们再去看流程图片，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220424224852.png" alt></p><p>可以看到，流程图走到组长审批了。</p><h3 id="4-5-组长审批"><a href="#4-5-组长审批" class="headerlink" title="4.5 组长审批"></a>4.5 组长审批</h3><p>组长现在有两种选择，同意或者拒绝，同意的代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 组长审批-批准</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">zuZhangApprove</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Task&gt; list = taskService.createTaskQuery().taskAssignee(zuzhangId).orderByTaskId().desc().list();</span><br><span class="line">    <span class="hljs-keyword">for</span> (Task task : list) &#123;</span><br><span class="line">        logger.info(<span class="hljs-string">"组长 &#123;&#125; 在审批 &#123;&#125; 任务"</span>, task.getAssignee(), task.getId());</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="hljs-comment">//组长审批的时候，如果是同意，需要指定经理的 id</span></span><br><span class="line">        map.put(<span class="hljs-string">"managerTask"</span>, managerId);</span><br><span class="line">        map.put(<span class="hljs-string">"checkResult"</span>, <span class="hljs-string">"通过"</span>);</span><br><span class="line">        taskService.complete(task.getId(), map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过组长的 id 查询组长的任务，同意的话，需要指定经理，也就是这个流程下一步该由谁来处理。</p><p>拒绝的代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 组长审批-拒绝</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">zuZhangReject</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Task&gt; list = taskService.createTaskQuery().taskAssignee(zuzhangId).orderByTaskId().desc().list();</span><br><span class="line">    <span class="hljs-keyword">for</span> (Task task : list) &#123;</span><br><span class="line">        logger.info(<span class="hljs-string">"组长 &#123;&#125; 在审批 &#123;&#125; 任务"</span>, task.getAssignee(), task.getId());</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="hljs-comment">//组长审批的时候，如果是拒绝，就不需要指定经理的 id</span></span><br><span class="line">        map.put(<span class="hljs-string">"checkResult"</span>, <span class="hljs-string">"拒绝"</span>);</span><br><span class="line">        taskService.complete(task.getId(), map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拒绝的话，就没那么多事了，直接设置 checkResult 为拒绝即可。</p><p>假设这里执行了同意，那么流程图如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220424225717.png" alt></p><h3 id="4-6-经理审批"><a href="#4-6-经理审批" class="headerlink" title="4.6 经理审批"></a>4.6 经理审批</h3><p>经理审批和组长审批差不多，只不过经理这里是最后一步了，不需要再指定下一位处理人了，同意的代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 经理审批自己的任务-批准</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">managerApprove</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Task&gt; list = taskService.createTaskQuery().taskAssignee(managerId).orderByTaskId().desc().list();</span><br><span class="line">    <span class="hljs-keyword">for</span> (Task task : list) &#123;</span><br><span class="line">        logger.info(<span class="hljs-string">"经理 &#123;&#125; 在审批 &#123;&#125; 任务"</span>, task.getAssignee(), task.getId());</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="hljs-string">"checkResult"</span>, <span class="hljs-string">"通过"</span>);</span><br><span class="line">        taskService.complete(task.getId(), map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拒绝代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 经理审批自己的任务-拒绝</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">managerReject</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Task&gt; list = taskService.createTaskQuery().taskAssignee(managerId).orderByTaskId().desc().list();</span><br><span class="line">    <span class="hljs-keyword">for</span> (Task task : list) &#123;</span><br><span class="line">        logger.info(<span class="hljs-string">"经理 &#123;&#125; 在审批 &#123;&#125; 任务"</span>, task.getAssignee(), task.getId());</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="hljs-string">"checkResult"</span>, <span class="hljs-string">"拒绝"</span>);</span><br><span class="line">        taskService.complete(task.getId(), map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-拒绝流程"><a href="#4-7-拒绝流程" class="headerlink" title="4.7 拒绝流程"></a>4.7 拒绝流程</h3><p>如果组长拒绝了或者经理拒绝了，我们也有相应的处理方案，首先在 XML 流程文件定义时，如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">serviceTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sendMail"</span> <span class="hljs-attr">flowable:exclusive</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"发送失败提示"</span> <span class="hljs-attr">isForCompensation</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">flowable:class</span>=<span class="hljs-string">"org.javaboy.flowable.AskForLeaveFail"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如果请假被拒绝，会进入到这个 serviceTask，serviceTask 对应的处理类是 org.javaboy.flowable.AskForLeaveFail，该类的代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AskForLeaveFail</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">JavaDelegate</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(DelegateExecution execution)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"请假失败。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是请假失败会进入到这个方法中，现在我们就可以在这个方法中该干嘛干嘛了。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>好啦，一个简单的请假流程，希望能带小伙伴们入门 flowable，公众后台回复 flowable，获取本文案例。</p><p>好啦，后面 tienchin 项目视频中我们再看看这个 flowable 在项目中如何使用：戳戳戳这里–&gt;<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247497456&amp;idx=1&amp;sn=982b594d1fb064ea451895a0bbb58efb&amp;chksm=e9c0a490deb72d86599b3daeb50b22ecaa297eaa6ad37578b5e4262f8a65febad5b52f1e1a54#rd" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tienchin 项目出视频啦～松哥手把手教你在 RuoYi-Vue 脚手架上做二次开发，一起做一个完成率超 90% 的项目，戳戳戳这里–&amp;gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;amp;mid=2247497456&amp;amp;idx=1&amp;amp;sn=982b594d1fb064ea451895a0bbb58efb&amp;amp;chksm=e9c0a490deb72d86599b3daeb50b22ecaa297eaa6ad37578b5e4262f8a65febad5b52f1e1a54#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TienChin 项目配套视频来啦&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;为啥想写 flowable 呢？原因很简单，因为最近在录的 tienchin 项目视频会用到，先写一篇文章和大家打打预防针，后面视频再细讲。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.javaboy.org/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.javaboy.org/tags/SpringBoot/"/>
    
      <category term="Flowable" scheme="http://www.javaboy.org/tags/Flowable/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security 中的权限注解很神奇吗？</title>
    <link href="http://www.javaboy.org/2022/0505/springsecurity-annotation.html"/>
    <id>http://www.javaboy.org/2022/0505/springsecurity-annotation.html</id>
    <published>2022-05-04T16:44:14.000Z</published>
    <updated>2022-07-17T17:03:34.536Z</updated>
    
    <content type="html"><![CDATA[<p>tienchin 项目出视频啦～松哥手把手教你在 RuoYi-Vue 脚手架上做二次开发，一起做一个完成率超 90% 的项目，戳戳戳这里–&gt;<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247497456&amp;idx=1&amp;sn=982b594d1fb064ea451895a0bbb58efb&amp;chksm=e9c0a490deb72d86599b3daeb50b22ecaa297eaa6ad37578b5e4262f8a65febad5b52f1e1a54#rd" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p><a id="more"></a><p>最近有个小伙伴在微信群里问 Spring Security 权限注解的问题：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220504205033.png" alt></p><p>很多时候事情就是这么巧，松哥最近在做的 tienchin 也是基于注解来处理权限问题的，所以既然大家有这个问题，咱们就一块来聊聊这个话题。</p><p>当然一些基础的知识我就不讲了，对于 Spring Security 基本用法尚不熟悉的小伙伴，可在公众号后台回复 ss，有原创的系列教程。</p><h2 id="1-具体用法"><a href="#1-具体用法" class="headerlink" title="1. 具体用法"></a>1. 具体用法</h2><p>先来看看 Spring Security 权限注解的具体用法，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:channel:query')"</span>)</span><br><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/list"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title">getChannelList</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    startPage();</span><br><span class="line">    List&lt;Channel&gt; list = channelService.list();</span><br><span class="line">    <span class="hljs-keyword">return</span> getDataTable(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于上面这样，意思就是说，当前用户需要具备 <code>tienchin:channel:query</code> 权限，才能执行当前的接口方法。</p><p>那么要搞明白 @PreAuthorize 注解的原理，我觉得得从两个方面入手：</p><ol><li>首先明白 Spring 中提供的 SpEL。</li><li>其次搞明白 Spring Security 中对方法注解的处理规则。</li></ol><p>我们一个一个来看。</p><h2 id="2-SpEL"><a href="#2-SpEL" class="headerlink" title="2. SpEL"></a>2. SpEL</h2><p>Spring Expression Language（简称 SpEL）是一个支持查询和操作运行时对象导航图功能的强大的表达式语言。它的语法类似于传统 EL，但提供额外的功能，最出色的就是函数调用和简单字符串的模板函数。</p><p>SpEL 给 Spring 社区提供一种简单而高效的表达式语言，一种可贯穿整个 Spring 产品组的语言。这种语言的特性基于 Spring 产品的需求而设计，这是它出现的一大特色。</p><p>在我们离不开 Spring 框架的同时，其实我们也已经离不开 SpEL 了，因为它太好用、太强大了，SpEL 在整个 Spring 家族中也处于一个非常重要的位置。但是很多时候，我们对它的只了解一个大概，其实如果你系统的学习过 SpEL，那么上面 Spring Security 那个注解其实很好理解。</p><p>我先通过一个简单的例子来和大家捋一捋 SpEL。</p><p>为了省事，我就创建一个 Spring Boot 工程来和大家演示，创建的时候不用加任何额外的依赖，就最最基础的依赖即可。</p><p>代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String expressionStr = <span class="hljs-string">"1 + 2"</span>;</span><br><span class="line">ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(expressionStr);</span><br></pre></td></tr></table></figure><p>expressionStr 是我们自定义的一个表达式字符串，这个字符串通过一个 ExpressionParser 对象将之解析为一个 Expression，接下来就可以执行这个 exp 了。</p><p>执行的时候有两种方式，对于我们上面这种不带任何额外变量的，我们可以直接执行，直接执行的方式如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object value = exp.getValue();</span><br><span class="line">System.out.println(value.toString());</span><br></pre></td></tr></table></figure><p>这个打印结果为 3。</p><p>我记得之前有个小伙伴在群里问想执行一个字符串表达式，但是不知道怎么办，js 中有 eval 函数很方便，我们 Java 中也有 SpEL，一样也很方便。</p><p>不过很多时候，我们要执行的表达式可能比较复杂，这时候上面这种调用方式就不太够用了。</p><p>此时我们可以为要调用的表达式设置一个上下文环境，这个时候就会用到 EvaluationContext 或者它的子类，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StandardEvaluationContext context = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">System.out.println(exp.getValue(context));</span><br></pre></td></tr></table></figure><p>当然上面这个表达式不需要设置上下文环境，我举一个需要设置上下文环境的例子。</p><p>例如我现在有一个 User 类，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer id;</span><br><span class="line">    <span class="hljs-keyword">private</span> String username;</span><br><span class="line">    <span class="hljs-keyword">private</span> String address;</span><br><span class="line">    <span class="hljs-comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我的表达式是这样：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String expression = <span class="hljs-string">"#user.username"</span>;</span><br><span class="line">ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(expression);</span><br><span class="line">StandardEvaluationContext ctx = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">User user = <span class="hljs-keyword">new</span> User();</span><br><span class="line">user.setAddress(<span class="hljs-string">"广州"</span>);</span><br><span class="line">user.setUsername(<span class="hljs-string">"javaboy"</span>);</span><br><span class="line">user.setId(<span class="hljs-number">99</span>);</span><br><span class="line">ctx.setVariable(<span class="hljs-string">"user"</span>, user);</span><br><span class="line">String value = exp.getValue(ctx, String.class);</span><br><span class="line">System.out.println(<span class="hljs-string">"value = "</span> + value);</span><br></pre></td></tr></table></figure><p>这个表达式就表示获取 user 对象的 username 属性。将来创建一个 user 对象，放到 StandardEvaluationContext 中，并基于此对象执行表达式，就可以打印出来想要的结果。</p><p>如果我们将 user 对象设置为 rootObject，那么表达式中就不需要 user 了，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String expression = <span class="hljs-string">"username"</span>;</span><br><span class="line">ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(expression);</span><br><span class="line">StandardEvaluationContext ctx = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">User user = <span class="hljs-keyword">new</span> User();</span><br><span class="line">user.setAddress(<span class="hljs-string">"广州"</span>);</span><br><span class="line">user.setUsername(<span class="hljs-string">"javaboy"</span>);</span><br><span class="line">user.setId(<span class="hljs-number">99</span>);</span><br><span class="line">ctx.setRootObject(user);</span><br><span class="line">String value = exp.getValue(ctx, String.class);</span><br><span class="line">System.out.println(<span class="hljs-string">"value = "</span> + value);</span><br></pre></td></tr></table></figure><p>表达式就一个 username 字符串，将来执行的时候，会自动从 user 中找到 username 的值并返回。</p><p>当然表达式也可以是方法，例如我在 User 类中添加如下两个方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(Integer age)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello "</span> + username + <span class="hljs-string">";age="</span> + age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello "</span> + username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们就可以通过表达式调用这两个方法，如下：</p><p>调用有参的 sayHello：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String expression = <span class="hljs-string">"sayHello(99)"</span>;</span><br><span class="line">ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(expression);</span><br><span class="line">StandardEvaluationContext ctx = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">User user = <span class="hljs-keyword">new</span> User();</span><br><span class="line">user.setAddress(<span class="hljs-string">"广州"</span>);</span><br><span class="line">user.setUsername(<span class="hljs-string">"javaboy"</span>);</span><br><span class="line">user.setId(<span class="hljs-number">99</span>);</span><br><span class="line">ctx.setRootObject(user);</span><br><span class="line">String value = exp.getValue(ctx, String.class);</span><br><span class="line">System.out.println(<span class="hljs-string">"value = "</span> + value);</span><br></pre></td></tr></table></figure><p>就直接写方法名然后执行就行了。</p><p>调用无参的 sayHello：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String expression = <span class="hljs-string">"sayHello"</span>;</span><br><span class="line">ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(expression);</span><br><span class="line">StandardEvaluationContext ctx = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">User user = <span class="hljs-keyword">new</span> User();</span><br><span class="line">user.setAddress(<span class="hljs-string">"广州"</span>);</span><br><span class="line">user.setUsername(<span class="hljs-string">"javaboy"</span>);</span><br><span class="line">user.setId(<span class="hljs-number">99</span>);</span><br><span class="line">ctx.setRootObject(user);</span><br><span class="line">String value = exp.getValue(ctx, String.class);</span><br><span class="line">System.out.println(<span class="hljs-string">"value = "</span> + value);</span><br></pre></td></tr></table></figure><p>这些就都好懂了。</p><p><strong>甚至，我们的表达式也可以涉及到 Spring 中的一个 Bean，例如我们向 Spring 中注册如下 Bean：</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span>(<span class="hljs-string">"us"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过 SpEL 表达式来调用这个名为 us 的 bean 中的 sayHello 方法，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Autowired</span></span><br><span class="line">BeanFactory beanFactory;</span><br><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    String expression = <span class="hljs-string">"@us.sayHello('javaboy')"</span>;</span><br><span class="line">    ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">    Expression exp = parser.parseExpression(expression);</span><br><span class="line">    StandardEvaluationContext ctx = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">    ctx.setBeanResolver(<span class="hljs-keyword">new</span> BeanFactoryResolver(beanFactory));</span><br><span class="line">    String value = exp.getValue(ctx, String.class);</span><br><span class="line">    System.out.println(<span class="hljs-string">"value = "</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给配置的上下文环境设置一个 bean 解析器，这个 bean 解析器会自动跟进名字从 Spring 容器中找打响应的 bean 并执行对应的方法。</p><p>当然，关于 SpEL 的玩法还有很多，我就不一一列举了。这里主要是想让小伙伴们知道，有这么个技术，方便大家理解 @PreAuthorize 注解的原理。</p><h2 id="3-PreAuthorize"><a href="#3-PreAuthorize" class="headerlink" title="3. @PreAuthorize"></a>3. @PreAuthorize</h2><p>接下来我们就回到 Spring Security 中来看 @PreAuthorize 注解。</p><p>权限的实现方式千千万，又有各种不同的权限模型，然而归结到代码上，无非两种：</p><ul><li>基于 URL 地址的权限处理</li><li>基于方法注解的权限处理</li></ul><p>松哥之前的 vhr 使用的是前者。</p><p>@PreAuthorize 注解当然对应的是后者。这次做的 tienchin 项目就是后者，我们来看一个例子：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:channel:query')"</span>)</span><br><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/list"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title">getChannelList</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    startPage();</span><br><span class="line">    List&lt;Channel&gt; list = channelService.list();</span><br><span class="line">    <span class="hljs-keyword">return</span> getDataTable(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解好说，里边的 <a href="mailto:`@ss.hasPermi" target="_blank" rel="noopener">`@ss.hasPermi</a>(‘tienchin:channel:query’)` 是啥意思呢？</p><ul><li>ss 是一个注册在 Spring 容器中的 bean，对应的类位于 <code>org.javaboy.tienchin.framework.web.service.PermissionService</code> 中。</li><li>很明显，hasPermi 就是这个类中的方法。</li></ul><p>这个 hasPermi 方法的逻辑其实很简单：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermi</span><span class="hljs-params">(String permission)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(permission)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LoginUser loginUser = SecurityUtils.getLoginUser();</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.isNull(loginUser) || CollectionUtils.isEmpty(loginUser.getPermissions())) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> hasPermissions(loginUser.getPermissions(), permission);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermissions</span><span class="hljs-params">(Set&lt;String&gt; permissions, String permission)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> permissions.contains(ALL_PERMISSION) || permissions.contains(StringUtils.trim(permission));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个判断逻辑很简单，就是获取到当前登录的用户，判断当前登录用户的权限集合中是否具备当前请求所需要的权限。具体的判断逻辑没啥好说的，就是看集合中是否存在某个字符串。</p><p>那么这个方法是在哪里调用的呢？</p><p>大家知道，Spring Security 中处理权限的过滤器是 FilterSecurityInterceptor，所有的权限处理最终都会来到这个过滤器中。在这个过滤器中，将会用到各种投票器、表决器之类的工具，这里我就不细说了，之前的 Spring Security 系列教程都有详细介绍。</p><p>在投票器中，我们可以看到专门处理 @PreAuthorize 注解的类 PreInvocationAuthorizationAdviceVoter，我们来看下他里边的核心方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vote</span><span class="hljs-params">(Authentication authentication, MethodInvocation method, Collection&lt;ConfigAttribute&gt; attributes)</span> </span>&#123;</span><br><span class="line">PreInvocationAttribute preAttr = findPreInvocationAttribute(attributes);</span><br><span class="line"><span class="hljs-keyword">if</span> (preAttr == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ACCESS_ABSTAIN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.preAdvice.before(authentication, method, preAttr) ? ACCESS_GRANTED : ACCESS_DENIED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>框架的源码写的就是好，你一看名字就知道他想干嘛了！这里就进入到最后一句，调用了一个 Advice 中到前置通知，来判断权限是否满足：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">before</span><span class="hljs-params">(Authentication authentication, MethodInvocation mi, PreInvocationAttribute attr)</span> </span>&#123;</span><br><span class="line">PreInvocationExpressionAttribute preAttr = (PreInvocationExpressionAttribute) attr;</span><br><span class="line">EvaluationContext ctx = <span class="hljs-keyword">this</span>.expressionHandler.createEvaluationContext(authentication, mi);</span><br><span class="line">Expression preFilter = preAttr.getFilterExpression();</span><br><span class="line">Expression preAuthorize = preAttr.getAuthorizeExpression();</span><br><span class="line"><span class="hljs-keyword">if</span> (preFilter != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">Object filterTarget = findFilterTarget(preAttr.getFilterTarget(), ctx, mi);</span><br><span class="line"><span class="hljs-keyword">this</span>.expressionHandler.filter(filterTarget, preFilter, ctx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> (preAuthorize != <span class="hljs-keyword">null</span>) ? ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx) : <span class="hljs-keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，当你看到这个 before 方法的时候，应该会觉得比较熟悉了吧。</p><ol><li>首先获取到 preAttr 对象，这个对象里边其实就保存着你 @PreAuthorize 注解中的内容。</li><li>接下来跟进当前登录用户信息 authentication 创建一个上下文对象，此时创建出来的上下文对象中就包含了当前用户具备哪些权限。</li><li>获取过滤器（我们这个项目中无）。</li><li>获取到权限注解。</li><li>最后执行表达式，去查看当前用户权限中是否包含请求所需要的权限。</li></ol><p>就这样，是不是很简单？</p><p>好啦，今天就和小伙伴们分享这么多，在松哥近期推出的 tienchin 项目视频中，也会通过视频的形式跟大家细聊这个知识点。</p><p>那视频怎么看？戳这里：<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247497456&amp;idx=1&amp;sn=982b594d1fb064ea451895a0bbb58efb&amp;chksm=e9c0a490deb72d86599b3daeb50b22ecaa297eaa6ad37578b5e4262f8a65febad5b52f1e1a54#rd" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tienchin 项目出视频啦～松哥手把手教你在 RuoYi-Vue 脚手架上做二次开发，一起做一个完成率超 90% 的项目，戳戳戳这里–&amp;gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;amp;mid=2247497456&amp;amp;idx=1&amp;amp;sn=982b594d1fb064ea451895a0bbb58efb&amp;amp;chksm=e9c0a490deb72d86599b3daeb50b22ecaa297eaa6ad37578b5e4262f8a65febad5b52f1e1a54#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TienChin 项目配套视频来啦&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>小伙伴们五一快乐呀～tienchin 项目准备出视频了！</title>
    <link href="http://www.javaboy.org/2022/0504/tienchin-video.html"/>
    <id>http://www.javaboy.org/2022/0504/tienchin-video.html</id>
    <published>2022-05-03T16:44:01.000Z</published>
    <updated>2022-07-17T17:03:46.487Z</updated>
    
    <content type="html"><![CDATA[<p>放假最开心的时候其实就是 4.29 当天了，摸一天鱼，假期还有五天，还是“完整”的，以后每过一天，假期就少一天，焦虑就多一分，到今天，假期到了最后一天，焦虑也达到顶峰。</p><a id="more"></a><p>小伙伴们五一在干嘛呀？松哥五一去了潮汕，虽然在广东呆了好多年，但是活动范围一直仅限于珠三角地区，粤东粤西都没怎么玩过，想着以后要是有机会，想去广东的每一个县城都去走走看看，体验一下风土人情，这次就先去粤东吧。</p><p>汕头老城区不大，一些网红美食主要集中在这个区域，不过感觉网红店很多时候并不怎么样，不仅要排队而且味道也往往让人失望，反而是随缘的路边小店往往能给人惊喜，所以这一路吃了不少路边小店。</p><p>晚上去了一个比较冷门的地方叫铸钱洞清云禅寺，我在网上看汕头还有一个青云禅寺，名字很像，我去的是带三点水的。那个地方山脚有龙泉寺，半山腰有一个铁林禅寺，山顶有铸钱洞清云禅寺。关于铸钱洞的传说，民间流传有诸多个版本，有说是古时“海盗”窝居和藏宝处，牵连“梅林湖沉船，狮子岩出米”附近其它景点；还有一说为宋末元初陈万言组织桑浦山乡民造反举义抗击元番，在这里打铁、造钱而得名的。</p><p>这里的寺庙修的特别宏伟壮丽，号称汕头小故宫：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220504144534.png" alt></p><p>爬到山顶也可以鸟瞰汕头市区，感觉这个铸钱洞清云禅寺算是这次去的最满意的一个地方了。</p><p>还有其他一些零零碎碎的景点就不一一说了，汕头，一句话，值得一去。</p><p>在汕头玩了两天，本来打算第三天去潮州，主要是想去看看韩愈在潮州留下的足迹，当时韩愈因上书《谏迎佛骨》被贬为八千里外的潮州刺史，韩愈从长安出发，走到长安东边的蓝田时写下了《左迁至蓝关示侄孙湘》：</p><p>一封朝奏九重天，夕贬潮阳路八千。<br>欲为圣明除弊事，肯将衰朽惜残年！<br>云横秦岭家何在？雪拥蓝关马不前。<br>知汝远来应有意，好收吾骨瘴江边。</p><p>作为蓝田人对于这段历史当然是再熟悉不过了，所以特别想去看看韩愈当年在潮州留下的足迹。不过很多小伙伴知道，松哥最近基于 RuoYi-Vue 做一个健身会员管理系统（<a href="https://github.com/lenve/tienchin" target="_blank" rel="noopener">https://github.com/lenve/tienchin</a>），也是忙里偷闲在做，实在不敢在外玩的太久，所以潮州就留着下次再去吧。</p><p>五一剩下的时间就在家做这个项目了，目前已经完成了渠道管理、促销活动以及线索管理，小伙伴们可以从 GitHub 上下载这个项目的源码运行体验下，我这里截几张图大家来看下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/tienchin_01.jpg" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/tienchin_02.jpg" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/tienchin_03.jpg" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/tienchin_04.jpg" alt></p><p>代码结构如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/2022-05-0411.29.57.png" alt></p><p>这几个项目我会写几篇文章来介绍大致的开发过程，之前也已经连续发了四篇文章了，传送门：</p><ol><li><a href="https://mp.weixin.qq.com/s/pqQNZ8lL9rfxm1XNyVTSHA" target="_blank" rel="noopener">前后端分离 JWT 登录实践</a></li><li><a href="https://mp.weixin.qq.com/s/zo0fu4qmGTV4pSb5wiIC_w" target="_blank" rel="noopener">基于 RuoYi-Vue 做一个健身会员管理系统</a></li><li><a href="https://mp.weixin.qq.com/s/lWA0tZ_LxNdG8q9GB7xDZA" target="_blank" rel="noopener">趁热打铁，整一个新功能出来</a></li><li><a href="https://mp.weixin.qq.com/s/-RWEpQXC2J9Hss3i5GUyEw" target="_blank" rel="noopener">继续继续，再整一个促销活动管理，文件导入导出都有了！</a></li></ol><p>之前松哥做 vhr（<a href="https://github.com/lenve/vhr）" target="_blank" rel="noopener">https://github.com/lenve/vhr）</a> 的时候，目标是一个脚手架，所以里边所做的业务功能并不多，最近这个 tienchin 则不同。<strong>因为有一个关系比较好又特别 strong 的小伙伴，想开一个健身工作室，我自告奋勇说给你搞一个简单的会员系统。。。于是就有了这个 tienchin 项目。所以这个项目将来的完成度会比较高，开源部分完成度将超过 90%</strong>，也就是大部分功能都做了。</p><p>项目涉及到的技术点有：</p><ul><li>SpringBoot</li><li>Vue</li><li>MySQL</li><li>Redis</li><li>Flowable</li><li>EasyExcel</li><li>NodeJS</li><li>…</li></ul><p>类似于 vhr，这个项目也会有文档来介绍开发思路。</p><p>不过，还是有各位小伙伴问松哥能不能针对这个 tienchin 项目也像 vhr 那样整一个视频教程。很多看过vhr视频的小伙伴都知道vhr视频都是我早上六点起来上班前录的，录视频需要花费大量的时间和精力，所以一开始我是拒绝的。</p><p>但是后来问的小伙伴多了，让我又不得不重新考虑这个问题，我也在问自己能不能出一个视频手把手带领小伙伴们 DIY 若依这个项目，因为很多小伙伴可能在公司都有用过这个脚手架，但是由于种种原因，并不能做到随心所欲的做自己需要的功能。</p><p>因此，经过慎重考虑后，我决定还是整一套这样的视频，手把手带领小伙伴们做这个 tienchin 项目。</p><p>在这个视频里边我不会带领大家从头去敲若依的脚手架，但是会带领大家去改若依这个脚手架，让小伙伴们能在若依这个脚手架的基础上随心所欲的开发自己想要的功能，直至最终开发出一个相对完整的 tienchin 项目。其实我还是原来那句话，<strong>如果你看过 vhr</strong>，若依这个项目其实很容易懂，换句话说，看过 vhr 视频，再来看这次的视频，会很容易懂。</p><p>做录视频这个决定还是用了很大决心的，回想起 2019 年录视频的那段日子，真的是太疯狂了，早上五点五十起床，十分钟收拾好，6 点开始录视频，录到 8 点半，然后出发去公司（我就住在公司附近），晚上下班后，再把早上录制的视频进行剪辑整理，这样的日子持续了小半年才结束，不过好在那次的视频获得了小伙伴们的认可：</p><p><img src="http://img.itboyhub.com/2020/03/video-5.png" alt><br><img src="http://img.itboyhub.com/2020/03/video-6.jpg" alt><br><img src="http://img.itboyhub.com/2020/03/video-7.jpg" alt><br><img src="http://img.itboyhub.com/2020/03/video-8.jpg" alt></p><p>和当年的 vhr 视频一样，这次视频我也是采用周更的方式，每周至少更一次，每次至少 1 小时精品视频，争取带领小伙伴们做一个完成度超 90% 的项目，5 月 8 号开始更新视频，视频将在星球上更新。</p><p>由于可预见的辛苦，所以这套视频也是付费的，目前暂定价格 ¥199，不排除像 vhr 一样后面慢慢涨价。不过不管当前什么价格，凡是购买过 vhr 项目的小伙伴来买这个视频统一都会在当前价格上优惠 ¥30。购买视频后，我会拉你进星球，关于视频的问题都可以在星球上讨论，购买方式还是老样子，加微信发红包即可，如果你已经有松哥微信了，直接在微信上私我就可以了，就不用加下面这个微信了。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220504151134.png" alt></p><p>好啦，小伙伴们五一快乐呀～</p><p>5 月 8 号将迎来本项目视频第一次更新～不见不散！</p><p>P.s. 若依这个脚手架基于 MIT 开源，所以这套视频是没问题的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;放假最开心的时候其实就是 4.29 当天了，摸一天鱼，假期还有五天，还是“完整”的，以后每过一天，假期就少一天，焦虑就多一分，到今天，假期到了最后一天，焦虑也达到顶峰。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>记录锁、间隙锁与 Next-Key Lock</title>
    <link href="http://www.javaboy.org/2022/0429/msyql-next-key-lock.html"/>
    <id>http://www.javaboy.org/2022/0429/msyql-next-key-lock.html</id>
    <published>2022-04-28T16:43:47.000Z</published>
    <updated>2022-07-17T17:03:51.342Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>有小伙伴在微信上表示面试时被问到了 Next-Key Lock 是啥，结果一脸懵逼，那么今天我们来捋一捋 MySQL 中的记录锁、间隙锁以及 Next-Key Lock。</p><a id="more"></a><h2 id="1-Record-Lock"><a href="#1-Record-Lock" class="headerlink" title="1. Record Lock"></a>1. Record Lock</h2><p>Record Lock 也就是我们所说的记录锁，记录锁是对索引记录的锁，注意，它是针对<strong>索引记录</strong>，即它只锁定记录这一行数据。</p><p>例如如下一条 SQL：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span>;</span><br></pre></td></tr></table></figure><p>注意，id 是索引，id 如果不是索引，上面这条 SQL 所加的排他锁就不是一个 Record Lock。</p><p>我们来看如下一个例子：</p><p>首先我们将系统变量 <code>innodb_status_output_locks</code> 设置为 ON，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220403232144.png" alt></p><p>接下来我们执行如下 SQL，锁定一行数据，此时会自动为表加上 IX 锁：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220403232442.png" alt></p><p>接下来我们在一个新的会话中执行如下指令来查看 InnoDB 存储引擎的情况：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engine innodb status\G</span><br></pre></td></tr></table></figure><p>输出的信息很多，我们重点关注 TRANSACTIONS，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220403233056.png" alt></p><p>可以看到：</p><ul><li><code>TABLE LOCK table test08.user trx id 3564804 lock mode IX</code>：这句就是说事务 id 为 3564804 的事务，为 user 表添加了意向排他锁（IX）。</li><li><code>RECORD LOCKS space id 851 page no 3 n bits 80 index PRIMARY of table test08.user trx id 3564804 lock_mode X locks rec but not gap</code>：这个就是一个锁结构的记录，这里的索引是 PRIMARY，加的锁也是正儿八经的记录锁（not gap）。</li></ul><p>看到了 <code>LOCKS REC BUT NOT GAP</code>，就说明这是一个记录锁。</p><p>那么这个 Record Lock 和我们之前所讲的 S 锁以及 X 锁有什么区别呢？S 锁是共享锁，X 锁是排他锁，当我们加 S 锁或者 X 锁的时候，如果用到了索引，锁加在了某一条具体的记录上，那么这个锁也是一个记录锁（其实，记录锁，S 锁，X 锁，概念有一些重复的地方，但是描述的重点不一样）。</p><p>或者也可以理解为记录锁又细分为 S 锁和 X 锁，它们之间的兼容性如下图：</p><table><thead><tr><th style="text-align:center">兼容性</th><th style="text-align:center">S 型记录锁</th><th style="text-align:center">X 型记录锁</th></tr></thead><tbody><tr><td style="text-align:center">S 型记录锁</td><td style="text-align:center">兼容</td><td style="text-align:center">不兼容</td></tr><tr><td style="text-align:center">X 型记录锁</td><td style="text-align:center">不兼容</td><td style="text-align:center">不兼容</td></tr></tbody></table><h2 id="2-Gap-Lock"><a href="#2-Gap-Lock" class="headerlink" title="2. Gap Lock"></a>2. Gap Lock</h2><p>Gap Lock 也叫做间隙锁，它的存在可以解决幻读问题，另外需要注意，Gap Lock 也只在 REPEATABLE READ 隔离级别下有效。先来看看什么是幻读，我们来看如下一个表格：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405102112.png" alt></p><p>有两个会话，A 和 B，先在会话 A 中开启事务，然后查询 age 为 99 的用户总数，注意使用当前读，因为在默认的隔离级别下，默认的快照读并不能读到其他事务提交的数据，至于快照读和当前读的区别，大家参考：<a href="https://mp.weixin.qq.com/s/MJGUSFHrz-2-eEvVtK-4Iw" target="_blank" rel="noopener">S 锁与 X 锁，当前读与快照读！</a>。当会话 A 中第一次查询过后，会话 B 中向数据库添加了一行记录，等到会话 A 中第二次查询的时候，就查到了和第一次查询不一样的结果，这就是幻读（注意幻读专指数据插入引起的不一致）。</p><p><strong>在 MySQL 默认的隔离级别 REPEATABLE READ 下，上图所描述的情况无法复现。无法复现的原因在于，在 MySQL 的 REPEATABLE READ 隔离级别中，它已经帮我们解决了幻读问题，解决的方案就是 Gap Lock。</strong></p><p>大家想想，之所以出现幻读的问题，是因为记录之间存在缝隙，用户可以往这些缝隙中插入数据，这就导致了幻读问题，如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405104923.png" alt></p><p>如图所示，id 之间有缝隙，有缝隙就有漏洞。前面我们所说的记录锁只能锁住一条具体的记录，但是对于记录之间的空隙却无能无力，这就导致了幻读（其他事务可往缝隙中插入数据）。</p><p>现在 Gap Lock 间隙锁，就是要把这些记录之间的间隙也给锁住，间隙锁住了，就不用担心幻读问题了，<strong>这也是 Gap Lock 存在的意义</strong>。</p><p>给一条记录加 Gap Lock，是锁住了这条记录前面的空隙，例如给 id 为 1 的记录加 Gap Lock，锁住的范围是 (-∞,1)，给 id 为 3 的记录加 Gap Lock，锁住的范围是 (1,3)，那么 id 为 10 后面的空隙怎么锁定呢？MySQL 提供了一个 Supremum 表示当前页面中的最大记录，所以最后针对 Supremum 锁住的范围就是 (10,+∞)，这样，所有的间隙都被覆盖到了，由于锁定的是间隙，所以都是开区间。</p><p>那么我们怎么样能看到 Gap Lock 呢？我给大家举一个简单的例子，假设我有如下一张表：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user`</span> (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`username`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`age`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>),</span><br><span class="line">  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`age`</span> (<span class="hljs-string">`age`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>一个简单的表，id 是主键，age 是普通索引，表中有如下几条记录：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405155210.png" alt></p><p>接下来我们执行如下 SQL，锁定一行数据，此时也会产生间隙锁：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405160054.png" alt></p><p>接下来我们在一个新的会话中执行如下指令来查看 InnoDB 存储引擎的情况：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engine innodb status\G</span><br></pre></td></tr></table></figure><p>输出的信息很多，我们重点关注 TRANSACTIONS，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405160201.png" alt></p><p>红色框选中的，就是一个间隙锁的加锁记录，可以看到，在某一个记录之前加了间隙锁。</p><p>这就是间隙锁。非常重要的一点需要大家牢记：<strong>Gap Lock 只在 REPEATABLE READ 隔离级别下有效</strong>。</p><h2 id="3-Next-Key-Lock"><a href="#3-Next-Key-Lock" class="headerlink" title="3. Next-Key Lock"></a>3. Next-Key Lock</h2><p>以下内容都是基于 MySQL 默认的隔离级别 REPEATABLE READ。</p><p>如果我们既想锁定一行，又想锁定行之间的记录，那么就是 Next-Key Lock 了，换言之，Next-Key Lock 是 Record Lock 和 Gap Lock 的结合体。</p><p>正常来说，我们<strong>加行锁的基本单位就是 Next-Key Lock</strong>，即既有记录锁又有间隙锁，但是有时候 Next-Key Lock 会退化，我们通过几个简单的例子来分析一下。</p><p>首先我们来看看 Next-Key Lock 的加锁规则：</p><ol><li>锁的范围是左开右闭。</li><li>如果是唯一非空索引的等值查询，Next-Key Lock 会退化成 Record Lock。</li><li>普通索引上的等值查询，向后遍历时，最后一个不满足等值条件的时候，Next-Key Lock 会退化成 Gap Lock。</li></ol><p>我们通过几个简单的例子来分析下。</p><h3 id="3-1-唯一非空索引"><a href="#3-1-唯一非空索引" class="headerlink" title="3.1 唯一非空索引"></a>3.1 唯一非空索引</h3><p>假设我有一个学生表，学生表中有学生的姓名和成绩，如下：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`student`</span> (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`score`</span> <span class="hljs-keyword">double</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>),</span><br><span class="line">  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-string">`score`</span> (<span class="hljs-string">`score`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>id 是主键，score 是成绩，其中 score 是唯一非空索引。</p><p>现在表中有如下数据：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405161748.png" alt></p><p>假设我们执行如下 SQL：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405162034.png" alt></p><p>在这个例子中，由于 score 是唯一非空索引，所以 Next-Key Lock 会退化成 Record Lock，换句话说，这行 SQL 只给 score 为 90 的记录加锁，不存在 Gap Lock，即我们新开一个会话，插入一条 score 为 88 的记录也是 OK 的。</p><p>不过这里有一个特例，如果锁定的是一个不存在的记录，那么也会产生间隙锁，例如下面这个：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405171719.png" alt></p><p>由于并不存在 score 为 91 的记录，所以这里会产生一个范围为 (90,95) 的间隙锁，我们执行如下 SQL 可以验证：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405171943.png" alt></p><p>可以看到，90.1、94.9 都会被阻塞（我按了 Ctrl C，所以大家看到查询终止）。</p><p>90、95 则不符合唯一非空索引的条件。</p><p>95.1 则可以插入成功。</p><p>没问题。</p><h3 id="3-2-非空索引"><a href="#3-2-非空索引" class="headerlink" title="3.2 非空索引"></a>3.2 非空索引</h3><p>现在我们重新开始，将 score 索引改为普通索引，如下：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`student`</span> (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`score`</span> <span class="hljs-keyword">double</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>),</span><br><span class="line">  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`score`</span> (<span class="hljs-string">`score`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">8</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>数据还是跟前面一样，此时我们来执行如下 SQL：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405163124.png" alt></p><p>我们来分析下。</p><p>此时要锁定的是 id 为 90 的记录，那么首先加间隙锁，上一个 score 为 89，所以这次加的间隙锁范围是 (89,90)，同时要锁定 id 为 90 的记录，所以进一步优化为 (89,90]。</p><p>同时，这里还有一条规则，就是满足条件的上一条记录，也需要被锁住，所以最终的锁范围就是 [89,90]。</p><p>由于 score 不是唯一性索引，所以还需要继续向后查找，找到的下一条记录是 95，由于此时 Next-Key Lock 会退化成 Gap Lock，所以锁定的范围是 (90,95)。综上，最终锁定的范围是 [89,95)。</p><p>接下来我们可以新开一个会话，我们分别尝试添加如下数据看看是否能够添加成功：</p><p>可以看到，score 为 88 是可以的，但是为 89.1 就不行。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405163722.png" alt></p><p>score 为 95 也是可以的，但是为 94.9 就不行。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405163835.png" alt></p><p>再试一下 89 是否可以：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405170523.png" alt></p><p>说明我们上面分析的加锁范围是正确的。</p><p>再来看如下一条 SQL：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405164654.png" alt></p><p>跟前面的案例相比，这次多了 <code>limit 1</code>，limit 1 表示只要一条记录，所以这次查找到 90 之后就不会再往后查找了，那么最终的锁就是间隙锁+一个记录锁，最终的范围就是 [89,90]。</p><p>此时新开一个会话，分别插入 score 为 88.9、89、90、91 的 记录，验证我们上面所分析的加锁范围：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405170833.png" alt></p><p>88.9 和 89 的插入结果跟我们预想的一致。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220405171002.png" alt></p><p>可以看到，这里 90 也能插入，能插入的原因是因为缺乏 90 往后的间隙锁。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>MySQL 中的锁有点繁杂，小伙伴们可以趁着某个周末，花点时间捋一捋，以后面试再遇到这些问题的时候就不头大了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;有小伙伴在微信上表示面试时被问到了 Next-Key Lock 是啥，结果一脸懵逼，那么今天我们来捋一捋 MySQL 中的记录锁、间隙锁以及 Next-Key Lock。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.javaboy.org/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://www.javaboy.org/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>继续继续，再整一个促销活动管理，文件导入导出都有了！</title>
    <link href="http://www.javaboy.org/2022/0428/springboot-sale.html"/>
    <id>http://www.javaboy.org/2022/0428/springboot-sale.html</id>
    <published>2022-04-27T16:43:33.000Z</published>
    <updated>2022-07-17T17:04:14.486Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>在<a href="https://mp.weixin.qq.com/s/lWA0tZ_LxNdG8q9GB7xDZA" target="_blank" rel="noopener">上篇文章</a>中，我们搞定了渠道管理功能，这个相对来说比较简单。今天我们来看看促销活动的管理，在这个模块中，会有许多涉及到脚手架本身的修改，在这个过程中可以加深我们对这个脚手架的理解。</p><a id="more"></a><p>先来看看最终效果图吧：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220426215908.png" alt></p><p>这个页面上，你看到的所有功能按钮，均已实现。所以，就不废话了，开搞。</p><h2 id="1-数据库设计"><a href="#1-数据库设计" class="headerlink" title="1. 数据库设计"></a>1. 数据库设计</h2><p>数据库这里主要修改的地方有两处。</p><h3 id="1-1-修改字典表"><a href="#1-1-修改字典表" class="headerlink" title="1.1 修改字典表"></a>1.1 修改字典表</h3><p>首先是修改字典表。在前端展示活动类型的时候，有两种不同的取值：</p><ul><li>年卡折扣券</li><li>年卡代金券</li></ul><p>像下面这样：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220426220131.png" alt></p><p>这里的活动类型下拉框我们当然可以直接在前端硬编码，但是既然用了这个脚手架，且这个脚手架又刚好提供了数据字典的功能，那么我们不妨将这两个选项加入到数据字典中，方便我们后面使用。</p><p>可以直接利用脚手架中的数据字典网页来添加，也可以直接在数据库表中来添加，我就省事一点，直接改表吧，修改两张表，分别是 <code>sys_dict_type</code> 和 <code>sys_dict_data</code> 两张表，其中 <code>sys_dict_type</code> 中加的是字典类型，而 <code>sys_dict_data</code> 中加的则是字典的具体值，我添加的数据分别如下：</p><p><code>sys_dict_type</code>：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220426220611.png" alt></p><p><code>sys_dict_data</code>：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220426220706.png" alt></p><h3 id="1-2-添加促销活动表"><a href="#1-2-添加促销活动表" class="headerlink" title="1.2 添加促销活动表"></a>1.2 添加促销活动表</h3><p>接下来就是活动促销表了，这个没啥好说的，直接开整就行了：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220426221906.png" alt></p><h2 id="2-创建新模块"><a href="#2-创建新模块" class="headerlink" title="2. 创建新模块"></a>2. 创建新模块</h2><h3 id="2-1-新建模块"><a href="#2-1-新建模块" class="headerlink" title="2.1 新建模块"></a>2.1 新建模块</h3><p>接下来创建一个专门写活动管理的新模块，有了前面写 channel 的经验，现在写 activity 不过是手到擒来的事。</p><p>新建一个名为 tienchin-activity 的模块，然后加入 common 依赖，如下图：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span></span><br><span class="line">    促销活动模块</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- 通用工具--&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javaboy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tienchin-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然这个新建的 activity 模块也拿去给 admin 模块依赖一下，将来在 admin 模块中调用 activity 模块的 service。</p><h3 id="2-2-自动生成代码"><a href="#2-2-自动生成代码" class="headerlink" title="2.2 自动生成代码"></a>2.2 自动生成代码</h3><p>MP 相关的依赖我们在<a href="https://mp.weixin.qq.com/s/lWA0tZ_LxNdG8q9GB7xDZA" target="_blank" rel="noopener">上篇文章</a>中已经配过了，这里咱就直接开始用就行了。</p><p>我们在 admin 模块的单元测试中新加一个方法，来用生成基础操作代码，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">activityGenerator</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    FastAutoGenerator.create(<span class="hljs-string">"jdbc:mysql:///tienchin?serverTimezone=Asia/Shanghai&amp;useSSL=false"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123"</span>)</span><br><span class="line">            .globalConfig(builder -&gt; &#123;</span><br><span class="line">                builder.author(<span class="hljs-string">"javaboy"</span>) <span class="hljs-comment">// 设置作者</span></span><br><span class="line">                        .disableOpenDir()</span><br><span class="line">                        .fileOverride() <span class="hljs-comment">// 覆盖已生成文件</span></span><br><span class="line">                        .outputDir(<span class="hljs-string">"/Users/sang/workspace/workspace02/tienchin/tienchin-activity/src/main/java"</span>); <span class="hljs-comment">// 指定输出目录</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .packageConfig(builder -&gt; &#123;</span><br><span class="line">                builder.parent(<span class="hljs-string">"org.javaboy"</span>) <span class="hljs-comment">// 设置父包名</span></span><br><span class="line">                        .moduleName(<span class="hljs-string">"activity"</span>) <span class="hljs-comment">// 设置父包模块名</span></span><br><span class="line">                        .pathInfo(Collections.singletonMap(OutputFile.xml, <span class="hljs-string">"/Users/sang/workspace/workspace02/tienchin/tienchin-activity/src/main/resources/mapper/channel"</span>)); <span class="hljs-comment">// 设置mapperXml生成路径</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                builder.addInclude(<span class="hljs-string">"tienchin_activity"</span>) <span class="hljs-comment">// 设置需要生成的表名</span></span><br><span class="line">                        .addTablePrefix(<span class="hljs-string">"tienchin_"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            .templateEngine(<span class="hljs-keyword">new</span> FreemarkerTemplateEngine()) <span class="hljs-comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">            .execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将自动生成的 controller 删除掉，我们将来重新写，最终生成的代码如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220426223320.png" alt></p><h2 id="3-服务端接口"><a href="#3-服务端接口" class="headerlink" title="3. 服务端接口"></a>3. 服务端接口</h2><p>接下来我们来看看服务端接口的开发。</p><p>我们在 admin 模块中，新建 ActivityController，来准备开发活动相关的接口。</p><h3 id="3-1-常规-CRUD"><a href="#3-1-常规-CRUD" class="headerlink" title="3.1 常规 CRUD"></a>3.1 常规 CRUD</h3><p>首先是常规的 CRUD。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/tienchin/activity"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActivityController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    IActivityService activityService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:activity:add')"</span>)</span><br><span class="line">    <span class="hljs-meta">@Log</span>(title = <span class="hljs-string">"促销活动"</span>, businessType = BusinessType.INSERT)</span><br><span class="line">    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">add</span><span class="hljs-params">(@Validated @RequestBody Activity activity)</span> </span>&#123;</span><br><span class="line">        activity.setCreateBy(getUsername());</span><br><span class="line">        <span class="hljs-keyword">return</span> toAjax(activityService.saveActivity(activity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 状态修改</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:activity:edit')"</span>)</span><br><span class="line">    <span class="hljs-meta">@Log</span>(title = <span class="hljs-string">"促销活动"</span> , businessType = BusinessType.UPDATE)</span><br><span class="line">    <span class="hljs-meta">@PutMapping</span>(<span class="hljs-string">"/changeStatus"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">changeStatus</span><span class="hljs-params">(@RequestBody Activity activity)</span> </span>&#123;</span><br><span class="line">        activity.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        activity.setUpdateBy(getUsername());</span><br><span class="line">        <span class="hljs-keyword">return</span> toAjax(activityService.updateById(activity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:activity:edit')"</span>)</span><br><span class="line">    <span class="hljs-meta">@Log</span>(title = <span class="hljs-string">"促销活动"</span> , businessType = BusinessType.UPDATE)</span><br><span class="line">    <span class="hljs-meta">@PutMapping</span>(<span class="hljs-string">"/"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">edit</span><span class="hljs-params">(@Validated @RequestBody Activity activity)</span> </span>&#123;</span><br><span class="line">        activity.setUpdateBy(getUsername());</span><br><span class="line">        activity.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        <span class="hljs-keyword">return</span> toAjax(activityService.saveOrUpdate(activity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:activity:query')"</span>)</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/list"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title">getActivityList</span><span class="hljs-params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        startPage();</span><br><span class="line">        List&lt;Activity&gt; list = activityService.getActivityList(activity);</span><br><span class="line">        <span class="hljs-keyword">return</span> getDataTable(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:activity:remove')"</span>)</span><br><span class="line">    <span class="hljs-meta">@Log</span>(title = <span class="hljs-string">"促销活动"</span> , businessType = BusinessType.DELETE)</span><br><span class="line">    <span class="hljs-meta">@DeleteMapping</span>(<span class="hljs-string">"/&#123;activityIds&#125;"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">remove</span><span class="hljs-params">(@PathVariable Long[] activityIds)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//待完善，将来加了其他功能后再继续完善</span></span><br><span class="line">        <span class="hljs-keyword">return</span> toAjax(activityService.removeBatchByIds(Arrays.asList(activityIds)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:activity:query')"</span>)</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">getActivityById</span><span class="hljs-params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> AjaxResult.success(activityService.getById(id));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些都是基础操作，其实也没啥好说的，大部分都用了 MP 自动生成的代码，自己几乎不需要写啥。</p><p>其中分页加条件查询的 <code>/list</code> 接口，是我自己写的，因为涉及到几个查询条件，该方法的定义如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Activity&gt; <span class="hljs-title">getActivityList</span><span class="hljs-params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;Activity&gt; qw = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">if</span> (activity.getChannel() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        qw.lambda().eq(Activity::getChannel, activity.getChannel());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (activity.getStatus() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        qw.lambda().eq(Activity::getStatus, activity.getStatus());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (activity.getEndTime() != <span class="hljs-keyword">null</span> &amp;&amp; activity.getBeginTime() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        qw.lambda().ge(Activity::getBeginTime, activity.getBeginTime()).le(Activity::getEndTime, activity.getEndTime());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> list(qw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用了 MP 的查询方法。涉及到一点点 Lambda，不过都很好懂，不熟悉 Lambda 的小伙伴可以在公众号后台回复 webflux，有相关教程。</p><p>另外这里还有一个小小细节，就是小伙伴们知道，从 JDK1.8 开始，推荐用 LocalDate 和 LocalDateTime，所以我这个项目涉及到时间的基本上都是用这两种类型，但是在原本的脚手架中，当涉及到对象和 JSON 的互转是，只支持对 Date 的转换，所以这块需要我自己手动处理下。</p><p>看了下，脚手架中相关的配置都放在 framework 中，具体位置在 <code>org.javaboy.tienchin.framework.config</code>，那么我的配置类就也写在这个位置吧，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocalDateTimeSerializerConfig</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DATE_TIME_PATTERN = <span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DATE_PATTERN = <span class="hljs-string">"yyyy-MM-dd"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * string转localdate</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Converter&lt;String, LocalDate&gt; <span class="hljs-title">localDateConverter</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Converter&lt;String, LocalDate&gt;() &#123;</span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> LocalDate <span class="hljs-title">convert</span><span class="hljs-params">(String source)</span> </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (source.trim().length() == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> LocalDate.parse(source);</span><br><span class="line">                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> LocalDate.parse(source, DateTimeFormatter.ofPattern(DATE_PATTERN));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * string转localdatetime</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Converter&lt;String, LocalDateTime&gt; <span class="hljs-title">localDateTimeConverter</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Converter&lt;String, LocalDateTime&gt;() &#123;</span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> LocalDateTime <span class="hljs-title">convert</span><span class="hljs-params">(String source)</span> </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (source.trim().length() == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-comment">// 先尝试ISO格式: 2019-07-15T16:00:00</span></span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> LocalDateTime.parse(source);</span><br><span class="line">                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> LocalDateTime.parse(source, DateTimeFormatter.ofPattern(DATE_TIME_PATTERN));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 统一配置</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Jackson2ObjectMapperBuilderCustomizer <span class="hljs-title">jsonCustomizer</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        JavaTimeModule <span class="hljs-keyword">module</span> = <span class="hljs-keyword">new</span> JavaTimeModule();</span><br><span class="line">        LocalDateTimeDeserializer localDateTimeDeserializer = <span class="hljs-keyword">new</span> LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">        <span class="hljs-keyword">module</span>.addDeserializer(LocalDateTime.class, localDateTimeDeserializer);</span><br><span class="line">        <span class="hljs-keyword">return</span> builder -&gt; &#123;</span><br><span class="line">            builder.simpleDateFormat(DATE_TIME_PATTERN);</span><br><span class="line">            builder.serializers(<span class="hljs-keyword">new</span> LocalDateSerializer(DateTimeFormatter.ofPattern(DATE_PATTERN)));</span><br><span class="line">            builder.serializers(<span class="hljs-keyword">new</span> LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_PATTERN)));</span><br><span class="line">            builder.modules(<span class="hljs-keyword">module</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类本身到也没啥说的，配了之后，将来项目中 LocalDate 转 JSON，就都是 <code>yyyy-MM-dd</code> 格式，LocalDateTime 转 JSON 就都是 <code>yyyy-MM-dd HH:mm:ss</code> 格式，反过来也一样。</p><h3 id="3-2-导入导出"><a href="#3-2-导入导出" class="headerlink" title="3.2 导入导出"></a>3.2 导入导出</h3><p>再来看看跟数据导入导出相关的几个接口。</p><p>首先 Excel 导入导出相关工具在脚手架中已经有了，我们直接用即可，需要做的准备工作，首先是在 Activity 实体类上加上相关注解，配置将来生成 Excel 时表格的 title，具体如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@TableName</span>(<span class="hljs-string">"tienchin_activity"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Activity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * id</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@TableId</span>(value = <span class="hljs-string">"id"</span>, type = IdType.AUTO)</span><br><span class="line">    <span class="hljs-keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 活动编号</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"活动编号"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 活动名称</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"活动名称"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 渠道来源</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"渠道来源"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String channel;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 活动简介</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"活动简介"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 活动类型</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"活动类型"</span>,readConverterExp = <span class="hljs-string">"1=年费折扣卡,2=年费代金券"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 年费折扣</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"年费折扣"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> Float discount;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 年费代金券</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"年费代金券"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> Double voucher;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 状态</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"活动状态"</span>,readConverterExp = <span class="hljs-string">"0=正常,1=停用"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 开始时间</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"活动开始时间"</span>, width = <span class="hljs-number">30</span>, dateFormat = <span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> LocalDateTime beginTime;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 结束时间</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"活动结束时间"</span>, width = <span class="hljs-number">30</span>, dateFormat = <span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> LocalDateTime endTime;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"活动创建人"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String updateBy;</span><br><span class="line">    <span class="hljs-meta">@Excel</span>(name = <span class="hljs-string">"活动修改人"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String createBy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没加 @Excel 注解的字段，也是将来导出 Excel 表格时不需要导出的字段。</p><p>这里有一个小问题，就是我的时间格式使用了 LocalDateTime，原本的脚手架在这块只支持 Date，LocalDateTime 的转换会有问题，为了支持 LocalDateTime，我这里修改了 <code>org.javaboy.tienchin.common.utils.reflect.ReflectUtils#invokeMethodByName</code> 方法，增加了对 LocalDateTime 的枚举，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; <span class="hljs-function">E <span class="hljs-title">invokeMethodByName</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String methodName, <span class="hljs-keyword">final</span> Object[] args)</span> </span>&#123;</span><br><span class="line">    Method method = getAccessibleMethodByName(obj, methodName, args.length);</span><br><span class="line">    <span class="hljs-keyword">if</span> (method == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">// 如果为空不报错，直接返回空。</span></span><br><span class="line">        logger.debug(<span class="hljs-string">"在 ["</span> + obj.getClass() + <span class="hljs-string">"] 中，没有找到 ["</span> + methodName + <span class="hljs-string">"] 方法 "</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// 类型转换（将参数数据类型转换为目标方法参数类型）</span></span><br><span class="line">        Class&lt;?&gt;[] cs = method.getParameterTypes();</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cs.length; i++) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (args[i] != <span class="hljs-keyword">null</span> &amp;&amp; !args[i].getClass().equals(cs[i])) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (cs[i] == String.class) &#123;</span><br><span class="line">                    args[i] = Convert.toStr(args[i]);</span><br><span class="line">                    <span class="hljs-keyword">if</span> (StringUtils.endsWith((String) args[i], <span class="hljs-string">".0"</span>)) &#123;</span><br><span class="line">                        args[i] = StringUtils.substringBefore((String) args[i], <span class="hljs-string">".0"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cs[i] == Integer.class) &#123;</span><br><span class="line">                    args[i] = Convert.toInt(args[i]);</span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cs[i] == Long.class) &#123;</span><br><span class="line">                    args[i] = Convert.toLong(args[i]);</span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cs[i] == Double.class) &#123;</span><br><span class="line">                    args[i] = Convert.toDouble(args[i]);</span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cs[i] == Float.class) &#123;</span><br><span class="line">                    args[i] = Convert.toFloat(args[i]);</span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cs[i] == Date.class) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (args[i] <span class="hljs-keyword">instanceof</span> String) &#123;</span><br><span class="line">                        args[i] = DateUtils.parseDate(args[i]);</span><br><span class="line">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                        args[i] = DateUtil.getJavaDate((Double) args[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cs[i] == <span class="hljs-keyword">boolean</span>.class || cs[i] == Boolean.class) &#123;</span><br><span class="line">                    args[i] = Convert.toBool(args[i]);</span><br><span class="line">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cs[i] == LocalDateTime.class) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (args[i] <span class="hljs-keyword">instanceof</span> String) &#123;</span><br><span class="line">                        args[i] = DateUtils.getLocalDateTime((String) args[i]);</span><br><span class="line">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                        args[i] = DateUtils.getLocalDateTimeOfTimestamp((Long) args[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cs[i] == LocalDate.class) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (args[i] <span class="hljs-keyword">instanceof</span> String) &#123;</span><br><span class="line">                        args[i] = DateUtils.getLocalDate((String) args[i]);</span><br><span class="line">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                        args[i] = DateUtils.getLocalDateOfTimestamp((Long) args[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> (E) method.invoke(obj, args);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        String msg = <span class="hljs-string">"method: "</span> + method + <span class="hljs-string">", obj: "</span> + obj + <span class="hljs-string">", args: "</span> + args + <span class="hljs-string">""</span>;</span><br><span class="line">        <span class="hljs-keyword">throw</span> convertReflectionExceptionToUnchecked(msg, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及到了四个工具方法如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 时间戳转 LocalDateTime</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> timestamp</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LocalDateTime <span class="hljs-title">getLocalDateTimeOfTimestamp</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timestamp)</span> </span>&#123;</span><br><span class="line">    Instant instant = Instant.ofEpochMilli(timestamp);</span><br><span class="line">    ZoneId zone = ZoneId.systemDefault();</span><br><span class="line">    <span class="hljs-keyword">return</span> LocalDateTime.ofInstant(instant, zone);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 时间戳转 LocalDate</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> timestamp</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LocalDate <span class="hljs-title">getLocalDateOfTimestamp</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timestamp)</span> </span>&#123;</span><br><span class="line">    Instant instant = Instant.ofEpochMilli(timestamp);</span><br><span class="line">    ZoneId zone = ZoneId.systemDefault();</span><br><span class="line">    <span class="hljs-keyword">return</span> instant.atZone(zone).toLocalDate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 字符串转 LocalDateTime</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> datetime</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LocalDateTime <span class="hljs-title">getLocalDateTime</span><span class="hljs-params">(String datetime)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> LocalDateTime.parse(datetime, DateTimeFormatter.ofPattern(YYYY_MM_DD_HH_MM_SS));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 字符串转 LocalDate</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> date</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LocalDate <span class="hljs-title">getLocalDate</span><span class="hljs-params">(String date)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> LocalDate.parse(date, DateTimeFormatter.ofPattern(YYYY_MM_DD));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，最后我们再提供三个导入导出相关的接口：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/importTemplate"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">importTemplate</span><span class="hljs-params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    ExcelUtil&lt;Activity&gt; util = <span class="hljs-keyword">new</span> ExcelUtil&lt;Activity&gt;(Activity.class);</span><br><span class="line">    util.importTemplateExcel(response, <span class="hljs-string">"活动数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@Log</span>(title = <span class="hljs-string">"促销活动"</span> , businessType = BusinessType.EXPORT)</span><br><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:activity:export')"</span>)</span><br><span class="line"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/export"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">export</span><span class="hljs-params">(HttpServletResponse response, Activity activity)</span> </span>&#123;</span><br><span class="line">    List&lt;Activity&gt; list = activityService.getActivityList(activity);</span><br><span class="line">    ExcelUtil&lt;Activity&gt; util = <span class="hljs-keyword">new</span> ExcelUtil&lt;Activity&gt;(Activity.class);</span><br><span class="line">    util.exportExcel(response, list, <span class="hljs-string">"促销活动数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@Log</span>(title = <span class="hljs-string">"促销活动"</span> , businessType = BusinessType.IMPORT)</span><br><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:activity:import')"</span>)</span><br><span class="line"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/importData"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">importData</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ExcelUtil&lt;Activity&gt; util = <span class="hljs-keyword">new</span> ExcelUtil&lt;Activity&gt;(Activity.class);</span><br><span class="line">    List&lt;Activity&gt; activityList = util.importExcel(file.getInputStream());</span><br><span class="line">    <span class="hljs-keyword">return</span> toAjax(activityService.saveBatch(activityList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这三个基本上也是照着用户接口写的，照猫画虎。</p><h2 id="4-前端页面开发"><a href="#4-前端页面开发" class="headerlink" title="4. 前端页面开发"></a>4. 前端页面开发</h2><p>接下来开发前端页面。</p><h3 id="4-1-请求接口"><a href="#4-1-请求接口" class="headerlink" title="4.1 请求接口"></a>4.1 请求接口</h3><p>首先我们来开发请求接口，还是老规矩，新建一个 <code>src/api/activity/index.js</code> 文件，内容如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 查询所有的活动信息</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listActivity</span>(<span class="hljs-params">query</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="hljs-string">'/tienchin/activity/list'</span>,</span><br><span class="line">    method: <span class="hljs-string">'get'</span>,</span><br><span class="line">    params: query</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 根据 id 查询某一个活动的信息</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getActivity</span>(<span class="hljs-params">activityId</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="hljs-string">'/tienchin/activity/'</span> + activityId,</span><br><span class="line">    method: <span class="hljs-string">'get'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 添加活动</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addActivity</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="hljs-string">'/tienchin/activity/'</span>,</span><br><span class="line">    method: <span class="hljs-string">'post'</span>,</span><br><span class="line">    data: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 更新活动信息</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateActivity</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="hljs-string">'/tienchin/activity/'</span>,</span><br><span class="line">    method: <span class="hljs-string">'put'</span>,</span><br><span class="line">    data: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 更新活动状态</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeActivityStatus</span>(<span class="hljs-params">id, status</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> data = &#123;</span><br><span class="line">    id,</span><br><span class="line">    status</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="hljs-string">'/tienchin/activity/changeStatus'</span>,</span><br><span class="line">    method: <span class="hljs-string">'put'</span>,</span><br><span class="line">    data: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 根据 id 删除活动</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delActivity</span>(<span class="hljs-params">activityIds</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="hljs-string">'/tienchin/activity/'</span> + activityIds,</span><br><span class="line">    method: <span class="hljs-string">'delete'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个基本上就是我们活动增删改查的所有信息了。对于文件导入导出是请求是单独封装的，一会直接在 .vue 文件中调用即可。</p><h3 id="4-2-页面开发"><a href="#4-2-页面开发" class="headerlink" title="4.2 页面开发"></a>4.2 页面开发</h3><p>具体的页面开发倒是不难，我们来看下最终的效果：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220427213436.png" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/20220427213521.png" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/20220427213552.png" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/20220427213629.png" alt></p><p>还有其他的我就不一一截图了。前端 vue 也不难，能做出 vhr 的小伙伴都能做出来这里的页面。没有特别直接说的地方，我也就不贴代码了。小伙伴们可以直接 GitHub 上下载源码查看。有不懂的地方欢迎留言讨论。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>好啦，这次提交的功能是促销活动管理～小伙伴们赶紧去给个 star 呀，star 越多更的越快哈哈～</p><ul><li><a href="https://github.com/lenve/tienchin" target="_blank" rel="noopener">https://github.com/lenve/tienchin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://mp.weixin.qq.com/s/lWA0tZ_LxNdG8q9GB7xDZA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上篇文章&lt;/a&gt;中，我们搞定了渠道管理功能，这个相对来说比较简单。今天我们来看看促销活动的管理，在这个模块中，会有许多涉及到脚手架本身的修改，在这个过程中可以加深我们对这个脚手架的理解。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>趁热打铁，整一个新功能出来</title>
    <link href="http://www.javaboy.org/2022/0426/tienchin-feature.html"/>
    <id>http://www.javaboy.org/2022/0426/tienchin-feature.html</id>
    <published>2022-04-25T16:43:17.000Z</published>
    <updated>2022-07-17T17:04:09.869Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>在<a href="https://mp.weixin.qq.com/s/zo0fu4qmGTV4pSb5wiIC_w" target="_blank" rel="noopener">上篇文章</a>中我们已经实现了自定义菜单了，我们可以根据自己的实际需求去定制自己需要的菜单，做好了这一步，接下来我们就可以开发新功能了。</p><a id="more"></a><p>我们就先从最简单的渠道管理开始。</p><blockquote><p>还是老规矩，一个特别基础的细节我就不啰嗦了，如果大家阅读吃力，也可以先看看 vhr(<a href="https://github.com/lenve/vhr" target="_blank" rel="noopener">https://github.com/lenve/vhr</a>) 再看这个就容易多了。</p></blockquote><h2 id="1-分配权限"><a href="#1-分配权限" class="headerlink" title="1. 分配权限"></a>1. 分配权限</h2><p>我们依葫芦画瓢，首先在 sys_menu 中为渠道相关的操作添加权限，新增如下两条记录：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220423093215.png" alt></p><p>2008 就是渠道管理菜单项的 id。渠道管理将来就对应了这四个操作。</p><h2 id="2-渠道管理表"><a href="#2-渠道管理表" class="headerlink" title="2. 渠道管理表"></a>2. 渠道管理表</h2><p>渠道管理比较简单，一张表，也不需要引用其他表，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220423171829.png" alt></p><p>这个表很简单，没啥好说的。</p><h2 id="3-服务端接口开发"><a href="#3-服务端接口开发" class="headerlink" title="3. 服务端接口开发"></a>3. 服务端接口开发</h2><h3 id="3-1-现有功能分析"><a href="#3-1-现有功能分析" class="headerlink" title="3.1 现有功能分析"></a>3.1 现有功能分析</h3><p>用了这个脚手架，我也就懒得另起炉灶了，我们现在要写接口，接口该怎么写？我们可以参考一个他自己写好的，例如用户管理接口。</p><p>用户管理接口位置在 <code>org.javaboy.web.controller.system.SysUserController#list</code> 方法中：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('system:user:list')"</span>)</span><br><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/list"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title">list</span><span class="hljs-params">(SysUser user)</span> </span>&#123;</span><br><span class="line">    startPage();</span><br><span class="line">    List&lt;SysUser&gt; list = userService.selectUserList(user);</span><br><span class="line">    <span class="hljs-keyword">return</span> getDataTable(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家看，首先通过权限注解确保用户具备相应的权限。这个权限注解对应的方法是 <code>org.javaboy.framework.web.service.PermissionService#hasPermi</code> 方法，具体的逻辑也并不难，当用户登录成功后，会查询出来当前用户的所有权限，并放到 LoginUser 对象中（这个在本系列的第一篇文章中已经讲过了），然后将之存入到 Redis 中，现在这里就是从 Redis 中取回 LoginUser 对象，然后拿出来用户的权限字符串，跟这里需要的权限字符串做比对。</p><p>由于这个脚手架自定义了一个 BaseController，里边封装了很多常用的操作，所有的业务 Controller 都是继承自这个 BaseController，所以这里的 startPage 方法其实就是 BaseController 中的方法，这个方法会自动开启分页功能，会从当前请求中提取出分页参数，然后进行查询。如果前端没有传递分页参数，那么默认查询第一页，查询 10 条数据。</p><p>接下来就是一个常规的查询操作，没啥好说的。</p><p>最后的 getDataTable 方法则是将数据包装成一个分页的 JSON 对象。</p><p>还有一点要捋清楚，就是这个脚手架是一个多模块项目，所有的借口定义统一在 admin 中，不同的功能对应不同的模块，例如用户管理相关的功能都在 system 这个模块中。</p><p>好了，看懂这个，我们就照猫画虎。</p><h3 id="3-2-创建工程"><a href="#3-2-创建工程" class="headerlink" title="3.2 创建工程"></a>3.2 创建工程</h3><p>首先，我们新建一个自己的功能模块，这是一个 maven 项目，叫做 tienchin-channel。</p><p>这里我想用 MyBatis-Plus 来做，因此我先修改父工程的 dependencyManagement，将 mp 的版本号统一管理起来，同时也将新建模块加进去，方便后期引用的时候进行版本号统一管理：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">mybatis-plus-boot-starter.version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis-plus-boot-starter.version</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">mybatis-plus-generator.version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis-plus-generator.version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis-plus-boot-starter.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis-plus-generator.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javaboy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tienchin-channel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;tienchin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建完成后，我们手动修改一下 tienchin-channel 的 pom.xml 文件，照着脚手架 system 模块的改即可：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span></span><br><span class="line">    渠道管理模块</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- 通用工具--&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javaboy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tienchin-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，在 admin 模块中，依赖当前新建的 tienchin-channel 模块和 mp 的代码自动生成依赖，如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javaboy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tienchin-channel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外依赖我还有一些细微的调整，例如为父模块添加了 Spring Boot 作为其 parent 等，这些我就不逐一说明了，大家可以在文末下载源码查看。</p><h3 id="3-3-配置-MP"><a href="#3-3-配置-MP" class="headerlink" title="3.3 配置 MP"></a>3.3 配置 MP</h3><p>这个脚手架中虽然用了 MyBatis 的 starter，但是实际上还是自己手动配置的 MyBatis，所以当我们使用 MP 的时候，并不能像在 Spring Boot 中使用 MP 那样，加个依赖就行了，我们还需要手动改一下配置。</p><p>首先我们将 mp 的依赖放到 common 模块中，毕竟将来无论是 framework 还是我们新建的 tienchin-channel 都依赖 common 模块，如下：</p><p>tienchin-common/pom.xml:</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，MyBatis 的配置是在 framework 模块中，具体代码在 <code>tienchin-framework/src/main/java/org/javaboy/framework/config/MyBatisConfig.java</code> 位置，我们直接在此进行修改即可。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String typeAliasesPackage = env.getProperty(<span class="hljs-string">"mybatis.typeAliasesPackage"</span>);</span><br><span class="line">    String mapperLocations = env.getProperty(<span class="hljs-string">"mybatis.mapperLocations"</span>);</span><br><span class="line">    String configLocation = env.getProperty(<span class="hljs-string">"mybatis.configLocation"</span>);</span><br><span class="line">    typeAliasesPackage = setTypeAliasesPackage(typeAliasesPackage);</span><br><span class="line">    VFS.addImplClass(SpringBootVFS.class);</span><br><span class="line">    <span class="hljs-keyword">final</span> MybatisSqlSessionFactoryBean sessionFactory = <span class="hljs-keyword">new</span> MybatisSqlSessionFactoryBean();</span><br><span class="line">    sessionFactory.setDataSource(dataSource);</span><br><span class="line">    sessionFactory.setTypeAliasesPackage(typeAliasesPackage);</span><br><span class="line">    sessionFactory.setMapperLocations(resolveMapperLocations(StringUtils.split(mapperLocations, <span class="hljs-string">","</span>)));</span><br><span class="line">    sessionFactory.setConfigLocation(<span class="hljs-keyword">new</span> DefaultResourceLoader().getResource(configLocation));</span><br><span class="line">    <span class="hljs-keyword">return</span> sessionFactory.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小伙伴们看一下，在配置的过程中，将原本的 SqlSessionFactoryBean 改为 MybatisSqlSessionFactoryBean，其他都不变即可。</p><p>如此，我们的 MP 就配置好了。</p><h3 id="3-4-生成代码"><a href="#3-4-生成代码" class="headerlink" title="3.4 生成代码"></a>3.4 生成代码</h3><p>接下来，我们在 admin 模块的单元测试中，通过如下代码来生成一下 channel 对应的实体类啥的，如果大家对这个自动生成代码的不熟悉的话，可以看看这篇文章：<a href="https://mp.weixin.qq.com/s/eLJQpFJcNjxMjfJMzURdGg" target="_blank" rel="noopener">自动生成实体类，哪个最佳？</a>：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Test</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelGenerator</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        FastAutoGenerator.create(<span class="hljs-string">"jdbc:mysql:///tienchin?serverTimezone=Asia/Shanghai&amp;useSSL=false"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123"</span>)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(<span class="hljs-string">"javaboy"</span>) <span class="hljs-comment">// 设置作者</span></span><br><span class="line">                            .disableOpenDir()</span><br><span class="line">                            .fileOverride() <span class="hljs-comment">// 覆盖已生成文件</span></span><br><span class="line">                            .outputDir(<span class="hljs-string">"/Users/sang/workspace/workspace02/tienchin/tienchin-channel/src/main/java"</span>); <span class="hljs-comment">// 指定输出目录</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(<span class="hljs-string">"org.javaboy"</span>) <span class="hljs-comment">// 设置父包名</span></span><br><span class="line">                            .moduleName(<span class="hljs-string">"channel"</span>) <span class="hljs-comment">// 设置父包模块名</span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.xml, <span class="hljs-string">"/Users/sang/workspace/workspace02/tienchin/tienchin-channel/src/main/resources/mapper/channel"</span>)); <span class="hljs-comment">// 设置mapperXml生成路径</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(<span class="hljs-string">"tienchin_channel"</span>) <span class="hljs-comment">// 设置需要生成的表名</span></span><br><span class="line">                            .addTablePrefix(<span class="hljs-string">"tienchin_"</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .templateEngine(<span class="hljs-keyword">new</span> FreemarkerTemplateEngine()) <span class="hljs-comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动生成的源码自带 Controller，我们将其删除，重新在 admin 模块中创建对应的 ChannelController 即可。</p><p>对照现有的任意一个 Controller，我们写出来自己的 Controller，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/tienchin/channel"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChannelController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    IChannelService channelService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:channel:query')"</span>)</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/list"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title">getChannelList</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        startPage();</span><br><span class="line">        List&lt;Channel&gt; list = channelService.list();</span><br><span class="line">        <span class="hljs-keyword">return</span> getDataTable(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:channel:add')"</span>)</span><br><span class="line">    <span class="hljs-meta">@Log</span>(title = <span class="hljs-string">"渠道管理"</span> , businessType = BusinessType.INSERT)</span><br><span class="line">    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">add</span><span class="hljs-params">(@Validated @RequestBody Channel channel)</span> </span>&#123;</span><br><span class="line">        channel.setCreateBy(getUsername());</span><br><span class="line">        <span class="hljs-keyword">return</span> toAjax(channelService.saveChannel(channel));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:channel:query')"</span>)</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">getInfo</span><span class="hljs-params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> AjaxResult.success(channelService.getById(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:channel:edit')"</span>)</span><br><span class="line">    <span class="hljs-meta">@Log</span>(title = <span class="hljs-string">"渠道管理"</span> , businessType = BusinessType.UPDATE)</span><br><span class="line">    <span class="hljs-meta">@PutMapping</span>(<span class="hljs-string">"/"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">edit</span><span class="hljs-params">(@Validated @RequestBody Channel channel)</span> </span>&#123;</span><br><span class="line">        channel.setUpdateBy(getUsername());</span><br><span class="line">        channel.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        <span class="hljs-keyword">return</span> toAjax(channelService.saveOrUpdate(channel));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:channel:remove')"</span>)</span><br><span class="line">    <span class="hljs-meta">@Log</span>(title = <span class="hljs-string">"渠道管理"</span> , businessType = BusinessType.DELETE)</span><br><span class="line">    <span class="hljs-meta">@DeleteMapping</span>(<span class="hljs-string">"/&#123;channelIds&#125;"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">remove</span><span class="hljs-params">(@PathVariable Long[] channelIds)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> toAjax(channelService.removeBatchByIds(Arrays.asList(channelIds)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都是常规操作，没啥特别值得说的地方。</p><p>@Log 是脚手架中定义的日志记录注解，加一个这个注解，会自动将当前的操作记录到 sys_oper_log 表中，像下面这样：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220423171215.png" alt></p><p>@PreAuthorize 操作权限就按一开始在数据库中配置的内容即可。</p><p>照猫画虎，很快就写出来这样一个接口。</p><h2 id="4-开发前端页面"><a href="#4-开发前端页面" class="headerlink" title="4. 开发前端页面"></a>4. 开发前端页面</h2><p>接下来我们来整前端页面，前端页面我们在第二篇文章中提到过，该功能对应的页面是 <code>src/views/tienchin/channel/index.vue</code>，所以我们只需要修改该页面即可，这个修改，我们也找一个参照物，找一个也是表格的页面改一下就行了，例如 <code>src/views/system/dict/index.vue</code>，这是字典管理的页面，我们就照着这个来改就行了，前端的代码量太大了，我就不全部贴出来了，我挑几个关键的地方来说一下。</p><h3 id="4-1-网络请求"><a href="#4-1-网络请求" class="headerlink" title="4.1 网络请求"></a>4.1 网络请求</h3><p>前端是每一个 <code>.vue</code> 文件都将自己所需的网络请求封装在一个 js 文件中，然后将来在 <code>.vue</code> 文件中直接引用。</p><p>例如关于数据字典的所有请求封装在 <code>src/api/system/dict/type.js</code> 文件中，我照猫画虎写了关于 channel 的所有网络请求：</p><p>src/api/channel/index.js</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 查询所有的渠道信息</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listChannel</span>(<span class="hljs-params">query</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="hljs-string">'/tienchin/channel/list'</span>,</span><br><span class="line">    method: <span class="hljs-string">'get'</span>,</span><br><span class="line">    params: query</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 根据 id 查询某一个渠道的信息</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getChannel</span>(<span class="hljs-params">channelId</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="hljs-string">'/tienchin/channel/'</span> + channelId,</span><br><span class="line">    method: <span class="hljs-string">'get'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 添加渠道</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addChannel</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="hljs-string">'/tienchin/channel/'</span>,</span><br><span class="line">    method: <span class="hljs-string">'post'</span>,</span><br><span class="line">    data: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 更新渠道信息</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateChannel</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="hljs-string">'/tienchin/channel/'</span>,</span><br><span class="line">    method: <span class="hljs-string">'put'</span>,</span><br><span class="line">    data: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 根据 id 删除渠道</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delChannel</span>(<span class="hljs-params">channelIds</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="hljs-string">'/tienchin/channel/'</span> + channelIds,</span><br><span class="line">    method: <span class="hljs-string">'delete'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-页面展示"><a href="#4-2-页面展示" class="headerlink" title="4.2 页面展示"></a>4.2 页面展示</h3><p>页面展示有一个地方需要和大家聊一聊。</p><p>就是当用户登录成功之后，前端会调用服务端的接口查看当前用户信息，包括用户的权限信息，而且前端还封装了一个空闲显示或者隐藏的工具，位置在 <code>src/directive/permission/hasPermi.js</code>，这个工具最终被做成了一个自定义指令，这样，我们在展示每一个按钮的时候，可以加上这个指令，将来就会自动根据用户是否具备相应的权限来展示相应的按钮，例如下面这几个按钮：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">"1.5"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">plain</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">icon</span>=<span class="hljs-string">"el-icon-plus"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">size</span>=<span class="hljs-string">"mini"</span></span></span><br><span class="line"><span class="hljs-tag">    @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleAdd"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">v-hasPermi</span>=<span class="hljs-string">"['tienchin:channel:add']"</span></span></span><br><span class="line"><span class="hljs-tag">  &gt;</span>新增</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">"1.5"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">"success"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">plain</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">icon</span>=<span class="hljs-string">"el-icon-edit"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">size</span>=<span class="hljs-string">"mini"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"single"</span></span></span><br><span class="line"><span class="hljs-tag">    @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleUpdate"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">v-hasPermi</span>=<span class="hljs-string">"['tienchin:channel:edit']"</span></span></span><br><span class="line"><span class="hljs-tag">  &gt;</span>修改</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">"1.5"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">"danger"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">plain</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">icon</span>=<span class="hljs-string">"el-icon-delete"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">size</span>=<span class="hljs-string">"mini"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"multiple"</span></span></span><br><span class="line"><span class="hljs-tag">    @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleDelete"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">v-hasPermi</span>=<span class="hljs-string">"['tienchin:channel:remove']"</span></span></span><br><span class="line"><span class="hljs-tag">  &gt;</span>删除</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每个按钮上都有一个 v-hasPermi 标签来表述这个按钮将来显示的条件。</p><p>另外，前端也使用到了数据字典，也就是一些常见的字段取值我们将之固定下来了，在前端直接引用即可。数据字典本身对应的表是 <code>sys_dict_data</code> 和 <code>sys_dict_type</code>，像下面这样（下图为 <code>sys_dict_data</code>  表，关于他这个里边的数据字典，后面有空了松哥可以再整一篇文章和大家分析具体用法）：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220423174744.png" alt></p><p>需要用到哪条记录，就在 vue 文件定义的时候声明就行了，像下面这样：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220423174854.png" alt></p><p>这样，后期就可以直接引用这个变量了，如下：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"渠道状态"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"status"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"scope"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dict-tag</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"dict.type.sys_normal_disable"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"scope.row.status"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><p>options 其实就引用了数据字典中的值。</p><p>关于这个页面其他的内容就都是常规操作了，会 vhr 基本上都能看懂，我也就不啰嗦了。</p><p>最终弄出来的页面如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220423175152.png" alt></p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>好啦，今天就先聊这么多，源码地址如下：</p><ul><li><a href="https://github.com/lenve/tienchin" target="_blank" rel="noopener">https://github.com/lenve/tienchin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://mp.weixin.qq.com/s/zo0fu4qmGTV4pSb5wiIC_w&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上篇文章&lt;/a&gt;中我们已经实现了自定义菜单了，我们可以根据自己的实际需求去定制自己需要的菜单，做好了这一步，接下来我们就可以开发新功能了。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>基于 RuoYi-Vue 做一个健身会员管理系统</title>
    <link href="http://www.javaboy.org/2022/0425/tienchin.html"/>
    <id>http://www.javaboy.org/2022/0425/tienchin.html</id>
    <published>2022-04-24T16:42:53.000Z</published>
    <updated>2022-07-17T17:04:06.581Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>最近在小伙伴们的强烈要求下，我们研究了下 RuoYi-Vue，感觉真的还挺好玩的，可以算是一个非常成熟的脚手架了，我们可以基于此快速开发一个商用项目。</p><a id="more"></a><p>有小伙伴想让松哥帮忙捋一捋这个项目，怎么说呢，如果你看过 vhr 的视频的话，我觉得这个项目应该是很容易懂的，基本上技术点都是一致的。</p><p>不过最近也刚好有空，博客也不知道写啥了，那么我试试能不能手把手带领小伙伴们以 RuoYi-Vue 为脚手架，开发一个健身房的会员管理系统。如果小伙伴们对此感兴趣的话，可以多多点赞转发，这样这个系列就不会烂尾～另外这个系列我假设大家已经做过 vhr 项目了，所以一些非常基础的知识点我就不重复啰嗦了。</p><p>前面我已经写了一篇文章分析它的 JWT 登录逻辑了（<a href="https://mp.weixin.qq.com/s/pqQNZ8lL9rfxm1XNyVTSHA" target="_blank" rel="noopener">前后端分离 JWT 登录实践</a>），今天我们就从菜单的定制开始吧。</p><h2 id="1-现有动态菜单分析"><a href="#1-现有动态菜单分析" class="headerlink" title="1. 现有动态菜单分析"></a>1. 现有动态菜单分析</h2><h3 id="1-1-两种方案"><a href="#1-1-两种方案" class="headerlink" title="1.1 两种方案"></a>1.1 两种方案</h3><p>动态菜单就是用户登录之后看到的菜单，不用角色的用户登录成功之后，会看到不用的菜单项，这个动态菜单要怎么实现呢？整体来说，有两种不同的方案，松哥曾经做过的项目中，两种方案也都有用过，这里分别来和大家分享一下。</p><h4 id="1-1-1-后端动态返回"><a href="#1-1-1-后端动态返回" class="headerlink" title="1.1.1 后端动态返回"></a>1.1.1 后端动态返回</h4><p>后端动态返回，这是我在微人事中采用的方案。微人事中，权限管理相关的表一共有五张表，如下：</p><p><img src="http://img.itboyhub.com/2020/06/fe-9-1.png" alt></p><p>其中 <code>hr</code> 表就是用户表，用户登录成功之后，可以查询到用户的角色，再根据用户角色去查询出来用户可以操作的菜单（资源），然后把这些可以操作的资源，组织成一个 JSON 数据，返回给前端，前端再根据这个 JSON 渲染出相应的菜单。以微人事为例，我们返回的 JSON 数据格式如下：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-attr">"id"</span>:<span class="hljs-number">2</span>,</span><br><span class="line">        <span class="hljs-attr">"path"</span>:<span class="hljs-string">"/home"</span>,</span><br><span class="line">        <span class="hljs-attr">"component"</span>:<span class="hljs-string">"Home"</span>,</span><br><span class="line">        <span class="hljs-attr">"name"</span>:<span class="hljs-string">"员工资料"</span>,</span><br><span class="line">        <span class="hljs-attr">"iconCls"</span>:<span class="hljs-string">"fa fa-user-circle-o"</span>,</span><br><span class="line">        <span class="hljs-attr">"children"</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-attr">"id"</span>:<span class="hljs-literal">null</span>,</span><br><span class="line">                <span class="hljs-attr">"path"</span>:<span class="hljs-string">"/emp/basic"</span>,</span><br><span class="line">                <span class="hljs-attr">"component"</span>:<span class="hljs-string">"EmpBasic"</span>,</span><br><span class="line">                <span class="hljs-attr">"name"</span>:<span class="hljs-string">"基本资料"</span>,</span><br><span class="line">                <span class="hljs-attr">"iconCls"</span>:<span class="hljs-literal">null</span>,</span><br><span class="line">                <span class="hljs-attr">"children"</span>:[</span><br><span class="line"></span><br><span class="line">                ],</span><br><span class="line">                <span class="hljs-attr">"meta"</span>:&#123;</span><br><span class="line">                    <span class="hljs-attr">"keepAlive"</span>:<span class="hljs-literal">false</span>,</span><br><span class="line">                    <span class="hljs-attr">"requireAuth"</span>:<span class="hljs-literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="hljs-attr">"meta"</span>:&#123;</span><br><span class="line">            <span class="hljs-attr">"keepAlive"</span>:<span class="hljs-literal">false</span>,</span><br><span class="line">            <span class="hljs-attr">"requireAuth"</span>:<span class="hljs-literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样的 JSON 在前端中再进行二次处理之后，就可以使用了，前端的二次处理主要是把 component 属性的字符串值转为对象。这一块具体操作大家可以参考微人事项目（具体在：<code>https://github.com/lenve/vhr/blob/master/vuehr/src/utils/utils.js</code>），我就不再赘述了。</p><p>这种方式的一个好处是前端的判断逻辑少一些，后端也不算复杂，就是一个 SQL 操作，前端拿到后端的返回的菜单数据，稍微处理一下就可以直接使用了。另外这种方式还有一个优势就是可以动态配置<strong>资源-角色</strong>以及<strong>用户-角色</strong>之间的关系，进而调整用户可以操作的资源(菜单)。</p><h4 id="1-1-2-前端动态渲染"><a href="#1-1-2-前端动态渲染" class="headerlink" title="1.1.2 前端动态渲染"></a>1.1.2 前端动态渲染</h4><p>另一种方式就是前端动态渲染，这种方式后端的工作要轻松一些，前端处理起来麻烦一些，松哥去年年末帮一个律所做的一个管理系统，因为权限上比较容易，我就采用了这种方案。</p><p>这种方式就是我直接在前端把所有页面都在路由表里边定义好，然后在 meta 属性中定义每一个页面需要哪些角色才能访问，例如下面这样：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-attr">"id"</span>:<span class="hljs-number">2</span>,</span><br><span class="line">        <span class="hljs-attr">"path"</span>:<span class="hljs-string">"/home"</span>,</span><br><span class="line">        <span class="hljs-attr">"component"</span>:Home,</span><br><span class="line">        <span class="hljs-attr">"name"</span>:<span class="hljs-string">"员工资料"</span>,</span><br><span class="line">        <span class="hljs-attr">"iconCls"</span>:<span class="hljs-string">"fa fa-user-circle-o"</span>,</span><br><span class="line">        <span class="hljs-attr">"children"</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-attr">"id"</span>:<span class="hljs-literal">null</span>,</span><br><span class="line">                <span class="hljs-attr">"path"</span>:<span class="hljs-string">"/emp/basic"</span>,</span><br><span class="line">                <span class="hljs-attr">"component"</span>:EmpBasic,</span><br><span class="line">                <span class="hljs-attr">"name"</span>:<span class="hljs-string">"基本资料"</span>,</span><br><span class="line">                <span class="hljs-attr">"iconCls"</span>:<span class="hljs-literal">null</span>,</span><br><span class="line">                <span class="hljs-attr">"children"</span>:[</span><br><span class="line"></span><br><span class="line">                ],</span><br><span class="line">                <span class="hljs-attr">"meta"</span>:&#123;</span><br><span class="line">                    <span class="hljs-attr">"keepAlive"</span>:<span class="hljs-literal">false</span>,</span><br><span class="line">                    <span class="hljs-attr">"requireAuth"</span>:<span class="hljs-literal">true</span>,</span><br><span class="line">                    <span class="hljs-attr">"roles"</span>:['admin','user']</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="hljs-attr">"meta"</span>:&#123;</span><br><span class="line">            <span class="hljs-attr">"keepAlive"</span>:<span class="hljs-literal">false</span>,</span><br><span class="line">            <span class="hljs-attr">"requireAuth"</span>:<span class="hljs-literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样定义表示当前登录用户需要具备 admin 或者 user 角色，才可以访问 EmpBasic 组件，当然这里不是说我这样定义了就行，这个定义只是一个标记，在项目首页中，我会遍历这个数组做菜单动态渲染，然后根据当前登录用户的角色，再结合当前组件需要的角色，来决定是否把当前组件所对应的菜单项渲染出来。</p><p>这样的话，后端只需要在登录成功后返回当前用户的角色就可以了，剩下的事情则交给前端来做。不过这种方式有一个弊端就是菜单和角色的关系在前端代码中写死了，以后如果想要动态调整会有一些不方便，可能需要改代码。特别是大项目，权限比较复杂的时候，调整就更麻烦了，所以这种方式我一般建议在一些简单的项目中使用。</p><h3 id="1-2-菜单分析"><a href="#1-2-菜单分析" class="headerlink" title="1.2 菜单分析"></a>1.2 菜单分析</h3><p>在 RuoYi-Vue 中，采用的是方案一，即和 vhr 的方案是一样的：服务端动态返回菜单信息，前端再去渲染就行了。</p><p>所以如果我们想要定制自己的项目菜单，那就非常容易了，只需要搞明白这个项目中的菜单表，然后直接修改菜单表就可以了。</p><p>系统的菜单表是 <code>sys_menu</code>，各个字段含义如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220421202320.png" alt></p><p>这个我就不多说了，各个字段的含义作者都写的很清楚了。对于一些新手小伙伴，我着重解释一个跟前端显示相关的字段：</p><ul><li>order_num：这个菜单项在前端页面展示的顺序，例如一级菜单<strong>系统管理</strong>中有用户管理和菜单管理，那么用户管理和菜单管理这两个子项之间就存在一个展示顺序的问题，这个字段就是用来解决这个问题的。</li><li>path：这个是前端的路由地址，可以简单理解为前端页面的跳转地址，假设系统管理菜单项的 path 为 system，系统管理下有一个子菜单日志管理，日志管理的 path 为 log，日志管理下有一个子菜单是操作日志，操作日志的 path 为 operlog，那么最终，前端访问操作日志时候的页面路由地址为 <code>/system/log/operlog</code>。</li><li>component：这是前端的组件地址，因为前端的 vue 文件是动态加载的，这个参数表示组件的名称。</li></ul><p>这几个参数可能对于新手小伙伴不好理解，其他的参数大家看注释就明白啥意思了，我也就不啰嗦了。</p><p>看明白了表，那么就可以直接上手了，直接在表上改了。</p><p>不过作者非常贴心的提供了管理页面，所以你要是懒得分析表，也可以直接在 <strong>系统管理-&gt;菜单管理</strong>中修改菜单，这个网页上的操作就比较简单了，我就不演示了。</p><h3 id="1-3-代码分析"><a href="#1-3-代码分析" class="headerlink" title="1.3 代码分析"></a>1.3 代码分析</h3><p>我们再来看看服务端菜单相关的代码。</p><p>菜单主要是有一个层级的问题，但是菜单的层级不会特别深，太深了前端不仅不好使用，也不方便展示。在 vhr 中，我假设菜单是三个层级，然后用了一个左连接就将所有的菜单信息查出来了。</p><p>但是在这个项目中，菜单没有固定的层级，可以有 N 层，所以查询也跟 vhr 不太一样，我们一起来看下。</p><p>返回菜单数据的接口是 <code>org.javaboy.web.controller.system.SysLoginController#getRouters</code>，我们来看下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"getRouters"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">getRouters</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    Long userId = SecurityUtils.getUserId();</span><br><span class="line">    List&lt;SysMenu&gt; menus = menuService.selectMenuTreeByUserId(userId);</span><br><span class="line">    <span class="hljs-keyword">return</span> AjaxResult.success(menuService.buildMenus(menus));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的实现代码我就不说了，这里就和大家说一下他这里的查询逻辑，这里的核心操作实际上就两步：</p><ol><li><code>menuService.selectMenuTreeByUserId</code> 方法查询出来当前所有的菜单项，这里的查询思路是根据当前用户的 id，找到用户对应的菜单，查询的时候只查询类行为 M 和 C 的菜单项，M 表示目录（即里边有子菜单），C 表示菜单，全部查询出来之后，再遍历，归类，将 C 作为某一个 M 的 children。在松哥的 vhr 里边，我是直接用了一对多的思路去查询的，查询出来后不用再二次处理，这里则是查询出来后递归处理的，这一块的实现思路不同，做过 vhr 项目的小伙伴注意区分（小伙伴们也可以按照 vhr 的思路来改改这里的逻辑）。</li><li>由于刚查询出来的菜单并不满足前端渲染的要求，所以在 menuService.buildMenus 方法中，再对刚刚查询出来的 List 集合进行二次处理，这里主要是把 component、path 等属性的值捋清楚。</li></ol><p>大致就是这样。</p><h2 id="2-自定义菜单数据"><a href="#2-自定义菜单数据" class="headerlink" title="2. 自定义菜单数据"></a>2. 自定义菜单数据</h2><p>那我们自己这个健身会员的菜单会有所不同，我想要自己重新定义一下，根据前面第一小节的分析，这里我来创建八个和健身会员管理系统相关的菜单，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220423092532.png" alt></p><p>系统原本的功能被我都收到系统管理这个菜单。</p><p>这个 SQL 脚本是比较简单的，大家在文末可以下载。我简单截个图大家看下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220423092610.png" alt></p><p>根据第一小节的分析直接修改表即可（也可以在菜单管理页面手动进行添加）。</p><h2 id="3-自定义页面"><a href="#3-自定义页面" class="headerlink" title="3. 自定义页面"></a>3. 自定义页面</h2><p>后端加了数据，前端当然也要加页面。component 字段其实已经暗示了前端的页面地址，所以，我们根据后端的 component 字段，来创建前端页面即可：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220423092650.png" alt></p><p>每一个 .vue 文件都还没写内容，就一句话，类似下面这样：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220421224557.png" alt></p><p>后期再补充。</p><p>好啦，这样，前端 vue 登录成功之后，就可以看到相应的页面了，页面也都可以点击。</p><p>好啦，这样，我们初步实现了根据自己的需求在这个项目上自定义自己的菜单。</p><h2 id="4-项目地址"><a href="#4-项目地址" class="headerlink" title="4. 项目地址"></a>4. 项目地址</h2><p>最后，文末给出一个项目地址，大家可以去看看。每篇文章的代码我都会提交上去，一步步完善，大家可以据此看到一个项目的成长过程，现在 star 就是老粉啦。</p><ul><li><a href="https://github.com/lenve/tienchin" target="_blank" rel="noopener">https://github.com/lenve/tienchin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;最近在小伙伴们的强烈要求下，我们研究了下 RuoYi-Vue，感觉真的还挺好玩的，可以算是一个非常成熟的脚手架了，我们可以基于此快速开发一个商用项目。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>一个简单易用的文件上传方案</title>
    <link href="http://www.javaboy.org/2022/0421/springboot-minio.html"/>
    <id>http://www.javaboy.org/2022/0421/springboot-minio.html</id>
    <published>2022-04-20T16:42:38.000Z</published>
    <updated>2022-07-17T17:04:42.512Z</updated>
    
    <content type="html"><![CDATA[<p>现在 OSS 服务算是一个基础服务了，很多云服务厂商都有提供这样的服务，价格也不贵，松哥自己的 <a href="http://www.javaboy.org">www.javaboy.org</a> 用的就是类似的服务。</p><a id="more"></a><p>不过对于中小公司来说，除了购买 OSS 服务之外，也可以自己搭建专业的文件服务器，自己搭建专门的文件服务器的话，曾经比较专业的做法是 FastDFS，松哥之前也专门为之录过视频发在 B 站上，感兴趣的小伙伴可以自行查看。不过 FastDFS 搭建比较麻烦，非常容易出错，所以对各位小伙伴来说多多少少有一点门槛。</p><p>松哥在之前的文章录制的一些项目视频中，如果涉及到文件上传，基本上都是保存在项目本地，这种方式比较省事，但是安全性不高。</p><p>所以，今天给大伙介绍一个较好的玩意 MinIO，看看这个工具带给我们什么惊喜。</p><h2 id="1-MinIO-简介"><a href="#1-MinIO-简介" class="headerlink" title="1. MinIO 简介"></a>1. MinIO 简介</h2><p>MinIO 是一个基于 Apache License v2.0 开源协议的对象存储服务，它兼容亚马逊 S3 云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几 KB 到最大 5T 不等。</p><p>MinIO 是一个非常轻量的服务，可以很简单的和其他应用的结合，类似 NodeJS, Redis 或者 MySQL。</p><p>简单来说，可以使用 MinIO 来搭建一个对象存储服务，而且 MinIO 的 Java 客户端和亚马逊的 S3 云存储服务客户端接口兼容，换句话说，你会往 MinIO 上存数据，就会往 S3 上存数据。</p><p>MinIO 的特点：</p><ol><li>兼容 Amazon S3：可以使用 MinIO SDK，MinIO Client，AWS SDK 和 AWS CLI 访问 MinIO 服务器。</li><li>较强的数据保护能力：MinIO 使用 Minio Erasure Code 来防止硬件故障。</li><li>高度可用：MinIO 服务器可以容忍分布式设置中高达<code>（N/2)-1</code> 节点故障。</li><li>支持 Lambda 计算。</li><li>具有加密和防篡改功能：MinIO 为加密数据提供了机密性，完整性和真实性保证，而且性能开销微乎其微。使用 AES-256-GCM，ChaCha20-Poly1305 和 AES-CBC 支持服务器端和客户端加密。</li><li>可对接后端存储：除了 MinIO 自己的文件系统，还支持 DAS、 JBODs、NAS、Google 云存储和 Azure Blob 存储。</li></ol><h2 id="2-MinIO-安装"><a href="#2-MinIO-安装" class="headerlink" title="2. MinIO 安装"></a>2. MinIO 安装</h2><p>不废话了，赶紧装一个体验一把吧。</p><p>为了省事，咱们就直接用 docker 来安装吧，如果你对 docker 还不熟悉，公众号后台回复 docker 获取松哥的 docker 教程。</p><p>我们执行如下命令，安装 MinIO：</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 -p 9001:9001 -d minio/minio server /data --console-address <span class="hljs-string">":9000"</span> --address <span class="hljs-string">":9001"</span></span><br></pre></td></tr></table></figure><p>这个启动命令中配置了两个端口：console-address 是后台管理的网页端口；address 则是 API 通信端口。以上面的启动脚本为例，项目启动成功后，网页上的访问端口是 9000，如果我们通过 Java 代码上传文件，通信端口则是 9001。</p><p>项目启动成功后，浏览器地址栏输入 <code>http://127.0.0.1:9000/login</code> 即可访问到 MinIO 的后端页面：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220414192834.png" alt></p><p>默认的登录用户名和密码均为 <code>minioadmin</code>。</p><p>登录成功之后，我们首先创建一个 bucket，将来我们上传的文件都处于 bucket 之中，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220414193527.png" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/20220414193709.png" alt></p><p>创建成功之后，我们还需要设置一下桶的读取权限，确保文件将来上传成功之后可以读取到，点击左上角的设置按钮进行设置，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220414203833.png" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/20220414203914.png" alt></p><p>设置完成后，接下来我们就可以往这个桶中上传资源了，如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220414193804.png" alt></p><p>上传完成后，就可以看到刚刚上传的文件了：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220414194536.png" alt></p><p>上传成功后，点击文件，然后点击右边的 Share 按钮会弹出来文件的访问链接，由于我们已经设置了文件可读，因此可以不用管这里的链接有效期了，直接通过路径的前面部分就可以访问到刚刚上传的图片了，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220414204008.png" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/20220414205133.png" alt></p><p>现在文件就可上传可访问了。是不是比 FastDFS 容易多了！</p><p>不过前面这种安装方式其实有点小问题，因为我们没有为 docker 容器设置数据卷，所以如果你把 docker 容器不小心删除了，那么数据也就没了！</p><p>所以我们要设置数据卷。</p><p>修正后的 docker 脚本如下：</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 -p 9001:9001 -d --name minio -v /Users/sang/minio/data:/data -v /Users/sang/minio/config:/root/.minio -e <span class="hljs-string">"MINIO_ROOT_USER=javaboy"</span> -e <span class="hljs-string">"MINIO_ROOT_PASSWORD=123@45678"</span> minio/minio server /data --console-address <span class="hljs-string">":9000"</span> --address <span class="hljs-string">":9001"</span></span><br></pre></td></tr></table></figure><p>主要是加了数据卷映射功能，将 MinIO 的数据和配置文件映射到宿主机上，<strong>这样将来即使容器删除了，数据也都还在。</strong></p><p>注意上面也自定义了登录用户名和密码。</p><p>按照上面的命令，重新创建容器之后，我们也创建一个桶并上传文件，上传成功之后，我们就可以在本地对应的文件夹看到我们上传的文件，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220414211329.png" alt></p><h2 id="3-整合-Spring-Boot"><a href="#3-整合-Spring-Boot" class="headerlink" title="3. 整合 Spring Boot"></a>3. 整合 Spring Boot</h2><p>接下来我们再来看看在 Spring Boot 中如何玩 MinIO。</p><p>首先我们创建一个 Spring Boot 项目，引入 Web 依赖，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220415105254.png" alt></p><p>项目创建成功之后，我们再来手动添加一下 MinIO 的依赖，如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.minio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>minio<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我尝试用了最新的版本，但是似乎有一些 BUG，我也没有深究，就换了 8.2.1 这个版本，这个版本是 OK 的。</p><p>接下来我们来配置一下 application.yaml，配置一下文件上传所需要的基本信息：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">minio:</span></span><br><span class="line"><span class="hljs-attr">  endpoint:</span> <span class="hljs-attr">http://localhost:9001</span></span><br><span class="line"><span class="hljs-attr">  accessKey:</span> <span class="hljs-string">javaboy</span></span><br><span class="line"><span class="hljs-attr">  secretKey:</span> <span class="hljs-number">123</span><span class="hljs-string">@45678</span></span><br><span class="line"><span class="hljs-attr">  nginxHost:</span> <span class="hljs-attr">http://local.javaboy.org:9001</span></span><br></pre></td></tr></table></figure><p>这里四个属性：</p><ol><li>endpoint：这是 MinIO 的 API 通信地址。</li><li>accessKey 和 secretKey 是通信的用户名和密码，这跟网页上登录时候的用户名密码一致。</li><li>nginxHost：这个配置用来生成上传文件的访问路径。对于这个路径，有的小伙伴可能会有疑问，nginxHost 不就是 endpoint 吗？为什么还要单独配置？因为对于文件服务器而言，我们上传文件是通过 MinIO，但是访问的时候不一定通过 MinIO，我们可能会自己搭建一个 Nginx 服务器，通过 Nginx 服务器来访问上传后的资源，大家知道 Nginx 非常擅长于做这个事情，效率非常高。所以这里的 nginxHost 其实是指 Nginx 的访问路径。</li></ol><p>接下来我们提供一个 MinioProperties 来接收这里的四个属性，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"minio"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinioProperties</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 连接地址</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> String endpoint;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 用户名</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> String accessKey;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 密码</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> String secretKey;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 域名</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> String nginxHost;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEndpoint</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> endpoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEndpoint</span><span class="hljs-params">(String endpoint)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.endpoint = endpoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAccessKey</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> accessKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAccessKey</span><span class="hljs-params">(String accessKey)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.accessKey = accessKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSecretKey</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> secretKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSecretKey</span><span class="hljs-params">(String secretKey)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.secretKey = secretKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getNginxHost</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> nginxHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNginxHost</span><span class="hljs-params">(String nginxHost)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.nginxHost = nginxHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 application.yaml 中相关的配置注入到这个配置类中来。</p><p>接下来我们需要提供一个 MinIOClient，通过这个客户端工具可以操作 MinIO，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-meta">@EnableConfigurationProperties</span>(MinioProperties.class)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinioConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> MinioProperties minioProperties;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获取MinioClient</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> MinioClient <span class="hljs-title">minioClient</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(minioProperties.getEndpoint())</span><br><span class="line">                .credentials(minioProperties.getAccessKey(), minioProperties.getSecretKey())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个也没啥好说的，传入通信地址以及用户名密码，就可以构建出一个 MinioClient 出来。</p><p>当文件上传成功之后，我们可以通过 MinIO 去访问，也可以通过 Nginx 访问，所以接下来我们就需要提供一个类，来封装这两个地址：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UploadResponse</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String minIoUrl;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> String nginxUrl;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UploadResponse</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UploadResponse</span><span class="hljs-params">(String minIoUrl, String nginxUrl)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.minIoUrl = minIoUrl;</span><br><span class="line">        <span class="hljs-keyword">this</span>.nginxUrl = nginxUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMinIoUrl</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> minIoUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMinIoUrl</span><span class="hljs-params">(String minIoUrl)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.minIoUrl = minIoUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getNginxUrl</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> nginxUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNginxUrl</span><span class="hljs-params">(String nginxUrl)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.nginxUrl = nginxUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来提供一个 MinIO 文件上传工具类：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinioUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> MinioProperties minioProperties;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> MinioClient client;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 创建bucket</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createBucket</span><span class="hljs-params">(String bucketName)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!client.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build())) &#123;</span><br><span class="line">            client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 上传文件</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> UploadResponse <span class="hljs-title">uploadFile</span><span class="hljs-params">(MultipartFile file, String bucketName)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//判断文件是否为空</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == file || <span class="hljs-number">0</span> == file.getSize()) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//判断存储桶是否存在  不存在则创建</span></span><br><span class="line">        createBucket(bucketName);</span><br><span class="line">        <span class="hljs-comment">//文件名</span></span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="hljs-comment">//新的文件名 = 存储桶文件名_时间戳.后缀名</span></span><br><span class="line">        <span class="hljs-keyword">assert</span> originalFilename != <span class="hljs-keyword">null</span>;</span><br><span class="line">        SimpleDateFormat format = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd"</span>);</span><br><span class="line">        String fileName = bucketName + <span class="hljs-string">"_"</span> +</span><br><span class="line">                System.currentTimeMillis() + <span class="hljs-string">"_"</span> + format.format(<span class="hljs-keyword">new</span> Date()) + <span class="hljs-string">"_"</span> + <span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">1000</span>) +</span><br><span class="line">                originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">"."</span>));</span><br><span class="line">        <span class="hljs-comment">//开始上传</span></span><br><span class="line">        client.putObject(</span><br><span class="line">                PutObjectArgs.builder().bucket(bucketName).object(fileName).stream(</span><br><span class="line">                        file.getInputStream(), file.getSize(), -<span class="hljs-number">1</span>)</span><br><span class="line">                        .contentType(file.getContentType())</span><br><span class="line">                        .build());</span><br><span class="line">        String url = minioProperties.getEndpoint() + <span class="hljs-string">"/"</span> + bucketName + <span class="hljs-string">"/"</span> + fileName;</span><br><span class="line">        String urlHost = minioProperties.getNginxHost() + <span class="hljs-string">"/"</span> + bucketName + <span class="hljs-string">"/"</span> + fileName;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UploadResponse(url, urlHost);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获取全部bucket</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Bucket&gt; <span class="hljs-title">getAllBuckets</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> client.listBuckets();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 根据bucketName获取信息</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName bucket名称</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Optional&lt;Bucket&gt; <span class="hljs-title">getBucket</span><span class="hljs-params">(String bucketName)</span> <span class="hljs-keyword">throws</span> IOException, InvalidKeyException, NoSuchAlgorithmException, InsufficientDataException, InvalidResponseException, InternalException, ErrorResponseException, ServerException, XmlParserException, ServerException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> client.listBuckets().stream().filter(b -&gt; b.name().equals(bucketName)).findFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 根据bucketName删除信息</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName bucket名称</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeBucket</span><span class="hljs-params">(String bucketName)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获取⽂件外链</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName bucket名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> objectName ⽂件名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expires    过期时间 &lt;=7</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> url</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getObjectURL</span><span class="hljs-params">(String bucketName, String objectName, Integer expires)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> client.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder().bucket(bucketName).object(objectName).expiry(expires).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获取⽂件</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName bucket名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> objectName ⽂件名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> ⼆进制流</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> InputStream <span class="hljs-title">getObject</span><span class="hljs-params">(String bucketName, String objectName)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> client.getObject(GetObjectArgs.builder().bucket(bucketName).object(objectName).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 上传⽂件</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName bucket名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> objectName ⽂件名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stream     ⽂件流</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception https://docs.minio.io/cn/java-client-api-reference.html#putObject</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putObject</span><span class="hljs-params">(String bucketName, String objectName, InputStream stream)</span> <span class="hljs-keyword">throws</span></span></span><br><span class="line"><span class="hljs-function">            Exception </span>&#123;</span><br><span class="line">        client.putObject(PutObjectArgs.builder().bucket(bucketName).object(objectName).stream(stream, stream.available(), -<span class="hljs-number">1</span>).contentType(objectName.substring(objectName.lastIndexOf(<span class="hljs-string">"."</span>))).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 上传⽂件</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName  bucket名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> objectName  ⽂件名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stream      ⽂件流</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size        ⼤⼩</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> contextType 类型</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception https://docs.minio.io/cn/java-client-api-reference.html#putObject</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putObject</span><span class="hljs-params">(String bucketName, String objectName, InputStream stream, <span class="hljs-keyword">long</span></span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">            size, String contextType)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        client.putObject(PutObjectArgs.builder().bucket(bucketName).object(objectName).stream(stream, size, -<span class="hljs-number">1</span>).contentType(contextType).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获取⽂件信息</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName bucket名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> objectName ⽂件名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception https://docs.minio.io/cn/java-client-api-reference.html#statObject</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> StatObjectResponse <span class="hljs-title">getObjectInfo</span><span class="hljs-params">(String bucketName, String objectName)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> client.statObject(StatObjectArgs.builder().bucket(bucketName).object(objectName).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 删除⽂件</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketName bucket名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> objectName ⽂件名称</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception https://docs.minio.io/cn/java-client-apireference.html#removeObject</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeObject</span><span class="hljs-params">(String bucketName, String objectName)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        client.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都是一些常规的 API 调用，我就不逐行解释了，接下来我们来一个文件上传接口：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileUploadController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    MinioUtil minioUtil;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/upload"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fileUpload</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        UploadResponse bucket01 = minioUtil.uploadFile(file, <span class="hljs-string">"bucket01"</span>);</span><br><span class="line">        System.out.println(<span class="hljs-string">"bucket01.getMinIoUrl() = "</span> + bucket01.getMinIoUrl());</span><br><span class="line">        System.out.println(<span class="hljs-string">"bucket01.getNginxUrl() = "</span> + bucket01.getNginxUrl());</span><br><span class="line">        <span class="hljs-keyword">return</span> bucket01.getMinIoUrl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好啦，大功告成。</p><p>接下来启动 Spring Boot 项目，然后调用这个接口上传文件，上传成功后，控制台会打印如下信息：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220415113501.png" alt></p><p>这就表示文件上传成功了。</p><h2 id="4-配置-nginx"><a href="#4-配置-nginx" class="headerlink" title="4. 配置 nginx"></a>4. 配置 nginx</h2><p>前面提到了 MinIO 可以结合 Nginx 来使用，那我们这里就来配一配 Nginx 看看。</p><p>为了省事，Nginx 我也选择安装到 docker 容器中，但是前面安装 MinIO 时，我们已经做了数据卷映射，即上传到 MinIO 的文件实际上是保存在宿主机的，所以现在也得给 Nginx 配置数据卷，将来让 Nginx 也去 <code>/Users/sang/minio/data</code> 路径下查找文件。</p><p>Nginx 安装指令如下：</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx01 -p 8888:80 -v /Users/sang/minio/data:/usr/share/nginx/html:ro -d nginx</span><br></pre></td></tr></table></figure><p>这里两个关键点：</p><ol><li>设置 Nginx 端口为 8888。</li><li>将 MinIO 映射到宿主机的数据卷，再次挂载到 Nginx 上去。</li></ol><p>大家知道，默认情况下，当我们访问 Nginx 的时候，Nginx 给我们展示出来的数据其实就是 <code>/usr/share/nginx/html</code> 目录下的，现在该目录其实就相当于我宿主机的 <code>/Users/sang/minio/data</code> 目录，所以我现在都不用修改 Nginx 的配置了，装好之后直接使用 Nginx 即可。</p><p>好啦，接下来我们修改一下 application.yaml，如下：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">minio:</span></span><br><span class="line"><span class="hljs-attr">  endpoint:</span> <span class="hljs-attr">http://localhost:9001</span></span><br><span class="line"><span class="hljs-attr">  accessKey:</span> <span class="hljs-string">javaboy</span></span><br><span class="line"><span class="hljs-attr">  secretKey:</span> <span class="hljs-number">123</span><span class="hljs-string">@45678</span></span><br><span class="line"><span class="hljs-attr">  nginxHost:</span> <span class="hljs-attr">http://local.javaboy.org:8888</span></span><br></pre></td></tr></table></figure><p>改完之后，再次上传文件，此时打印出来的文件访问路径如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220415121207.png" alt></p><p>现在我们通过这个 Nginx 路径也能访问到刚刚上传的文件了。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>好啦，今天就和小伙伴们分享一下 MinIO 的用法，并结合 Nginx 搭建了一个简单的文件服务器，感兴趣的小伙伴可以试试哦。</p><p>公众号江南一点雨后台回复 <strong>minio_demo</strong>，获取本文源码下载链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在 OSS 服务算是一个基础服务了，很多云服务厂商都有提供这样的服务，价格也不贵，松哥自己的 &lt;a href=&quot;http://www.javaboy.org&quot;&gt;www.javaboy.org&lt;/a&gt; 用的就是类似的服务。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>不能再简单的意向锁</title>
    <link href="http://www.javaboy.org/2022/0420/intent-lock.html"/>
    <id>http://www.javaboy.org/2022/0420/intent-lock.html</id>
    <published>2022-04-19T16:42:26.000Z</published>
    <updated>2022-07-17T17:03:55.143Z</updated>
    
    <content type="html"><![CDATA[<p>InnoDB 存储引擎支持多粒度锁（multiple granularity locking），也就是允许行锁和表锁共存。当允许行锁和表锁共存的时候，可能会存在下面这样一个问题：</p><a id="more"></a><p>例如我执行如下 SQL：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220403194150.png" alt></p><p>这段 SQL 执行完成后，给 id 为 1 的记录加了排他锁。</p><p>此时，在另外一个会话中，我如果想给这张表再来一个表级共享锁，如下：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">lock</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">read</span>;</span><br></pre></td></tr></table></figure><p>此时就会有一个问题，共享锁和排他锁是互斥的，要给表上共享锁，就得去检查一下表中的每一条记录都不存在排他锁，如果表中的数据量比较大，这个操作效率就会比较低。</p><p>为了解决这个问题，就引出了我们今天的意向锁。为了使多粒度级别的锁定变得实用，InnoDB 使用了意向锁，注意，<strong>意向锁是一种表级锁</strong>，它表示事务稍后对表中的行需要哪种类型的锁（共享或独占）。</p><p>意向锁也分为两类：</p><ol><li>intention shared lock：意向共享锁 (IS) 表示事务打算在表中的各个行上设置共享锁。</li><li>intention exclusive lock：意向排他锁 (IX) 表示事务打算对表中的各个行设置排他锁。</li></ol><p>例如，对于 <code>SELECT ... LOCK IN SHARE MODE;</code> 会自动设置 <code>IS</code> 锁，对于 <code>SELECT ... FOR UPDATE</code> 会自动设置 <code>IX</code> 锁，并且 <code>IS</code> 锁和 <code>IX</code> 锁不需要手动设置，这个是由系统自动设置。</p><p>意向锁的加锁规则如下：</p><ul><li>在事务可以获取表中行的共享锁之前，它必须首先获取表上的 <code>IS</code> 锁或更强的锁。</li><li>在事务可以获取表中行的排他锁之前，它必须首先获取表上的 <code>IX</code> 锁。</li></ul><p>简而言之：IS 和 IX 是表锁，它们存在的意义在于，将来给表上表级的 S 锁或者 X 锁的时候，可以通过 IS 或者 IX 快速判断出当前表中是否已经有加锁记录了，仅此而已。<strong>所以 IS 和 IX 之间其实是兼容的，IX 之间也是兼容的</strong>，如下表：</p><table><thead><tr><th style="text-align:center">兼容性</th><th style="text-align:center">IS</th><th style="text-align:left">IX</th></tr></thead><tbody><tr><td style="text-align:center">IS</td><td style="text-align:center">兼容</td><td style="text-align:left">兼容</td></tr><tr><td style="text-align:center">IX</td><td style="text-align:center">兼容</td><td style="text-align:left">兼容</td></tr></tbody></table><p>但是意向锁和表级锁则有可能冲突，如下：</p><table><thead><tr><th style="text-align:center">兼容性</th><th style="text-align:center">IS</th><th style="text-align:left">IX</th></tr></thead><tbody><tr><td style="text-align:center">X</td><td style="text-align:center">不兼容</td><td style="text-align:left">不兼容</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">兼容</td><td style="text-align:left">不兼容</td></tr></tbody></table><p>上面这张表也好理解：</p><ul><li>如果表上有 IS，说明表中的记录有共享锁，此时就不可以给表加排他锁（X 锁），但是可以给表加共享锁（S 锁）。</li><li>如果表上有 IX，说明表中的记录有排他锁，此时就不可以给表加排他锁（X 锁），也不可以给表加共享锁（S 锁）。</li></ul><p>整体上来说，兼容关系如下表：</p><table><thead><tr><th style="text-align:center">兼容性</th><th style="text-align:center">X</th><th style="text-align:left">IX</th><th style="text-align:center">S</th><th style="text-align:left">IS</th></tr></thead><tbody><tr><td style="text-align:center">X</td><td style="text-align:center">不兼容</td><td style="text-align:left">不兼容</td><td style="text-align:center">不兼容</td><td style="text-align:left">不兼容</td></tr><tr><td style="text-align:center">IX</td><td style="text-align:center">不兼容</td><td style="text-align:left">兼容</td><td style="text-align:center">不兼容</td><td style="text-align:left">兼容</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">不兼容</td><td style="text-align:left">不兼容</td><td style="text-align:center">兼容</td><td style="text-align:left">兼容</td></tr><tr><td style="text-align:center">IS</td><td style="text-align:center">不兼容</td><td style="text-align:left">兼容</td><td style="text-align:center">兼容</td><td style="text-align:left">兼容</td></tr></tbody></table><p>由于意向锁并不需要我们手动添加，那么有没有办法让我们看到意向锁呢？可以的。</p><p>首先我们将系统变量 <code>innodb_status_output_locks</code> 设置为 ON，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220403232144.png" alt></p><p>接下来我们执行如下 SQL，锁定一行数据，此时会自动为表加上 IX 锁：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220403232442.png" alt></p><p>接下来我们在一个新的会话中执行如下指令来查看 InnoDB 存储引擎的情况：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engine innodb status\G</span><br></pre></td></tr></table></figure><p>输出的信息很多，我们重点关注 TRANSACTIONS，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220403233056.png" alt></p><p>可以看到：</p><ul><li><code>TABLE LOCK table test08.user trx id 3564804 lock mode IX</code>：这句就是说事务 id 为 3564804 的事务，为 user 表添加了意向排他锁（IX）。</li><li><code>RECORD LOCKS space id 851 page no 3 n bits 80 index PRIMARY of table test08.user trx id 3564804 lock_mode X locks rec but not gap</code>：这个就是一个锁结构的记录，这里的索引是 PRIMARY，加的锁也是正儿八经的记录锁（not gap），因为索引是 PRIMARY，所以这里没有间隙锁，关于间隙锁，咱们下篇文章继续。</li></ul><p>好啦，希望今天这篇文章能让小伙伴们对意向锁有一个简单的认知。</p><p>参考资料：</p><ol><li><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html#innodb-intention-locks" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html#innodb-intention-locks</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;InnoDB 存储引擎支持多粒度锁（multiple granularity locking），也就是允许行锁和表锁共存。当允许行锁和表锁共存的时候，可能会存在下面这样一个问题：&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.javaboy.org/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://www.javaboy.org/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离 JWT 登录实践</title>
    <link href="http://www.javaboy.org/2022/0418/springsecurity-jwt.html"/>
    <id>http://www.javaboy.org/2022/0418/springsecurity-jwt.html</id>
    <published>2022-04-17T16:42:13.000Z</published>
    <updated>2022-07-17T17:04:03.055Z</updated>
    
    <content type="html"><![CDATA[<p>关于 JWT，松哥之前其实写过相关的教程。最近有小伙伴在微信上发消息，问松哥能不能分析一下若依项目中 JWT 登录流程，因为这个项目现在有不少人将之作为脚手架来开发商业项目。我周末抽空看了下，感觉还蛮简单的，于是整一篇文章和大家分享一下这里的 JWT 登录是咋玩的。</p><a id="more"></a><p>本文我将从如下几个方面来和大家分析：</p><ol><li>验证码分析</li><li>登录流程分析</li><li>认证校验流程分析</li></ol><p>好啦，不废话了，咱们开整吧！</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>若依这个项目有单体版的也有微服务版的，我这里以单体版的为例来和小伙伴们分享，微服务版的以后有空了也可以整一篇文章和大家捋一捋。</p><p>单体版的项目大家可以从 Gitee 上 clone，clone 地址：</p><ul><li><a href="https://gitee.com/y_project/RuoYi-Vue.git" target="_blank" rel="noopener">https://gitee.com/y_project/RuoYi-Vue.git</a></li></ul><p>首先你得先把若依这个项目跑起来，这是一个最最基本的要求了，我觉得没啥好说的。而且它这个运行比较容易，数据库弄好，在项目的配置文件中配一下数据库用户名密码以及 redis 的相关信息即可。</p><p>这个相信大家都能自己搞得定，我就不再多说了。</p><h2 id="2-验证码"><a href="#2-验证码" class="headerlink" title="2. 验证码"></a>2. 验证码</h2><p>项目启动成功之后，启动页面有一个验证码，浏览器按 F12，我们很容易就能看到这个验证码来自 <code>/captchaImage</code> 接口，并且还能看到验证码图片是以 Base64 字符串的形式返回到前端的。</p><p>我们找到服务端的验证码接口，在 <code>src/main/java/com/ruoyi/web/controller/common/CaptchaController.java</code> 里：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/captchaImage"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">getCode</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    AjaxResult ajax = AjaxResult.success();</span><br><span class="line">    <span class="hljs-keyword">boolean</span> captchaOnOff = configService.selectCaptchaOnOff();</span><br><span class="line">    ajax.put(<span class="hljs-string">"captchaOnOff"</span>, captchaOnOff);</span><br><span class="line">    <span class="hljs-keyword">if</span> (!captchaOnOff) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> ajax;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 保存验证码信息</span></span><br><span class="line">    String uuid = IdUtils.simpleUUID();</span><br><span class="line">    String verifyKey = Constants.CAPTCHA_CODE_KEY + uuid;</span><br><span class="line">    String capStr = <span class="hljs-keyword">null</span>, code = <span class="hljs-keyword">null</span>;</span><br><span class="line">    BufferedImage image = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-comment">// 生成验证码</span></span><br><span class="line">    String captchaType = RuoYiConfig.getCaptchaType();</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-string">"math"</span>.equals(captchaType)) &#123;</span><br><span class="line">        String capText = captchaProducerMath.createText();</span><br><span class="line">        capStr = capText.substring(<span class="hljs-number">0</span>, capText.lastIndexOf(<span class="hljs-string">"@"</span>));</span><br><span class="line">        code = capText.substring(capText.lastIndexOf(<span class="hljs-string">"@"</span>) + <span class="hljs-number">1</span>);</span><br><span class="line">        image = captchaProducerMath.createImage(capStr);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"char"</span>.equals(captchaType)) &#123;</span><br><span class="line">        capStr = code = captchaProducer.createText();</span><br><span class="line">        image = captchaProducer.createImage(capStr);</span><br><span class="line">    &#125;</span><br><span class="line">    redisCache.setCacheObject(verifyKey, code, Constants.CAPTCHA_EXPIRATION, TimeUnit.MINUTES);</span><br><span class="line">    <span class="hljs-comment">// 转换流信息写出</span></span><br><span class="line">    FastByteArrayOutputStream os = <span class="hljs-keyword">new</span> FastByteArrayOutputStream();</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        ImageIO.write(image, <span class="hljs-string">"jpg"</span>, os);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> AjaxResult.error(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    ajax.put(<span class="hljs-string">"uuid"</span>, uuid);</span><br><span class="line">    ajax.put(<span class="hljs-string">"img"</span>, Base64.encode(os.toByteArray()));</span><br><span class="line">    <span class="hljs-keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证码的大致逻辑是这样：</p><ol><li>首先调用 configService.selectCaptchaOnOff() 方法去数据库 sys_config 表中查询验证码是开启的还是关闭的，如果验证码是关闭的，那么这里就不需要返回验证码的图片，前端将来也不会显示出来验证码。这种系统配置，在项目启动的时候会自动存到 Redis 中，所以当调用 selectCaptchaOnOff 方法时，并不是每一次都去数据库中查询。</li><li>接下来就准备生成验证码了，这里使用 GitHub 上的开源项目 kaptcha （<a href="https://github.com/penggle/kaptcha" target="_blank" rel="noopener">https://github.com/penggle/kaptcha</a>）来生成验证码，验证码有两种模式，math 和 char，math 验证码图片上显示的是一个四则运算，给出计算结果；char 验证码图片上显示的就是大家常见的字符串。具体使用哪一个，是通过 RuoYiConfig.getCaptchaType() 配置来设置的，该配置的值是从 application.yaml 中读取的，即修改 application.yaml 中的 ruoyi.captchaType 属性值，可以修改验证码的形式。</li><li>接下来，将生成的验证码文本存入 redis 中，同时设置一个过期时间，默认的过期时间是两分钟，意思是，一个验证码生成之后，如果用户两分钟之内还没登录，那么验证码就过期了。这里大家注意 redis 中的 key，这个 key 是一个固定的字符串加上 uuid 生成的，这样就能确保每位用户的验证码不会冲突。</li><li>最后就是把生成的验证码图片搞成一个 Base64 字符串返回到前端。</li></ol><p>这就是验证码的生成过程。</p><h2 id="3-登录配置"><a href="#3-登录配置" class="headerlink" title="3. 登录配置"></a>3. 登录配置</h2><p>登录相关的配置在 <code>src/main/java/com/ruoyi/framework/config/SecurityConfig.java</code> 类中，我们先来看看：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="hljs-keyword">true</span>, securedEnabled = <span class="hljs-keyword">true</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 自定义用户认证逻辑</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 认证失败处理类</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> AuthenticationEntryPointImpl unauthorizedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 退出处理类</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> LogoutSuccessHandlerImpl logoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * token认证过滤器</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> JwtAuthenticationTokenFilter authenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 跨域过滤器</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> CorsFilter corsFilter;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 解决 无法直接注入 AuthenticationManager</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        httpSecurity</span><br><span class="line">                <span class="hljs-comment">// CSRF禁用，因为不使用session</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="hljs-comment">// 认证失败处理类</span></span><br><span class="line">                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()</span><br><span class="line">                <span class="hljs-comment">// 基于token，所以不需要session</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">                <span class="hljs-comment">// 过滤请求</span></span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="hljs-comment">// 对于登录login 注册register 验证码captchaImage 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="hljs-string">"/login"</span>, <span class="hljs-string">"/register"</span>, <span class="hljs-string">"/captchaImage"</span>).anonymous()</span><br><span class="line">                .antMatchers(</span><br><span class="line">                        HttpMethod.GET,</span><br><span class="line">                        <span class="hljs-string">"/"</span>,</span><br><span class="line">                        <span class="hljs-string">"/*.html"</span>,</span><br><span class="line">                        <span class="hljs-string">"/**/*.html"</span>,</span><br><span class="line">                        <span class="hljs-string">"/**/*.css"</span>,</span><br><span class="line">                        <span class="hljs-string">"/**/*.js"</span>,</span><br><span class="line">                        <span class="hljs-string">"/profile/**"</span></span><br><span class="line">                ).permitAll()</span><br><span class="line">                .antMatchers(<span class="hljs-string">"/swagger-ui.html"</span>).anonymous()</span><br><span class="line">                .antMatchers(<span class="hljs-string">"/swagger-resources/**"</span>).anonymous()</span><br><span class="line">                .antMatchers(<span class="hljs-string">"/webjars/**"</span>).anonymous()</span><br><span class="line">                .antMatchers(<span class="hljs-string">"/*/api-docs"</span>).anonymous()</span><br><span class="line">                .antMatchers(<span class="hljs-string">"/druid/**"</span>).anonymous()</span><br><span class="line">                <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .headers().frameOptions().disable();</span><br><span class="line">        httpSecurity.logout().logoutUrl(<span class="hljs-string">"/logout"</span>).logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">        <span class="hljs-comment">// 添加JWT filter</span></span><br><span class="line">        httpSecurity.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="hljs-comment">// 添加CORS filter</span></span><br><span class="line">        httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);</span><br><span class="line">        httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 强散列哈希加密实现</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> BCryptPasswordEncoder <span class="hljs-title">bCryptPasswordEncoder</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 身份认证接口</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都是 Spring Security 的常规配置，没啥好说的，松哥大概上看了一眼，这里涉及到的所有知识点我都在 Spring Security 系列教程里和大家聊过，所以这里也不再赘述了。</p><p>我这里给出几篇旧文的链接，有助于大家理解这里的配置：</p><ol><li><a href="https://mp.weixin.qq.com/s/Q0GkUb1Nt6ynV22LFHuQrQ" target="_blank" rel="noopener">松哥手把手带你入门 Spring Security，别再问密码怎么解密了</a></li><li><a href="https://mp.weixin.qq.com/s/kHJRKwH-WUx-JEeaQMa7jw" target="_blank" rel="noopener">手把手教你定制 Spring Security 中的表单登录</a></li><li><a href="https://mp.weixin.qq.com/s/Xzt9ymff0DCbAQbklHOxpQ" target="_blank" rel="noopener">Spring Security 做前后端分离，咱就别做页面跳转了！统统 JSON 交互</a></li><li><a href="https://mp.weixin.qq.com/s/VWJvINbi1DB3fF-Mcx7mGg" target="_blank" rel="noopener">Spring Security+Spring Data Jpa 强强联手，安全管理只有更简单！</a></li><li><a href="https://mp.weixin.qq.com/s/_iau1jsnc50vs794_ib0IA" target="_blank" rel="noopener">Spring Security 多种加密方案共存，老破旧系统整合利器！</a></li></ol><p>如果大家对于 Spring Security 的用法还不熟悉，可以在公众号后台回复 <code>ss</code> 获取 Spring Security 教程链接。</p><h2 id="4-登录接口"><a href="#4-登录接口" class="headerlink" title="4. 登录接口"></a>4. 登录接口</h2><p>这里的登录接口是在 <code>com.ruoyi.web.controller.system.SysLoginController#login</code> 方法中，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/login"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">login</span><span class="hljs-params">(@RequestBody LoginBody loginBody)</span> </span>&#123;</span><br><span class="line">    AjaxResult ajax = AjaxResult.success();</span><br><span class="line">    <span class="hljs-comment">// 生成令牌</span></span><br><span class="line">    String token = loginService.login(loginBody.getUsername(), loginBody.getPassword(), loginBody.getCode(),</span><br><span class="line">            loginBody.getUuid());</span><br><span class="line">    ajax.put(Constants.TOKEN, token);</span><br><span class="line">    <span class="hljs-keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们可以看到，登录的核心逻辑在 loginService#login 方法中，一起来看下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(String username, String password, String code, String uuid)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> captchaOnOff = configService.selectCaptchaOnOff();</span><br><span class="line">    <span class="hljs-comment">// 验证码开关</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (captchaOnOff) &#123;</span><br><span class="line">        validateCaptcha(username, code, uuid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 用户验证</span></span><br><span class="line">    Authentication authentication = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// 该方法会去调用UserDetailsServiceImpl.loadUserByUsername</span></span><br><span class="line">        authentication = authenticationManager</span><br><span class="line">                .authenticate(<span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(username, password));</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(<span class="hljs-string">"user.password.not.match"</span>)));</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserPasswordNotMatchException();</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, e.getMessage()));</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ServiceException(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_SUCCESS, MessageUtils.message(<span class="hljs-string">"user.login.success"</span>)));</span><br><span class="line">    LoginUser loginUser = (LoginUser) authentication.getPrincipal();</span><br><span class="line">    recordLoginInfo(loginUser.getUserId());</span><br><span class="line">    <span class="hljs-comment">// 生成token</span></span><br><span class="line">    <span class="hljs-keyword">return</span> tokenService.createToken(loginUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先去校验一下验证码，这个逻辑没啥好说的，从 Redis 中把数据拿出来做个比较就行了。</li><li>调用 authenticationManager#authenticate 方法手动完成用户校验，如果登录成功就正常执行，如果登录失败，就会抛出异常。</li><li>接下来有一个异步任务，将用户的登录日志写入到数据库中。</li><li>然后还更新了一下用户表（更细了登录 IP、时间等信息）。</li><li>最后创建一个 JWT 令牌。</li></ul><p>来看下令牌的创建过程：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">createToken</span><span class="hljs-params">(LoginUser loginUser)</span> </span>&#123;</span><br><span class="line">    String token = IdUtils.fastUUID();</span><br><span class="line">    loginUser.setToken(token);</span><br><span class="line">    setUserAgent(loginUser);</span><br><span class="line">    refreshToken(loginUser);</span><br><span class="line">    Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    claims.put(Constants.LOGIN_USER_KEY, token);</span><br><span class="line">    <span class="hljs-keyword">return</span> createToken(claims);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">createToken</span><span class="hljs-params">(Map&lt;String, Object&gt; claims)</span> </span>&#123;</span><br><span class="line">    String token = Jwts.builder()</span><br><span class="line">            .setClaims(claims)</span><br><span class="line">            .signWith(SignatureAlgorithm.HS512, secret).compact();</span><br><span class="line">    <span class="hljs-keyword">return</span> token;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refreshToken</span><span class="hljs-params">(LoginUser loginUser)</span> </span>&#123;</span><br><span class="line">    loginUser.setLoginTime(System.currentTimeMillis());</span><br><span class="line">    loginUser.setExpireTime(loginUser.getLoginTime() + expireTime * MILLIS_MINUTE);</span><br><span class="line">    <span class="hljs-comment">// 根据uuid将loginUser缓存</span></span><br><span class="line">    String userKey = getTokenKey(loginUser.getToken());</span><br><span class="line">    redisCache.setCacheObject(userKey, loginUser, expireTime, TimeUnit.MINUTES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这两个方法也没啥好说的，松哥之前的文章也和大家聊过 JWT（公号后台回复 666 有相关内容），这里 JWT 的生成过程跟松哥之前所说的基本上也是一模一样。大家从 JWT 生成的代码中可以看到，JWT 是通过 claims 变量生成的，该变量里边只有一个键值对，那就是一个 uuid 字符串。在生成 token 的过程中，有一个 refreshToken，这个方法中会以当前的 uuid 为 key，将登录的用户信息存入 redis 中，并为该信息设置一个过期时间，默认的过期时间是 30 分钟。</p><p>最终，这里的 token 会被写回到前端，在前端登录成功之后，用户就可以拿到这个令牌。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220417210200.png" alt></p><p>以后前端每次请求的时候，都自己带上这个 token，当然这是前端的事，我们不用管。</p><p>松哥在之前的文章中和大家聊 JWT 的时候，说这是一种典型的无状态登录方案，但是无状态登录无法解决用户的注销等问题，所以我们在若依的项目中看到，虽然他用到了 JWT，但是本质上其实还是一种有状态登录，只不过登录的信息没有存在 session 中，而是存在 redis 中，以前那个由浏览器自动传递的 jsessionid 现在改为了用户手动传递 token，就是这么个过程。</p><h2 id="5-认证"><a href="#5-认证" class="headerlink" title="5. 认证"></a>5. 认证</h2><p>当用户登录成功后，以后每次发送请求的时候，都要携带上 token 令牌，当然这是前端的事情，我们这里暂且不讨论。</p><p>我们来看看后续来的请求是如何验证有没有登录的。</p><p>相关的代码在 <code>src/main/java/com/ruoyi/framework/security/filter/JwtAuthenticationTokenFilter.java</code>：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtAuthenticationTokenFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> TokenService tokenService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="hljs-function">            <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        LoginUser loginUser = tokenService.getLoginUser(request);</span><br><span class="line">        <span class="hljs-keyword">if</span> (StringUtils.isNotNull(loginUser) &amp;&amp; StringUtils.isNull(SecurityUtils.getAuthentication())) &#123;</span><br><span class="line">            tokenService.verifyToken(loginUser);</span><br><span class="line">            UsernamePasswordAuthenticationToken authenticationToken = <span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(loginUser, <span class="hljs-keyword">null</span>, loginUser.getAuthorities());</span><br><span class="line">            authenticationToken.setDetails(<span class="hljs-keyword">new</span> WebAuthenticationDetailsSource().buildDetails(request));</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>tokenService.getLoginUser 这个方法从登录请求的请求头中拿出来 token，再根据这个 token，去 redis 中获取到 LoginUser。</li><li>如果从 redis 中拿到了 LoginUser，并且当前的 SecurityContextHolder 中没有用户认证信息，我们就去认证。大家知道，在 Spring Security 中，用户的认证信息其实是保存在 SecurityContextHolder 中的，如果大家不了解的话，在公众号后台回复 <code>ss</code> 有相关的教程（<a href="https://mp.weixin.qq.com/s/4dcQ6lohB3sEcnkAXxdZwg" target="_blank" rel="noopener">在 Spring Security 中，我就想从子线程获取用户登录信息，怎么办？</a>）。</li><li>调用 tokenService.verifyToken 方法去验证 token，这里的验证其实就是验证一下这个 token 过期没，因为前面如果能拿到 loginUser 对象的话，就说明 token 是合法的，所以这里不需要进行合法性校验。同时在验证完 token 的有效期之后，还顺便刷新一下 redis 中 token 的有效期，以前用 session 的时候，服务端可以自动续签，现在只能手动了。</li><li>最后把认证成功的用户信息存到 SecurityContextHolder 中即可，后续如何需要校验，自然会读到该信息。</li></ol><p>如果当前请求中没有 token，那么拿到的 loginUser 就为 null，这个过滤器继续向下走，在 Spring Security 最终的过滤器链中，就会自动检测到用户没登录，进而抛出异常。</p><p>好了，大概上就是这么个过程，这个过滤器会在第二小节的配置中，被加入到 Spring Security 的过滤器链中。</p><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h2><p>好啦，今天就和大家简单梳理了一下若依这个项目的登录，一些 Spring Security 的使用细节我并没有过多的去展开，如果大家对 Spring Security 的用法不熟练的话，可以看看松哥之前的 Spring Security 教程，公众号后台回复 <code>ss</code> 有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 JWT，松哥之前其实写过相关的教程。最近有小伙伴在微信上发消息，问松哥能不能分析一下若依项目中 JWT 登录流程，因为这个项目现在有不少人将之作为脚手架来开发商业项目。我周末抽空看了下，感觉还蛮简单的，于是整一篇文章和大家分享一下这里的 JWT 登录是咋玩的。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 保存日期，用哪种数据类型合适？datetime？timestamp？还是 int？</title>
    <link href="http://www.javaboy.org/2022/0415/mysql-datatime.html"/>
    <id>http://www.javaboy.org/2022/0415/mysql-datatime.html</id>
    <published>2022-04-14T16:41:58.000Z</published>
    <updated>2022-07-17T17:03:58.624Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>日期算是我们在日常开发中经常用到的数据类型，一般来说一张表都有 createTime 和 updateTime 字段，MySQL 中针对日期也提供了很多种不同的数据类型，如：</p><a id="more"></a><ul><li>datetime</li><li>timestamp</li><li>int</li></ul><p>等等。甚至也有人直接将日期存为字符串的。</p><p>那么到底该用哪种类型来保存日期呢？</p><h2 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1. 字符串"></a>1. 字符串</h2><p>在这些类型中，首先应该排除掉的就是字符串了，很多新手小伙伴爱用字符串存储日期，但实际上这并不是一个很好的方案。</p><p>使用字符串存储日期，第一个显而易见的问题就是无法使用 MySQL 中提供的日期函数，这会为很多查询带来不便。</p><blockquote><p>例如用户表中有一个字段 birthday，表示用户的生日，现在想要查询 2001 出生的所有用户，如果 birthday 是 日期类型，就可以使用 YEAR 函数，但是如果 birthday 是字符串类型，这个问题就不太好处理了。</p></blockquote><p>使用字符串存储日期的第二个问题就是占用空间较大，例如存储如下时间：</p><p><code>2021-01-01 00:00:00</code></p><ul><li>如果使用字符串，需要 19 个字节。</li><li>如果使用 datetime 需要 8 个字节。</li><li>如果使用 timestamp 需要 4 个字节。</li></ul><p>所以首先排除掉字符串。</p><h2 id="2-DATETIME-VS-TIMESTAMEP"><a href="#2-DATETIME-VS-TIMESTAMEP" class="headerlink" title="2. DATETIME VS TIMESTAMEP"></a>2. DATETIME VS TIMESTAMEP</h2><h3 id="2-1-占用空间"><a href="#2-1-占用空间" class="headerlink" title="2.1 占用空间"></a>2.1 占用空间</h3><p>DATETIME 在数据库中存储的形式为：<code>YYYY-MM-DD hh:mm:ss</code>，至于占用的字节数，则看情况，我们来看一段来自 MySQL 官网的内容：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220321233006.png" alt></p><p>可以看到，MySQL5.6.4 是一个分水岭：</p><ul><li>在 MySQL5.6.4 之前，DATETIME 固定占用 8 个字节。</li><li>从 MySQL5.6.4 开始，DATETIME 类型开始支持毫秒，DATETIME(N) 中的 N 表示毫秒的精度，例如，DATETIME(6) 表示可以存储 6 位的毫秒值，那么此时，DATETIME 占用的字节数，就跟后面的毫秒数有关了，如果 DATETIME 没有详细到毫秒，那么占用 5 个字节，如果详细到毫秒了，那就看情况，根据毫秒的精度，占用不同的空间，毫秒精度小于等于 2 时，总共占用 6 个字节；毫秒精度小于等于 4 时，总共占用 7 个字节；毫秒精度小于等于 6 时，总共占用 8 个字节。</li></ul><p>同样，由上图我们也可以看出，在 MySQL5.6.4 之前，TIMESTAMEP 固定占用 4 个字节，从 MySQL5.6.4 开始，依据毫秒的精度，TIMESTAMEP 占用的字节数介于 4 到 7 之间。</p><p>所以无论是 TIMESTAMEP，还是 DATETIME，都是比字符串节省空间的。</p><h3 id="2-2-存储范围"><a href="#2-2-存储范围" class="headerlink" title="2.2 存储范围"></a>2.2 存储范围</h3><p>DATETIME 的存储范围介于 <code>1000-01-01 00:00:00</code> 到 <code>9999-12-31 23:59:59</code> 之间。</p><p>TIMESTAMP 的存储范围则介于 <code>1970-01-01 00:00:01</code> UTC 到 <code>2038-01-19 03:14:07</code> UTC 之间。</p><p>很明显 DATETIME 的存储范围要更大一些。</p><h3 id="2-3-底层存储"><a href="#2-3-底层存储" class="headerlink" title="2.3 底层存储"></a>2.3 底层存储</h3><p>TIMESTAMP 类型最大的优势在于自带时区属性，因为它本质上是从毫秒转化而来。如果你的业务需要对应不同的国家时区，那么类型 TIMESTAMP 是一种不错的选择，TIMESTAMP 类型字段的值会随着服务器时区的变化而变化，自动换算成相应的时间，说简单点就是在不同时区，查询到同一个条记录此字段的值会不一样。</p><p>举个 TIMESTAMP 的使用场景例子：</p><p>新闻类的业务，通常用户想知道这篇新闻发布时对应的自己国家时间，那么 TIMESTAMP 是一种不错的选择。</p><p>TIMESTAMP 会随着时区的变化而自动调整，而 DATETIME 不会。</p><p>我举个例子：假设我数据库目前的时区是 <code>Asia/Shanghai</code>：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220324212633.png" alt></p><p>现在有一个 user 表，数据如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220324212758.png" alt></p><p>其中，createTime 字段是 DATETIME，而 updateTime 是 TIMESTAMP，现在我修改一下数据库时区，我们再来查看：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220324213105.png" alt></p><p>小伙伴们可以看到，我把时区设置为东京，东京比我们快一个小时，此时 updateTime 自动变了，而 DATETIME 不变。</p><p><strong>时区的问题一定要谨慎，不过时区问题也并非一定要在数据库中解决，也可以在前端或者服务端用代码处理下。</strong></p><h3 id="2-4-性能比较"><a href="#2-4-性能比较" class="headerlink" title="2.4 性能比较"></a>2.4 性能比较</h3><p>从毫秒数转换到 TIMESTAMP 并不费事，但是当要进行时区转换的时候，需要调用操作系统底层系统函数，而这个函数需要额外的加锁操作，以确保这时操作系统时区没有修改，一加锁，效率就低了。</p><p>对于这个问题，只存在于 TIMESTAMP 中，因为 DATETIME 不存在时区转化问题。</p><p>对于 TIMESTAMP，建议使用显式的时区，而不是操作系统时区。</p><h2 id="3-int"><a href="#3-int" class="headerlink" title="3. int"></a>3. int</h2><p>字符串费空间，TIMESTAMP 和 DATETIME 如果没有吃透则总感觉乱乱的，所以也有人存时间戳，存一个 int 类型的数值，用一个时间戳来表示时间。</p><p>用 int 保存时间的话，当我们需要进行日期排序以及按照日期范围查询的时候，就变成了普通的数字比较了，那么效率肯定是杠杠滴。</p><p>不过 int 有一个致命的问题就是可读性太差，所以用不用 int 就要仔细斟酌看情况了。</p><p>好啦，小伙伴们留言说说你日常开发日期用的哪种类型呢？出于什么样的考虑用了该类型？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;日期算是我们在日常开发中经常用到的数据类型，一般来说一张表都有 createTime 和 updateTime 字段，MySQL 中针对日期也提供了很多种不同的数据类型，如：&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.javaboy.org/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://www.javaboy.org/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>自动生成实体类，哪个最佳？</title>
    <link href="http://www.javaboy.org/2022/0414/mybatis-plus-generator.html"/>
    <id>http://www.javaboy.org/2022/0414/mybatis-plus-generator.html</id>
    <published>2022-04-13T16:41:45.000Z</published>
    <updated>2022-07-17T17:03:24.482Z</updated>
    
    <content type="html"><![CDATA[<p>看过松哥视频的小伙伴都知道，我个人习惯用一个名叫 MyBatis Generator 的逆向工具，利用这个工具我们自动生成实体类和 mapper 接口以及对应的 xml 文件，MyBatis Generator 是一个独立工具，你可以下载它的 jar 包来运行、也可以在 Ant 或者 maven 中配置插件运行。</p><a id="more"></a><p>大家在松哥公众号后台回复 mybatis-gen 有这个工具的下载链接。</p><p>虽然我一直用这个工具，但是总感觉它太有年代感了，用久了有点腻。所以很多时候看到公众号里有人推荐其他的 MyBatis 逆向工具，我也都会去试一试，特别是一些 IDEA 中的插件。</p><p>这些插件我目前装了几个开源免费的，不过都不怎么好用，而且几乎都有 BUG。不过这块也有一些是付费的插件，付费的应该会好用一些，不过我没怎么试过，毕竟这并不是刚需。</p><p>去年我还自己开发了一个工具，手把手教大家完成一个自己的 MyBatis 逆向工具，还录了一个配套视频：</p><ul><li><a href="https://www.bilibili.com/video/BV1Vo4y1Z7af?spm_id_from=333.999.0.0" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Vo4y1Z7af</a></li></ul><p><img src="http://img.itboyhub.com/2021/10/tran/20220413210517.png" alt></p><p>项目地址：</p><ul><li><a href="https://github.com/lenve/generate_code" target="_blank" rel="noopener">https://github.com/lenve/generate_code</a></li></ul><p>除了这些工具之外，我最近用的比较多的是一个 MyBatis-Plus 提供的，也是非常方便，如果你项目中用到了 MyBatis-Plus，那么这个工具还是特别好用的。</p><p>我给大家举一个简单例子。</p><p>首先我们创建一个 Spring Boot 工具，引入 Web、MyBatis、Freemarker 以及 MySQL 驱动，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220413215233.png" alt></p><p>引入 Freemarker 是因为我们将来使用 Freemarker 做代码模板，松哥之前自己开发的那个逆向工程，里边使用的代码模版就是 Freemarker。</p><p>项目创建成功之后，引入 MyBatis-Plus 相关依赖，一共是两个：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个是 MP 自己的依赖，还有一个是逆向工程的依赖。</p><p>接下来我们在 application.properties 中配置一下数据连接信息：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:///vhr?serverTimezone=Asia/Shanghai&amp;useSSL=false</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line"></span><br><span class="line">mybatis-plus.configuration.map-underscore-to-camel-case=false</span><br></pre></td></tr></table></figure><p>上面三行是数据库连接的基本信息。最下面一行表示在 MP 将来查询的时候，不要自动进行列名转化。啥意思呢？比如我在 Book 类中有一个属性名为 authorName，那么在 MP 去数据库查询的时候，会自动把 authorName 转为 author_name，如果数据表在定义的时候刚好就是下划线那么没问题，但是如果数据表在定义的时候，不是下划线，那么自动转换之后就会出错，现在加上上面这个最后一行配置，就没问题了。</p><p>项目创建成功后，我们直接在单元测试中添加如下代码，进行代码生成：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FastAutoGenerator.create(<span class="hljs-string">"jdbc:mysql:///vhr?serverTimezone=Asia/Shanghai&amp;useSSL=false"</span>, <span class="hljs-string">"root"</span>, <span class="hljs-string">"123"</span>)</span><br><span class="line">        .globalConfig(builder -&gt; &#123;</span><br><span class="line">            builder.author(<span class="hljs-string">"javaboy"</span>) <span class="hljs-comment">// 设置作者</span></span><br><span class="line">                    .disableOpenDir()</span><br><span class="line">                    .fileOverride() <span class="hljs-comment">// 覆盖已生成文件</span></span><br><span class="line">                    .outputDir(<span class="hljs-string">"src/main/java"</span>); <span class="hljs-comment">// 指定输出目录</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .packageConfig(builder -&gt; &#123;</span><br><span class="line">            builder.parent(<span class="hljs-string">"org.javaboy"</span>) <span class="hljs-comment">// 设置父包名</span></span><br><span class="line">                    .moduleName(<span class="hljs-string">"mybatis_gen"</span>) <span class="hljs-comment">// 设置父包模块名</span></span><br><span class="line">                    .pathInfo(Collections.singletonMap(OutputFile.xml, <span class="hljs-string">"src/main/resources/mapper"</span>)); <span class="hljs-comment">// 设置mapperXml生成路径</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .strategyConfig(builder -&gt; &#123;</span><br><span class="line">            builder.addInclude(<span class="hljs-string">"employee"</span>) <span class="hljs-comment">// 设置需要生成的表名</span></span><br><span class="line">                    .addTablePrefix(<span class="hljs-string">"t_"</span>, <span class="hljs-string">"c_"</span>); <span class="hljs-comment">// 设置过滤表前缀</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .templateEngine(<span class="hljs-keyword">new</span> FreemarkerTemplateEngine()) <span class="hljs-comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">        .execute();</span><br></pre></td></tr></table></figure><p>上面的配置分了四块：</p><ol><li>globalConfig：这个是全剧配置，配置了生成的代码注释中的作者信息；默认情况下，代码生成完毕后会自动打开生成的目录，disableOpenDir 方法表示禁用这个功能；fileOverride 方法即将被移除，未来会不可用；最后的 outputDir 方法则是指定生成代码的输出目录。</li><li>packageConfig：这个是配置生成的包信息，parent 方法用来设置父包名；moduleName 设置父包模块名，这个参数的值加上 parent 的参数值，就是完整的包路径；最后面则是指定了生成的 mapper.xml 文件的位置。</li><li>strategyConfig：这个是配置策略，对于我们来说，这里比较重要的就是配置需要逆向的表，将表名称挨个列出来。</li><li>templteEngine：这个是配置模版引擎。</li></ol><p>除了上面这些常规的配置外，如果你的需求比较特殊，也可以配置其他选项，具体的参考这个文档：</p><ul><li><a href="https://baomidou.com/pages/981406/" target="_blank" rel="noopener">https://baomidou.com/pages/981406/</a></li></ul><p>配置完成后，执行这段单元测试代码，生成相关代码，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220413222602.png" alt></p><p>接下来，想做增删改查，直接做即可，像下面这样：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    IEmployeeService iEmployeeService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/emps"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getAllEmps</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = iEmployeeService.list();</span><br><span class="line">        <span class="hljs-keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IEmployeeService 继承自 IService，常规的增删改查该有的都有。</p><p>最近感觉这个比较好用，我一直在用这个，感兴趣的小伙伴不妨试试。</p><p>小伙伴们有什么好用的逆向工程工具欢迎留言推荐。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看过松哥视频的小伙伴都知道，我个人习惯用一个名叫 MyBatis Generator 的逆向工具，利用这个工具我们自动生成实体类和 mapper 接口以及对应的 xml 文件，MyBatis Generator 是一个独立工具，你可以下载它的 jar 包来运行、也可以在 Ant 或者 maven 中配置插件运行。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.javaboy.org/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.javaboy.org/tags/SpringBoot/"/>
    
      <category term="MyBatisPlus" scheme="http://www.javaboy.org/tags/MyBatisPlus/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 总是差八个小时，如何破？</title>
    <link href="http://www.javaboy.org/2022/0411/mysql-timezone.html"/>
    <id>http://www.javaboy.org/2022/0411/mysql-timezone.html</id>
    <published>2022-04-10T16:41:29.000Z</published>
    <updated>2022-07-17T17:04:46.369Z</updated>
    
    <content type="html"><![CDATA[<p>今天来聊一个简单的话题，这是一个小伙伴在微信上问我的，对于初学者我非常能理解这类问题带来的困扰，各种尝试，各种搜索，别人说的头头是道，但是就是解决不了自己的问题，今天我简单从两个方面来和大家聊聊这个问题，如果小伙伴们有其他的解决思路，也可以留言一起分享。</p><a id="more"></a><p>这个问题我们可以从两方面来分析：</p><ol><li>MySQL 本身的问题。</li><li>Java 代码的问题。</li></ol><h2 id="1-MySQL-本身问题"><a href="#1-MySQL-本身问题" class="headerlink" title="1. MySQL 本身问题"></a>1. MySQL 本身问题</h2><p>MySQL 本身问题，这个其实很好验证，不就是时间么，我们执行如下 SQL 看看 MySQL 上的时间跟我的电脑时间是否是一致的：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-keyword">now</span>();</span><br></pre></td></tr></table></figure><p><img src="http://img.itboyhub.com/2021/10/tran/20220322221637.png" alt></p><p>可以看到，MySQL 的这个时间跟我系统的时间其实就差了 8 小时，MySQL 本身的时间都不对，那你将来插入/查询的时间肯定也不对。</p><p><strong>这个查询大家注意，要么使用命令行操作，要么使用 Sqlyog、Navicat 或者 Sequel Pro 之类的数据库工具来操作，切勿使用 JDBC 来查询，具体原因一会看完第二小节就明白了。</strong></p><p>出现这个问题，多半是 MySQL 的时区不太对，我们重新给其设置一下时区即可。</p><p>首先我们通过如下指令来查看一下 MySQL 当前的时区：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">show</span> <span class="hljs-keyword">variables</span> <span class="hljs-keyword">like</span> <span class="hljs-string">'%time_zone%'</span>;</span><br></pre></td></tr></table></figure><p><img src="http://img.itboyhub.com/2021/10/tran/20220322222332.png" alt></p><p>可以看到，MySQL 说它的时区是 SYSTEM，那 SYSTEM 又是啥呢？第一条说了 SYSTEM 是 UTC（协调世界时，又称世界标准时间或世界协调时间）。而我们的北京时间比 UTC 快了 8 小时，即 UTC+8。</p><p>所以我们现在要把 MySQL 的时区先给改对，可以通过修改配置文件来实现（<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>），如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220322222924.png" alt></p><p>修改完成后，重启 MySQL，再来查看 MySQL 的时区：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220322223147.png" alt></p><p>可以看到，此时的 MySQL 时区就正常了。</p><p>那么此时再执行 <code>select now();</code> 也就不会有问题了：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220322223238.png" alt></p><p>有的小伙伴可能嫌修改配置文件太麻烦了，那么也可以通过 SQL 来修改时区：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">time_zone</span> = Asia/Shanghai</span><br></pre></td></tr></table></figure><p><strong>注意我们所在的时区是 Asia/Shanghai，小伙伴们不要自由发挥写其他城市。</strong></p><p>首先我们要确认 MySQL 没问题。</p><h2 id="2-JDBC-连接问题"><a href="#2-JDBC-连接问题" class="headerlink" title="2. JDBC 连接问题"></a>2. JDBC 连接问题</h2><p>当确认了 MySQL 没有问题后，如果你的 MySQL 时间还是不对，那么就有可能是 JDBC 连接的问题了。</p><p>这里我用大家常见的 JdbcTemplate 来举个例子，其他的数据库框架操作也都是一样的，我这里主要是演示时区问题，数据操作细节问题就不再展示了。</p><p>首先我们来准备一个表，如下：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user`</span> (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`createTime`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`updateTime`</span> <span class="hljs-built_in">timestamp</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`username`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">6</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><p>很简单的几个字段，createTime 是 datetime 类型，updateTime 是 Timestamp 类型。</p><p>然后向表中添加一条记录：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220324175333.png" alt></p><p><strong>并且这个数据库的时区是 Asia/Shanghai</strong></p><p>接下来我们创建一个 Spring Boot 项目，引入 Web、JDBC API 依赖和 MySQL 驱动，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220324174629.png" alt></p><p>然后我们来配置一下 MySQL 的连接信息，如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line">spring.datasource.url=jdbc:mysql:///test01?serverTimezone=UTC</span><br></pre></td></tr></table></figure><p>小伙伴们看一下，在数据库连接地址中，我特意设置了时区为 UTC，这个时区比我们目前的时区慢了 8 小时，我们来看看用这样一个错误的时区，操作的结果是什么样子的。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Autowired</span></span><br><span class="line">JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; list = jdbcTemplate.query(<span class="hljs-string">"select * from user"</span>, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User.class));</span><br><span class="line">    System.out.println(<span class="hljs-string">"list = "</span> + list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.itboyhub.com/2021/10/tran/20220324175908.png" alt></p><p>大家看到，这个查询结果查到的时间是 21 点，跟 13 点相比快了 8 小时。</p><p>为啥呢？</p><p>因为我们连接地址中加了 <code>serverTimezone=UTC</code> 参数，这个时候，系统会把从数据库查询到的数据当成是 UTC 时区的，即把 13 点当成 UTC 时区的，但是我自己当前设备又是 <code>Asia/Shanghai</code> 时区，UTC 时区的 13 点转成 <code>Asia/Shanghai</code> 时区之后就是 21 点了。</p><p>相同道理，大家也可以自行尝试设置 <code>serverTimezone=Asia/Tokyo</code>，时区设置为东京，东京比我们早一个小时，东京的 13 点就是我们的 12 点，那么最终查询结果就是 12 点。</p><p>从这个案例中我们可以看到，jdbc 连接参数中的时区优先级高于 MySQL 服务器的时区参数，所以这个连接参数大家也要尤其注意。</p><h2 id="3-题外话"><a href="#3-题外话" class="headerlink" title="3. 题外话"></a>3. 题外话</h2><p>有的小伙伴遇到的时区问题则是另外一种，返回 JSON 的时候时间不对。</p><p>如果在项目中用了 jackson，并且使用 <code>@JsonFormat</code> 注解来格式化日期，就有可能出现时区问题，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@JsonFormat</span>(pattern = <span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>,timezone = <span class="hljs-string">"Asia/Shanghai"</span>)</span><br></pre></td></tr></table></figure><p>大家看到，这段代码如果没有设置 timezone 属性，那么默认的时区就是 UTC，也会导致最终的时间差了 8 小时。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>好啦，这就是松哥总结的数据库的几种情况，小伙伴们如有补充欢迎留言讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来聊一个简单的话题，这是一个小伙伴在微信上问我的，对于初学者我非常能理解这类问题带来的困扰，各种尝试，各种搜索，别人说的头头是道，但是就是解决不了自己的问题，今天我简单从两个方面来和大家聊聊这个问题，如果小伙伴们有其他的解决思路，也可以留言一起分享。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.javaboy.org/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://www.javaboy.org/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建双 M 结构的主从备份？</title>
    <link href="http://www.javaboy.org/2022/0408/mysql_s_m_m_s.html"/>
    <id>http://www.javaboy.org/2022/0408/mysql_s_m_m_s.html</id>
    <published>2022-04-08T04:22:29.000Z</published>
    <updated>2022-07-05T04:24:28.171Z</updated>
    
    <content type="html"><![CDATA[<p>关于 MySQL 主从搭建，松哥之前写过好多篇文章了，还录过一个视频。不过之前的都是一主一从的结构，但是小伙伴们知道，我们在项目中，更常见一种结构是双 M 结构，即两个 MySQL 实例，每个 MySQL 实例互为主备，这样在主节点突然断电或者不可用的时候，slave 节点可以很快切换为 master，架构图如下：</p><a id="more"></a><p><img src="http://img.itboyhub.com/2021/10/tran/mysql_master_slave.png" alt></p><p>在这种结构中，两个 MySQL 实例的地位是平等的，互为对方的主备，我们判断谁是主机谁是从机的方式主要是看 readonly，谁是只读的，那谁就是从机，所以这种情况下，主从切换也很方便，只要修改 readonly 属性即可。</p><p>接下来我们就来搭建一个双 M 的主从备份，看看和单纯的 M-S 结构的有啥区别。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>以下配置基于 Docker。</p><p>这里，我们首先准备两台机器：</p><ul><li>M1：10.3.50.27:33061</li><li>M2：10.3.50.27:33062</li></ul><h3 id="1-1-M1-配置"><a href="#1-1-M1-配置" class="headerlink" title="1.1 M1 配置"></a>1.1 M1 配置</h3><p>M1 的配置就三个步骤，比较容易：</p><p><strong>1. 授权给 M2 服务器</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON *.* to &apos;rep1&apos;@&apos;10.3.50.27&apos; identified by &apos;123&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>这里表示配置 M2 登录用户名为 rep1，密码为 123，并且必须从 <code>10.3.50.27</code> 这个地址登录，登录成功之后可以操作任意库中的任意表。其中，如果不需要限制登录地址，可以将 IP 地址更换为一个 <code>%</code>。</p><blockquote><p>注意，在 MySQL8 里边，这块有一些变化。MySQL8 中用户创建和授权需要分开，不能像上面那样一步到位，具体方式如下：</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER `rep1`@`10.3.50.27` IDENTIFIED WITH caching_sha2_password BY &apos;javaboy.COM&apos;;</span><br><span class="line"></span><br><span class="line">GRANT Replication Slave ON *.* TO `rep1`@`10.3.50.27`;</span><br></pre></td></tr></table></figure><p><strong>2. 修改主库配置文件</strong></p><p>开启 binlog ，并设置 server-id ，每次修改配置文件后都要重启 MySQL 服务才会生效</p><p>开启 binlog 主要是修改 MySQL 的配置文件 mysqld.cnf，该文件在容器的 <code>/etc/mysql/mysql.conf.d</code> 目录下。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20211222232342.png" alt></p><p>针对该配置文件，我们做如下修改：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 这个参数表示启用 binlog 功能，并指定 binlog 的存储目录</span><br><span class="line">log-bin=javaboy_logbin</span><br><span class="line"># 设置 binlog_format 格式，注意不要使用 STATEMENT</span><br><span class="line">binlog_format=ROW</span><br><span class="line"># 设置一个 binlog 文件的最大字节</span><br><span class="line"># 设置最大 100MB</span><br><span class="line">max_binlog_size=104857600</span><br><span class="line"></span><br><span class="line"># 设置了 binlog 文件的有效期（单位：天）</span><br><span class="line">expire_logs_days = 7</span><br><span class="line"></span><br><span class="line"># binlog 日志只记录指定库的更新（配置主从复制的时候会用到）</span><br><span class="line">binlog-do-db=javaboy_db</span><br><span class="line"></span><br><span class="line"># binlog 日志不记录指定库的更新（配置主从复制的时候会用到）</span><br><span class="line">#binlog-ignore-db=javaboy_no_db</span><br><span class="line"></span><br><span class="line"># 写缓存多少次，刷一次磁盘，默认 0 表示这个操作由操作系统根据自身负载自行决定多久写一次磁盘</span><br><span class="line"># 1 表示每一条事务提交都会立即写磁盘，n 则表示 n 个事务提交才会写磁盘</span><br><span class="line">sync_binlog=0</span><br><span class="line"></span><br><span class="line"># 为当前服务取一个唯一的 id（MySQL5.7 开始需要）</span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure><p>各项配置的含义松哥已经在注视中说明了。截图如下：</p><p>如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220315214542.png" alt></p><ul><li>log-bin：同步的日志路径及文件名，一定注意这个目录要是 MySQL 有权限写入的（我这里是偷懒了，直接放在了下面那个datadir下面）。</li><li>binlog-do-db：要同步的数据库名，当从机连上主机后，只有这里配置的数据库才会被同步，其他的不会被同步。</li><li>server-id: MySQL 在主从环境下的唯一标志符，给个任意数字，注意不能和 M2 重复，因为将来 server-id 用于标志 binlog 是由哪个库产生的，所以主从数据库的 server-id 千万不能一样，不然可能导致主从数据库 binlog 的循环复制问题。</li><li><strong>注意 binlog_format 的值为 ROW，具体原因在之前的文章中松哥已经和大家聊过了，这里就不再赘述。</strong></li></ul><p>配置完成后重启 MySQL 服务端：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql33061</span><br></pre></td></tr></table></figure><p><strong>3. 查看 M1 当前二进制日志名和偏移量</strong></p><p>这个操作的目的是为了在 M2 启动后，从这个点开始进行数据的恢复：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p><img src="http://img.itboyhub.com/2021/10/tran/20220315214933.png" alt></p><p>至此，M1 配置完成。  </p><h3 id="1-2-M2-配置"><a href="#1-2-M2-配置" class="headerlink" title="1.2 M2 配置"></a>1.2 M2 配置</h3><p>M2 的配置和 M1 一模一样，唯一不同的地方在于，M2 的 mysqld.cnf 这个文件中的 server-id=2，其他都一模一样，我就不重复了。</p><p>配置完成后，相当于 M2 现在也是一个主机，我们在 M2 上也可以执行 <code>show master status;</code> 命令，结果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220315215454.png" alt></p><h3 id="1-3-主从配置"><a href="#1-3-主从配置" class="headerlink" title="1.3 主从配置"></a>1.3 主从配置</h3><p>接下来配置 M1 和 M2 分别为对方的主机。</p><h4 id="M1-配置"><a href="#M1-配置" class="headerlink" title="M1 配置"></a>M1 配置</h4><p>先来配置给 M1 配置吧，执行如下命令设置主机：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&apos;10.3.50.77&apos;,master_port=33062,master_user=&apos;rep1&apos;,master_password=&apos;123&apos;,master_log_file=&apos;javaboy_logbin.000001&apos;,master_log_pos=154;</span><br></pre></td></tr></table></figure><p>这里配置了主机地址、端口以及从机登录主机的用户名和密码，注意最后两个参数要和 M2 中的保持一致。</p><p>注意，由于 MySQL8 密码插件的问题，这个问题同样会给主从配置带来问题，所以在 MySQL8 配置主从上，上面这行命令需要添加 <code>get_master_public_key=1</code>，完整命令如下：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">change</span> <span class="hljs-keyword">master</span> <span class="hljs-keyword">to</span> master_host=<span class="hljs-string">'10.3.50.77'</span>,master_port=<span class="hljs-number">33062</span>,master_user=<span class="hljs-string">'rep1'</span>,master_password=<span class="hljs-string">'123'</span>,master_log_file=<span class="hljs-string">'javaboy_logbin.000001'</span>,master_log_pos=<span class="hljs-number">154</span>,get_master_public_key=<span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>3. 启动 slave 进程</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>启动之后查看从机状态：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p><img src="http://img.itboyhub.com/2021/10/tran/20220315220531.png" alt></p><p><strong>4. 查看 slave 的状态</strong></p><p>主要是下面两项值都要为为 YES，则表示配置正确：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>至此，配置完成，主机创建库，添加数据，从机会自动同步。 </p><p>如果这两个有一个不为 YES ，表示主从环境搭建失败，此时可以阅读日志，查看出错的原因，再具体问题具体解决。</p><h4 id="M2-配置"><a href="#M2-配置" class="headerlink" title="M2 配置"></a>M2 配置</h4><p>接下来再来配置 M2，M2 和 M1 的配置基本上是一致的，change master 中记得把地址和端口写对：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">change</span> <span class="hljs-keyword">master</span> <span class="hljs-keyword">to</span> master_host=<span class="hljs-string">'10.3.50.77'</span>,master_port=<span class="hljs-number">33061</span>,master_user=<span class="hljs-string">'rep1'</span>,master_password=<span class="hljs-string">'123'</span>,master_log_file=<span class="hljs-string">'javaboy_logbin.000001'</span>,master_log_pos=<span class="hljs-number">154</span>;</span><br></pre></td></tr></table></figure><p>配置完成后，现在 M1 和 M2 就互为主备了。</p><h3 id="1-4-测试"><a href="#1-4-测试" class="headerlink" title="1.4 测试"></a>1.4 测试</h3><p>测试分两步：</p><ul><li>M1 中新建 javaboy_db 库，库中建 user 表，表中插入一条记录，然后查看 M2 中是否将数据同步过来了。</li><li>M2 中向 user 表中添加一条记录，查看 M1 中是否有对应的值。</li></ul><p>经过测试，我们发现没问题，现在可以两边互相同步对方的数据了。</p><h2 id="2-谁主谁从"><a href="#2-谁主谁从" class="headerlink" title="2. 谁主谁从"></a>2. 谁主谁从</h2><p>虽然是双 M 结构，但是在实际应用中还是得分个主从，那么双 M 该怎么分主从呢？</p><p>在生产环境中，我们一般会将备份节点设置为 <code>read_only</code>，也就是只读，防止有误操作，当然不用担心设置为 <code>read_only</code> 后 <code>binlog</code> 的写入也被阻止，super 用户依然拥有写入权限。</p><p>设置全库只读的办法也很简单，首先我们执行如下 SQL 先看看对应变量的值：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">show</span> <span class="hljs-keyword">variables</span> <span class="hljs-keyword">like</span> <span class="hljs-string">'read_only'</span>;</span><br></pre></td></tr></table></figure><p><img src="http://img.itboyhub.com/2021/10/tran/20220314222626.png" alt></p><p>可以看到，默认情况下，<code>read_only</code> 是 OFF，即关闭状态，我们先把它改为 ON，执行如下 SQL：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> read_only=<span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure><p>1 表示 ON，0 表示 OFF，执行结果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220314222849.png" alt></p><p>这个 <code>read_only</code> 对 super 用户无效，所以设置完成后，接下来我们退出来这个会话，然后创建一个不包含 super 权限的用户，用新用户登录，登录成功之后，执行一个插入 SQL，结果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220314223118.png" alt></p><p>可以看到，这个错误信息中说，现在的 MySQL 是只读的（只能查询），不能执行当前 SQL。</p><p>如此设置之后，在 master 发生异常需要主从切换的时候再将 slave 临时顶替上来。为了更好的做到主从同步，binlog 的类型建议使用 row 模式，关于 binlog 的三种模式，可以参考<a href="https://mp.weixin.qq.com/s/FlhZsx9MBGY0ypXQMqe6wA" target="_blank" rel="noopener">666！MySQL 的 binlog 的三种格式这么好玩！</a>一文。</p><p>好啦，有问题欢迎留言讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 MySQL 主从搭建，松哥之前写过好多篇文章了，还录过一个视频。不过之前的都是一主一从的结构，但是小伙伴们知道，我们在项目中，更常见一种结构是双 M 结构，即两个 MySQL 实例，每个 MySQL 实例互为主备，这样在主节点突然断电或者不可用的时候，slave 节点可以很快切换为 master，架构图如下：&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.javaboy.org/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://www.javaboy.org/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 怎么保证备份数据的一致性？</title>
    <link href="http://www.javaboy.org/2022/0406/mysql_master_slave_consistency.html"/>
    <id>http://www.javaboy.org/2022/0406/mysql_master_slave_consistency.html</id>
    <published>2022-04-05T16:26:13.000Z</published>
    <updated>2022-07-04T16:36:23.614Z</updated>
    
    <content type="html"><![CDATA[<p>为了数据安全，数据库需要定期备份，这个大家都懂，然而数据库备份的时候，最怕写操作，因为这个最容易导致数据的不一致，松哥举一个简单的例子大家来看下：</p><a id="more"></a><p>假设在数据库备份期间，有用户下单了，那么可能会出现如下问题：</p><ul><li>库存表扣库存。</li><li>备份库存表。</li><li>备份订单表数据。</li><li>订单表添加订单。</li><li>用户表扣除账户余额。</li><li>备份用户表。</li></ul><p>如果按照上面这样的逻辑执行，备份文件中的订单表就少了一条记录。将来如果使用这个备份文件恢复数据的话，就少了一条记录，造成数据不一致。</p><p>为了解决这个问题，MySQL 中提供了很多方案，我们来逐一进行讲解并分析其优劣。</p><h2 id="1-全库只读"><a href="#1-全库只读" class="headerlink" title="1. 全库只读"></a>1. 全库只读</h2><p>要解决这个问题，我们最容易想到的办法就是在数据库备份期间设置数据库只读，不能写，这样就不用担心数据不一致了，设置全库只读的办法也很简单，首先我们执行如下 SQL 先看看对应变量的值：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">show</span> <span class="hljs-keyword">variables</span> <span class="hljs-keyword">like</span> <span class="hljs-string">'read_only'</span>;</span><br></pre></td></tr></table></figure><p><img src="http://img.itboyhub.com/2021/10/tran/20220314222626.png" alt></p><p>可以看到，默认情况下，<code>read_only</code> 是 OFF，即关闭状态，我们先把它改为 ON，执行如下 SQL：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> read_only=<span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure><p>1 表示 ON，0 表示 OFF，执行结果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220314222849.png" alt></p><p>这个 <code>read_only</code> 对 super 用户无效，所以设置完成后，接下来我们退出来这个会话，然后创建一个不包含 super 权限的用户，用新用户登录，登录成功之后，执行一个插入 SQL，结果如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220314223118.png" alt></p><p>可以看到，这个错误信息中说，现在的 MySQL 是只读的（只能查询），不能执行当前 SQL。</p><p>加了只读属性，就不用担心备份的时候发生数据不一致的问题了。</p><p>但是 <code>read_only</code> 我们通常用来标识一个 MySQL 实例是主库还是从库：</p><ul><li>read_only=0，表示该实例为主库。数据库管理员 DBA 可能每隔一段时间就会对该实例写入一些业务无关的数据来判断主库是否可写，是否可用，这就是常见的探测主库实例是否活着的。</li><li>read_only=1，表示该实例为从库。每隔一段时间探活，往往只会对从库进行读操作，比如select 1;这样进行探活从库。</li></ul><p>所以，<code>read_only</code> 这个属性其实并不适合用来做备份，而且如果使用了 <code>read_only</code> 属性将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险很高。</p><p>因此这种方案不合格。</p><h2 id="2-全局锁"><a href="#2-全局锁" class="headerlink" title="2. 全局锁"></a>2. 全局锁</h2><p>全局锁，顾名思义，就是把整个库锁起来，锁起来的库就不能增删改了，只能读了。</p><p>那么我们看看怎么使用全局锁。MySQL 提供了一个加全局读锁的方法，命令是 <code>flush tables with read lock</code> (FTWRL)。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的增删改等操作就会被阻塞。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220314224245.png" alt></p><p>从图中可以看到，使用 <code>flush tables with read lock;</code> 指令可以锁定表；使用 <code>unlock tables;</code> 指令则可以完成解锁操作（会话断开时也会自动解锁）。</p><p>和第一小节的方案相比，FTWRL 有一点进步，即：执行 FTWRL 命令之后如果客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态，而不会一直处于只读状态。</p><p>但是！！！</p><p>加了全局锁，就意味着整个数据库在备份期间都是只读状态，那么在数据库备份期间，业务就只能停摆了。</p><p>所以这种方式也不是最佳方案。</p><h2 id="3-事务"><a href="#3-事务" class="headerlink" title="3. 事务"></a>3. 事务</h2><p>不知道小伙伴们是否还记得松哥之前和大家分享的数据库的隔离级别，四种隔离级别中有一个是<code>可重复读（REPEATABLE READ）</code>，这也是 MySQL 默认的隔离级别。</p><p>在这个隔离级别下，如果用户在另外一个事务中执行同条 SELECT 语句数次，结果总是相同的。（因为正在执行的事务所产生的数据变化不能被外部看到）。</p><p>换言之，在 InnoDB 这种支持事务的存储引擎中，那么我们就可以在备份数据库之前先开启事务，此时会先创建一致性视图，然后整个事务执行期间都在用这个一致性视图，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作，并且这些更新操作不会被当前事务看到。</p><p>在可重复读的隔离级别下，即使其他事务更新了表数据，也不会影响备份数据库的事务读取结果，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。</p><p>具体操作也很简单，使用 mysqldump 备份数据库的时候，加上 <code>-–single-transaction</code> 参数即可。</p><p>为了看到 <code>-–single-transaction</code> 参数的作用，我们可以先开启 <code>general_log</code>，<code>general_log</code> 即 General Query Log，它记录了 MySQL 服务器的操作。当客户端连接、断开连接、接收到客户端的 SQL 语句时，会向 <code>general_log</code> 中写入日志，开启 <code>general_log</code> 会损失一定的性能，但是在开发、测试环境下开启日志，可以帮忙我们加快排查出现的问题。</p><p>通过如下查询我们可以看到，默认情况下 <code>general_log</code> 并没有开启：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220314230957.png" alt></p><p>我们可以通过修改配置文件 <code>my.cnf(Linux)/my.ini（Windows）</code>，在 <code>mysqld</code> 下面增加或修改（如已存在配置项）<code>general_log</code> 的值为1，修改后重启 MySQL 服务即可生效。</p><p>也可以通过在 MySQL 终端执行 <code>set global general_log = ON</code> 来开启 <code>general log</code>，此方法可以不用重启 <code>MySQL</code>。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220314231222.png" alt></p><p>开启之后，默认日志的目录是 mysql 的 data 目录，文件名默认为 <code>主机名.log</code>。</p><p>接下来，我们先来执行一个不带 <code>-–single-transaction</code> 参数的备份，如下：</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -h localhost -uroot -p123 test08 &gt; test08.sql</span><br></pre></td></tr></table></figure><p><img src="http://img.itboyhub.com/2021/10/tran/20220314232525.png" alt></p><p>大家注意默认的 <code>general_log</code> 的位置。</p><p>接下来我们再来加上 <code>-–single-transaction</code> 参数看看：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -h localhost -uroot -p123 <span class="hljs-comment">--single-transaction test08 &gt; test08.sql</span></span><br></pre></td></tr></table></figure><p><img src="http://img.itboyhub.com/2021/10/tran/20220314232929.png" alt></p><p>大家看我蓝色选中的部分，可以看到，确实先开启了事务，然后才开始备份的，对比不加 <code>-–single-transaction</code> 参数的日志，多了开启事务这一部分。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>总结一下，加事务备份似乎是一个不错的选择，不过这个方案也有一个局限性，那就是只适用于支持事务的引擎如 InnoDB，对于 MyISAM 这样的存储引擎，如果要备份，还是乖乖的使用全局锁吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了数据安全，数据库需要定期备份，这个大家都懂，然而数据库备份的时候，最怕写操作，因为这个最容易导致数据的不一致，松哥举一个简单的例子大家来看下：&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.javaboy.org/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://www.javaboy.org/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 多表联合查询有何讲究？</title>
    <link href="http://www.javaboy.org/2022/0401/mysql_in_exists.html"/>
    <id>http://www.javaboy.org/2022/0401/mysql_in_exists.html</id>
    <published>2022-04-01T10:50:51.000Z</published>
    <updated>2022-04-05T12:12:41.430Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来聊聊微信中的多表联合查询，应该是小表驱动大表还是大表驱动小表？</p><h2 id="1-in-VS-exists"><a href="#1-in-VS-exists" class="headerlink" title="1. in VS exists"></a>1. in VS exists</h2><p>在正式分析之前，我们先来看两个关键字 in 和 exists。</p><a id="more"></a><p>假设我现在有两张表：员工表和部门表，每个员工都有一个部门，员工表中保存着部门的 id，并且该字段是索引；部门表中有部门的 id、name 等属性，其中 id 是主键，name 是唯一索引。</p><blockquote><p>这里我就直接使用 vhr 中的表来做试验，就不单独给大家数据库脚本了，小伙伴们可以查看 vhr 项目(<a href="https://github.com/lenve/vhr)获取数据库脚本。" target="_blank" rel="noopener">https://github.com/lenve/vhr)获取数据库脚本。</a></p></blockquote><p>假设我现在想查询技术部的所有员工，我有如下两种查询方式：</p><p><strong>第一种查询方式是使用 in 关键字来查询：</strong></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee e <span class="hljs-keyword">where</span> e.departmentId <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> d.id <span class="hljs-keyword">from</span> department d <span class="hljs-keyword">where</span> d.name=<span class="hljs-string">'技术部'</span>) <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>;</span><br></pre></td></tr></table></figure><p>这个 SQL 很好理解，相信大家都能懂。查询的时候也是先查询里边的子查询（即先查询 department 表），然后再执行外表的查询，我们可以看下它的执行计划：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220312230730.png" alt></p><p>可以看到，首先查询部门表，有索引就用索引，没有索引就全表扫描，然后查询员工表，也是利用索引来查询，整体上效率比较高。</p><p><strong>第二种是使用 exists 关键字来查询：</strong></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee e <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> department d <span class="hljs-keyword">where</span> d.id=e.departmentId <span class="hljs-keyword">and</span> d.name=<span class="hljs-string">'技术部'</span>) <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>;</span><br></pre></td></tr></table></figure><p>这条 SQL 的查询结果和上面用 in 关键字的一样，但是查询过程却不一样，我们来看看这个 SQL 的执行计划：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220312231028.png" alt></p><p>可以看到，这里先对员工表做了全表扫描，然后拿着员工表中的 departmentId 再去部门表中进行数据比对。上面这个 SQL 中，子查询有返回值，就表示 true，没有返回值就表示 false，如果为 true，则这个员工记录就保留下来，如果为 false，则这个员工记录会被抛弃掉。所以在子查询中的可以不用 <code>SELECT *</code>，可以将之改为 <code>SELECT 1</code> 或者其他，MySQL 官方的说法是在实际执行时会忽略SELECT 清单，因此写啥区别不大。</p><p>对比两个查询计划中的扫描行数，我们就能大致上看出差异，使用 in 的话，效率略高一些。</p><p>如果用 in 关键字查询的话，先部门表再员工表，一般来说部门表的数据是要小于员工表的数据的，所以这就是小表驱动大表，效率比较高。</p><p>如果用 exists 关键字查询的话，先员工表再部门表，一般来说部门表的数据是要小于员工表的数据的，所以这就是大表驱动小表，效率比较低。</p><p><strong>总之，就是要小表驱动大表效率才高，大表驱动小表效率就会比较低。所以，假设部门表的数据量大于员工表的数据量，那么上面这两种 SQL，使用 exists 查询关键字的效率会比较高。</strong></p><h2 id="2-为什么要小表驱动大表"><a href="#2-为什么要小表驱动大表" class="headerlink" title="2. 为什么要小表驱动大表"></a>2. 为什么要小表驱动大表</h2><p>在 MySQL 中，这种多表联合查询的原理是：以驱动表的数据为基础，通过类似于我们 Java 代码中写的<code>嵌套循环</code> 的方式去跟被驱动表记录进行匹配。</p><p>以第一小节的表为例，假设我们的员工表 E 表是大表，有 10000 条记录；部门表 D 表是小表，有 100 条记录。</p><p>假设 D 驱动 E，那么执行流程大概是这样：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for 100 个部门&#123;</span><br><span class="line">    匹配 10000 个员工(进行B+树查找)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么查找的总次数是 100+log10000。</p><p>假设 E 驱动 D，那么执行流程大概是这样：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for 10000 个员工&#123;</span><br><span class="line">    匹配 100 个部门(进行B+树查找)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么总的查找次数是 10000+log100。</p><p>从这两个数据对比中我们就能看出来，小表驱动大表效率要高。<strong>核心的原因在于，搜索被驱动的表的时候，一般都是有索引的，而索引的搜索就要快很多，搜索次数也少。</strong></p><h2 id="3-没有索引咋办？"><a href="#3-没有索引咋办？" class="headerlink" title="3. 没有索引咋办？"></a>3. 没有索引咋办？</h2><p>前面第二小节我们得出的结论有一个前提，就是驱动表和被驱动表之间关联的字段是有索引的，以我们前面的表为例，就是 E 表中保存了 departmentId 字段，该字段对应了 D 表中的 id 字段，而 id 字段在 D 表中是主键索引，如果 id 不是主键索引，就是一个普通字段，那么 D 表岂不是也要做全表扫描了？那个时候 E 驱动 D 还是 D 驱动 E 差别就不大了。</p><p>对于这种被驱动表上没有可用索引的情况，MySQL 使用了一种名为 <code>Block Nested-Loop Join</code> （简称 BNL）的算法，这种算法的步骤是这样：</p><ol><li>把 E 表的数据读入线程内存 join_buffer 中。</li><li>扫描 D 表，把 D 表中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回。</li></ol><p>小伙伴们来看下，如果我把 E 表中 departmentId 字段上的索引删除，再把 D 表中的 id 字段上的主键索引也删除，此时我们再来看看如下 SQL 的执行计划：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220313004813.png" alt></p><p>可以看到，此时 E 表和 D 表都是全表扫描，另外需要注意，这些比对操作都是在内存中，所以执行效率都是 OK 的。</p><p>但是，既然把数据都读入到内存中，内存中能放下吗？内存中放不下咋办？我们看上面的查询计划，对 E 表的查询中，Extra 中还出现了 <code>Using join buffer (Block Nested Loop)</code>，Block 不就有分块的意思吗！所以这意思就很明确了，内存中一次放不下，那就分块读取，先读一部分到内存中，比对完了再读另一部分到内存中。</p><p>通过如下指令我们可以查看 join_buffer 的大小：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220313005807.png" alt></p><p><code>262144/1024=256KB</code></p><p>默认大小是 256 KB。</p><p>我现在把这个值改大，然后再查看新的执行计划，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220313010150.png" alt></p><p>大家看到，此时已经没有 <code>Using join buffer (Block Nested Loop)</code> 提示了。</p><p>总结一下：</p><ul><li>如果 join_buffer 足够大，一次性就能读取所有数据到内存中，那么大表驱动小表还是小表驱动大表都无所谓了。</li><li>如果 join_buffer 大小有限，那么建议小表驱动大表，这样即使要分块读取，读取的次数也少一些。</li></ul><p>不过老实说，这种没有索引的多表联合查询效率比较低，应该尽量避免。</p><p>综上所述，在多表联合查询的时候，建议小表驱动大表。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们来聊聊微信中的多表联合查询，应该是小表驱动大表还是大表驱动小表？&lt;/p&gt;
&lt;h2 id=&quot;1-in-VS-exists&quot;&gt;&lt;a href=&quot;#1-in-VS-exists&quot; class=&quot;headerlink&quot; title=&quot;1. in VS exists&quot;&gt;&lt;/a&gt;1. in VS exists&lt;/h2&gt;&lt;p&gt;在正式分析之前，我们先来看两个关键字 in 和 exists。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.javaboy.org/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://www.javaboy.org/tags/MySQL/"/>
    
  </entry>
  
</feed>
