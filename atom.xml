<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江南一点雨</title>
  
  <subtitle>江南一点雨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.javaboy.org/"/>
  <updated>2022-07-21T12:25:14.595Z</updated>
  <id>http://www.javaboy.org/</id>
  
  <author>
    <name>江南一点雨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 整合 Swagger3 指北</title>
    <link href="http://www.javaboy.org/2022/0721/springboot-swagger3.html"/>
    <id>http://www.javaboy.org/2022/0721/springboot-swagger3.html</id>
    <published>2022-07-21T12:21:37.000Z</published>
    <updated>2022-07-21T12:25:14.595Z</updated>
    
    <content type="html"><![CDATA[<p>Swagger 好早之前就更新到 3 了，不过一直没空和小伙伴们分享下具体玩法，主要是也是因为 Swagger 虽然升级了，但是我们在 Spring Boot 中却依然可以使用老版本的 Swagger，不过好像是从 Spring Boot2.6 开始，你会发现用不了老版本的 Swagger 了，哎，反正迟早都得搞，那不如就今天吧！</p><a id="more"></a><p>今天我们就来看看，在 Spring Boot2.7.1 中如何使用 Swagger3。</p><h2 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1. 依赖"></a>1. 依赖</h2><p>首先我们创建一个 Spring Boot 项目，引入 Swagger3 依赖，如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以前在 Swagger2 的时代，这个依赖我们需要引入两个，现在就只需要这一个即可。</p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><p>接下来在启动类上添加两个注解，开启 Swagger：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@SpringBootApplication</span></span><br><span class="line"><span class="hljs-comment">//开启swagger</span></span><br><span class="line"><span class="hljs-meta">@EnableSwagger</span>2</span><br><span class="line"><span class="hljs-meta">@EnableOpenApi</span></span><br><span class="line"><span class="hljs-meta">@EnableWebMvc</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SwaggerDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，基本工作就已经完成了，此时即使我们不做任何额外的事情，Swagger 文档也已经可以自动生成了。</p><p>启动项目，浏览器输入 <code>http://localhost:8080/swagger-ui/index.html</code> 查看 Swagger 文档：</p><p><img src="evernotecid://79DF73BC-F1E1-48CC-A2CB-54B5D68418AE/appyinxiangcom/28106892/ENResource/p224" alt="6fd0ff460477f4f232c81b7d022c3fd4.png"></p><p>小伙伴们需要注意，这个默认的文档访问路径跟以前的 Swagger2 不一样哦！</p><p>现在扫描出来的接口中有一个是 BasicErrorController，这个是 Spring Boot 默认提供的异常处理器，因为我们现在没有为 Swagger 设置包扫描路径，所以就连同这个一起被扫描出来了。</p><p>好了，现在我们可以对这个网页稍微做一些定制，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swagger2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30)</span><br><span class="line">                <span class="hljs-comment">//配置网站的基本信息</span></span><br><span class="line">                .apiInfo(<span class="hljs-keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                        <span class="hljs-comment">//网站标题</span></span><br><span class="line">                        .title(<span class="hljs-string">"TienChin项目在线接口文档"</span>)</span><br><span class="line">                        <span class="hljs-comment">//标题后面的版本号</span></span><br><span class="line">                        .version(<span class="hljs-string">"v1.0"</span>)</span><br><span class="line">                        .description(<span class="hljs-string">"TienChin项目接口文档"</span>)</span><br><span class="line">                        <span class="hljs-comment">//联系人信息</span></span><br><span class="line">                        .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">"javaboy"</span>, <span class="hljs-string">"http://www.javaboy.org"</span>, <span class="hljs-string">"111@qq.com"</span>))</span><br><span class="line">                        .build())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="hljs-comment">//指定接口的位置</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">"org.javaboy.swagger_demo.controller"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段配置基本上和之前的 Swagger2 的一致，配置完成后，Swagger 页面的基本信息就会更新过来：</p><p><img src="evernotecid://79DF73BC-F1E1-48CC-A2CB-54B5D68418AE/appyinxiangcom/28106892/ENResource/p225" alt="e1db462ed0c63a9baef5f9b8e6118471.png"></p><h2 id="3-接口配置"><a href="#3-接口配置" class="headerlink" title="3. 接口配置"></a>3. 接口配置</h2><p>接下来就是一些具体的接口配置了。</p><p>这个和 Swagger2 也基本一致，而且很容易懂，下面我来分别向小伙伴们举例说明：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-meta">@Api</span>(tags = <span class="hljs-string">"用户管理相关接口"</span>)</span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/user"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/"</span>)</span><br><span class="line">    <span class="hljs-meta">@ApiOperation</span>(<span class="hljs-string">"添加用户的接口"</span>)</span><br><span class="line">    <span class="hljs-meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="hljs-meta">@ApiImplicitParam</span>(name = <span class="hljs-string">"username"</span>, value = <span class="hljs-string">"用户名"</span>, defaultValue = <span class="hljs-string">"李四"</span>),</span><br><span class="line">            <span class="hljs-meta">@ApiImplicitParam</span>(name = <span class="hljs-string">"address"</span>, value = <span class="hljs-string">"用户地址"</span>, defaultValue = <span class="hljs-string">"深圳"</span>, required = <span class="hljs-keyword">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">addUser</span><span class="hljs-params">(String username, @RequestParam(required = <span class="hljs-keyword">true</span>)</span> String address) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RespBean();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/"</span>)</span><br><span class="line">    <span class="hljs-meta">@ApiOperation</span>(<span class="hljs-string">"根据id查询用户的接口"</span>)</span><br><span class="line">    <span class="hljs-meta">@ApiImplicitParam</span>(name = <span class="hljs-string">"id"</span>, value = <span class="hljs-string">"用户id"</span>, defaultValue = <span class="hljs-string">"99"</span>, required = <span class="hljs-keyword">true</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="hljs-keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        <span class="hljs-keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@PutMapping</span>(<span class="hljs-string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="hljs-meta">@ApiOperation</span>(<span class="hljs-string">"根据id更新用户的接口"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">updateUserById</span><span class="hljs-params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里边涉及到多个 API，我来向小伙伴们分别说明：</p><ol><li>@Api 注解可以用来标记当前 Controller 的功能。</li><li>@ApiOperation 注解用来标记一个方法的作用。</li><li>@ApiImplicitParam 注解用来描述一个参数，可以配置参数的中文含义，也可以给参数设置默认值，这样在接口测试的时候可以避免手动输入。</li><li>如果有多个参数，则需要使用多个 @ApiImplicitParam 注解来描述，多个 @ApiImplicitParam 注解需要放在一个 @ApiImplicitParams 注解中。</li><li>需要注意的是，@ApiImplicitParam 注解中虽然可以指定参数是必填的，但是却不能代替 @RequestParam(required = true) ，前者的必填只是在 Swagger 框架内必填，抛弃了 Swagger ，这个限制就没用了，所以假如开发者需要指定一个参数必填， @RequestParam(required = true) 注解还是不能省略。</li><li>如果参数是一个对象（例如上文的更新接口），对于参数的描述也可以放在实体类中。例如下面一段代码：</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@ApiModel</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"用户id"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer id;</span><br><span class="line">    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"用户名"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String username;</span><br><span class="line">    <span class="hljs-meta">@ApiModelProperty</span>(value = <span class="hljs-string">"用户地址"</span>)</span><br><span class="line">    <span class="hljs-keyword">private</span> String address;</span><br><span class="line">    <span class="hljs-comment">//getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，经过如上配置之后，接下来，刷新刚刚打开的页面，可以看到如下效果：</p><p><img src="http://img.itboyhub.com/2021/springboot2/17-2.png" alt></p><p>可以看到，所有的接口这里都列出来了，包括接口请求方式，接口地址以及接口的名字等，点开一个接口，可以看到如下信息：</p><p><img src="http://img.itboyhub.com/2021/springboot2/17-3.png" alt></p><p>可以看到，接口的参数，参数要求，参数默认值等等统统都展示出来了，参数类型下的 query 表示参数以 <code>key/value</code> 的形式传递，点击右上角的 Try it out，就可以进行接口测试：</p><p><img src="http://img.itboyhub.com/2021/springboot2/17-4.png" alt></p><p>点击 Execute 按钮，表示发送请求进行测试。测试结果会展示在下面的 Response 中。</p><p>小伙伴们注意，参数类型下面的 query 表示参数以 key/value 的形式传递，这里的值也可能是 body，body 表示参数以请求体的方式传递，例如上文的更新接口，如下：</p><p><img src="http://img.itboyhub.com/2021/springboot2/17-5.png" alt></p><p>当然还有一种可能就是这里的参数为 path，表示参数放在路径中传递，例如根据 id 查询用户的接口：</p><p><img src="http://img.itboyhub.com/2021/springboot2/17-6.png" alt></p><p>当然，除了这些之外，还有一些响应值的注解，都比较简单，小伙伴可以自己摸索下。</p><h2 id="4-在-Security-中的配置"><a href="#4-在-Security-中的配置" class="headerlink" title="4. 在 Security 中的配置"></a>4. 在 Security 中的配置</h2><p>如果我们的 Spring Boot 项目中集成了 Spring Security，那么如果不做额外配置，Swagger 文档可能会被拦截，此时只需要在 Spring Security 的配置类中为 Swagger 相关的文件和接口放行即可（SpringBoot2.7.1 最新写法）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class SecurityConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    WebSecurityCustomizer webSecurityCustomizer() &#123;</span><br><span class="line">        return new WebSecurityCustomizer() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void customize(WebSecurity web) &#123;</span><br><span class="line">                web.ignoring().antMatchers(&quot;/swagger-ui/**&quot;)</span><br><span class="line">                        .antMatchers(&quot;/swagger-resources/**&quot;)</span><br><span class="line">                        .antMatchers(&quot;/v3/**&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此之后，Swagger 文件就不需要认证就能访问了。不知道小伙伴们有没有看懂呢？有问题欢迎留言讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swagger 好早之前就更新到 3 了，不过一直没空和小伙伴们分享下具体玩法，主要是也是因为 Swagger 虽然升级了，但是我们在 Spring Boot 中却依然可以使用老版本的 Swagger，不过好像是从 Spring Boot2.6 开始，你会发现用不了老版本的 Swagger 了，哎，反正迟早都得搞，那不如就今天吧！&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 中如何加载动态菜单？</title>
    <link href="http://www.javaboy.org/2022/0720/vue3-dynamic-menu.html"/>
    <id>http://www.javaboy.org/2022/0720/vue3-dynamic-menu.html</id>
    <published>2022-07-20T12:21:20.000Z</published>
    <updated>2022-07-21T12:25:22.367Z</updated>
    
    <content type="html"><![CDATA[<p>松哥之前写了两篇文章和大家分享了 TienChin 项目中的菜单数据问题，还没看过的小伙伴请戳这里：</p><a id="more"></a><ul><li><a href="https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg" target="_blank" rel="noopener">Vue 里，多级菜单要如何设计才显得专业？</a></li><li><a href="https://mp.weixin.qq.com/s/bv4bqRG28hVDc31u7UXyGg" target="_blank" rel="noopener">TienChin 项目动态菜单接口分析</a></li></ul><p>这两篇文章主要是和大家说明了后端如何根据当前登录用户，动态生成一个菜单 JSON。</p><p>那么现在的问题就是，当前端收到后端返回来的菜单 JSON 之后，该如何将之渲染出来？这就是我们目前所面临的问题了。</p><p>TienChin 项目基于 RuoYi 脚手架来完成，所以本文的分析你也可以看作是对 <code>RuoYi-Vue3</code> 项目的分析。</p><h2 id="1-整体思路"><a href="#1-整体思路" class="headerlink" title="1. 整体思路"></a>1. 整体思路</h2><p>首先我们来梳理下整体上的实现思路，首先一点：<strong>整体思路和 vhr 一模一样。</strong></p><p>考虑到有的小伙伴可能已经忘记 vhr 中前端动态菜单的实现思路了，因此本文再和大家分析一下。</p><p>为了确保在所有的 <code>.vue</code> 文件中都能访问到到菜单数据，所以选择将菜单数据存入 vuex 中，vuex 是 vue 中一个存储数据的公共地方，所有的 <code>.vue</code> 文件都可以从 <code>vuex</code> 中读取到数据。存储在 <code>vuex</code> 中的数据本质上是存在内存中，所以它有一个特点，就是浏览器按 F5 刷新之后，数据就没了。所以在发生页面的跳转的时候，我们应该去区分一下，是用户点击了页面上的菜单按钮之后发生了页面跳转还是用户点击了浏览器刷新按钮（或者按了 F5）发生了跳转。</p><p>为了实现这一点，我们需要用到 vue 中的路由导航守卫功能，对于我们 Java 工程师而言，这些可能听起来有点陌生，但是你把它当作 Java 中的 Filter 来看待就好理解了，实际上我们视频中和小伙伴们讲解的时候就是这么类比的，将一个新事物跟我们脑海中一个已有的熟悉的事物进行类比，就很容易理解了。</p><p>vue 中的导航守卫就类似一个监控，它可以监控到所有的页面跳转，在页面跳转中，我们可以去判断一下 vuex 中的菜单数据是否还在，如果还在，就说明用户是点击了页面上的菜单按钮完成了跳转的，如果不在，就说明用户是点击了浏览器的刷新按钮或者是按了 F5 进行页面刷新的，此时我们就要赶紧去服务端重新加载一下菜单数据。</p><p>—xxxxxxxxxxxxxxxxxx—</p><p>整体上的实现思路就是这样，接下来我们来看看一些具体的实现细节。</p><h2 id="2-实现细节"><a href="#2-实现细节" class="headerlink" title="2. 实现细节"></a>2. 实现细节</h2><h3 id="2-1-加载细节"><a href="#2-1-加载细节" class="headerlink" title="2.1 加载细节"></a>2.1 加载细节</h3><p>首先我们来看看加载的细节。</p><p>小伙伴们知道，单页面项目的入口是 <code>main.js</code>，路由加载的内容在 src/permission.js 文件中，该文件在 main.js 中被引入，src/permission.js 中的前置导航守卫内容如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  NProgress.start()</span><br><span class="line">  <span class="hljs-keyword">if</span> (getToken()) &#123;</span><br><span class="line">    to.meta.title &amp;&amp; useSettingsStore().setTitle(to.meta.title)</span><br><span class="line">    <span class="hljs-comment">/* has token*/</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (to.path === <span class="hljs-string">'/login'</span>) &#123;</span><br><span class="line">      next(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span> &#125;)</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (useUserStore().roles.length === <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        isRelogin.show = <span class="hljs-literal">true</span></span><br><span class="line">        <span class="hljs-comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">        useUserStore().getInfo().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">          isRelogin.show = <span class="hljs-literal">false</span></span><br><span class="line">          usePermissionStore().generateRoutes().then(<span class="hljs-function"><span class="hljs-params">accessRoutes</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">            accessRoutes.forEach(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="hljs-keyword">if</span> (!isHttp(route.path)) &#123;</span><br><span class="line">                router.addRoute(route) <span class="hljs-comment">// 动态添加可访问路由表</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            next(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;) <span class="hljs-comment">// hack方法 确保addRoutes已完成</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line">          useUserStore().logOut().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">            ElMessage.error(err)</span><br><span class="line">            next(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span> &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 没有token</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (whiteList.indexOf(to.path) !== <span class="hljs-number">-1</span>) &#123;</span><br><span class="line">      <span class="hljs-comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      next(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.fullPath&#125;</span>`</span>) <span class="hljs-comment">// 否则全部重定向到登录页</span></span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我跟大家捋一下这个前置导航守卫中的思路：</p><ol><li>首先调用 getToken 方法，这个方法实际上是去 Cookie 中拿认证 Token，也就是登录成功后后端返回给前端的那个 JWT 字符串。</li><li>如果 getToken 方法有返回值，说明用户已经登录了，那么进入到 if 分支中，如果 getToken 没拿到值，说明用户未登录，未登录的话，又分为两种情况：i：访问的目标地址处于免登录白名单中，那么此时直接访问即可；ii：访问的目标地址不在白名单中，那么此时就跳转到登录页面去，跳转的时候同时携带一个 redirect 参数，这样方便在登录成功之后，再跳转回访问的目标页面。这个免登录访问的白名单，是一个在 src/permission.js 文件中定义的变量，默认有四个路径，分别是 <code>[&#39;/login&#39;, &#39;/auth-redirect&#39;, &#39;/bind&#39;, &#39;/register&#39;]</code>。</li><li>如果 getToken 拿到了值，说明用户已经登录了，此时又分情况：如果用户访问的路径是登录页面，那么就给他重定向到项目首页（也就是在已经登录的情况下，不允许用户再次访问登录页面）；如果用户访问的路径不是登录页面，那么首先判断 vuex 中的 roles 是否还有值？如果有值，说明当前就是用户点击了一个菜单按钮进行跳转的，那么直接跳转就行了；如果没有值，说明用户是按了浏览器的刷新按钮或者是 F5 按钮刷新进行的页面跳转，那么此时首先调用 getInfo 方法（位于 src/store/modules/user.js 文件中）去服务端重新加载当前用户的基本信息、角色信息以及权限信息，然后再调用 generateRoutes 方法（位于 src/store/modules/permission.js 文件中）去服务端加载路由信息，并将加载到的路由信息放入到 router 对象中（前提是这个路由对象不是一个 http 链接，就是普通的路由地址）。</li></ol><p>这就是动态路由的加载整体思路。</p><p>在第三步骤中，涉及到两个方法，一个是 getInfo 还有一个 generateRoutes，这两个方法也都比较关键，我们再来稍微看下。</p><h3 id="2-2-getInfo"><a href="#2-2-getInfo" class="headerlink" title="2.2 getInfo"></a>2.2 getInfo</h3><p>首先这个加载用户信息的方法位于 <code>src/store/modules/user.js</code> 文件中，换言之，这些用户的基本信息加载到之后，是存储在 vuex 中的，如果刷新浏览器这些数据就会丢失：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">getInfo() &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    getInfo().then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> user = res.user</span><br><span class="line">      <span class="hljs-keyword">const</span> avatar = (user.avatar == <span class="hljs-string">""</span> || user.avatar == <span class="hljs-literal">null</span>) ? defAva : <span class="hljs-keyword">import</span>.meta.env.VITE_APP_BASE_API + user.avatar;</span><br><span class="line">      <span class="hljs-keyword">if</span> (res.roles &amp;&amp; res.roles.length &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 验证返回的roles是否是一个非空数组</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.roles = res.roles</span><br><span class="line">        <span class="hljs-keyword">this</span>.permissions = res.permissions</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.roles = [<span class="hljs-string">'ROLE_DEFAULT'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">this</span>.name = user.userName</span><br><span class="line">      <span class="hljs-keyword">this</span>.avatar = avatar;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>方法的逻辑其实倒没啥好说的，结合服务端返回的 JSON 格式，应该就很好理解了（部分 JSON）：</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"permissions"</span>:[</span><br><span class="line">        <span class="hljs-string">"*:*:*"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="hljs-attr">"roles"</span>:[</span><br><span class="line">        <span class="hljs-string">"admin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="hljs-attr">"user"</span>:</span><br><span class="line">        <span class="hljs-string">"userName"</span>:<span class="hljs-string">"admin"</span>,</span><br><span class="line">        <span class="hljs-attr">"nickName"</span>:<span class="hljs-string">"TienChin健身"</span>,</span><br><span class="line">        <span class="hljs-attr">"avatar"</span>:<span class="hljs-string">""</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外再强调下，之前在 vhr 中，我们是将请求封装成了一个 api.js 文件，里边有常用的 get、post、put 以及 delete 请求等，然后在需要使用的地方，直接去调用这些方法发送请求即可，但是在 TienChin 中，脚手架的封装是将所有的请求都提前统一封装好，在需要的时候直接调用封装好的方法，连请求地址都不用传递了（封装的时候就已经写死了），所以小伙伴们看上面的 getInfo 方法只有方法调用，没有传递路径参数等。</p><h3 id="2-3-generateRoutes"><a href="#2-3-generateRoutes" class="headerlink" title="2.3 generateRoutes"></a>2.3 generateRoutes</h3><p>generateRoutes 方法则位于 src/store/modules/permission.js 文件中，这里值得说道的地方就比较多了：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">generateRoutes(roles) &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 向后端请求路由数据</span></span><br><span class="line">    getRouters().then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> sdata = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(res.data))</span><br><span class="line">      <span class="hljs-keyword">const</span> rdata = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(res.data))</span><br><span class="line">      <span class="hljs-keyword">const</span> defaultData = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(res.data))</span><br><span class="line">      <span class="hljs-keyword">const</span> sidebarRoutes = filterAsyncRouter(sdata)</span><br><span class="line">      <span class="hljs-keyword">const</span> rewriteRoutes = filterAsyncRouter(rdata, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)</span><br><span class="line">      <span class="hljs-keyword">const</span> defaultRoutes = filterAsyncRouter(defaultData)</span><br><span class="line">      <span class="hljs-keyword">const</span> asyncRoutes = filterDynamicRoutes(dynamicRoutes)</span><br><span class="line">      asyncRoutes.forEach(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123; router.addRoute(route) &#125;)</span><br><span class="line">      <span class="hljs-keyword">this</span>.setRoutes(rewriteRoutes)</span><br><span class="line">      <span class="hljs-keyword">this</span>.setSidebarRouters(constantRoutes.concat(sidebarRoutes))</span><br><span class="line">      <span class="hljs-keyword">this</span>.setDefaultRoutes(sidebarRoutes)</span><br><span class="line">      <span class="hljs-keyword">this</span>.setTopbarRoutes(defaultRoutes)</span><br><span class="line">      resolve(rewriteRoutes)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先大家看到，服务端返回的动态菜单数据解析了三次，分别拿到了三个对象，这三个对象都是将来要用的，只不过使用的场景不同，下面结合页面的显示跟大家细说。</p><ol><li>首先是调用 filterAsyncRouter 方法，这个方法的核心作用就是将服务端返回的 component 组件动态加载为一个 component 对象。不过这个方法在调用的过程中，后面还有两个参数，第二个是 lastRouter 在该方法中并无实质性作用；第三个参数则主要是说是否需要对 children 的 path 进行重写。小伙伴们知道，服务端返回的动态菜单的 path 属性都是只有一层的，例如一级菜单系统管理的 path 是 system，二级菜单用户管理的 path 则是 user，那么用户管理最终访问的 path 就是 <code>system/path</code>，如果第三个参数为 true，则会进行 path 的重写，将 path 最终设置正确。</li><li>所以这里的 sidebarRoutes 和 defaultRoutes 只是能用于菜单渲染（因为这两个里边的菜单 path 不对），而最终的页面跳转要通过 rewriteRoutes 才可以实现。</li><li>除了服务端返回的动态菜单，前端本身也定义了一些基础菜单，前端的基础菜单分为两大类，分别是 constantRoutes 和 dynamicRoutes，其中 constantRoutes 是固定菜单，也就是一些跟用户权限无关的菜单，例如 404 页面、首页等；dynamicRoutes 是动态菜单，也就是也根据用户权限来决定是否展示的菜单，例如分配用户、字典数据、调度日志等等。</li><li>filterDynamicRoutes 方法则是将前端提前定义好的 dynamicRoutes 菜单进行过滤，找出那些符合当前用户权限的菜单将之添加到路由中（这些菜单都不需要在菜单栏渲染出来）。</li><li>接下来涉及到四个不同的保存路由数据的变量，分别是 routes、addRoutes（经松哥分析，这个变量并无实际作用，可以删除之）、defaultRoutes、topbarRouters 以及 sidebarRouters，四个路由变量的作用各有不同：</li></ol><p><strong>routes：</strong></p><p>routes 中保存的是 constantRoutes 以及服务端返回的动态路由数据，并且这个动态路由数据中的 path 已经完成了重写，所以这个 routes 主要用在两个地方：</p><ul><li>首页的搜索上：首页的搜索也可以按照路径去搜索，所以需要用到这个 routes，如下图：</li></ul><p><img src="http://img.itboyhub.com/2021/10/tran/20220709221523.png" alt></p><ul><li>用在 TagsView，这个地方也需要根据页面渲染不同的菜单，也是用的 routes：</li></ul><p><img src="http://img.itboyhub.com/2021/10/tran/20220709221839.png" alt></p><p><strong>sidebarRouters：</strong></p><p>这个就是大家所熟知的侧边栏菜单了，具体展示是 constantRoutes+服务端返回的菜单，不过这些 constantRoutes 基本上 hidden 属性都是 false，渲染的时候是不会被渲染出来的。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220709222506.png" alt></p><p><strong>topbarRouters：</strong></p><p>这个是用在 TopNav 组件中，这个是将系统的一级菜单在头部显示出来的，如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220709223027.png" alt></p><p>一级菜单在顶部显示，左边显示的都是二级三级菜单，那么顶部菜单的渲染，用的就是这个 topbarRouters。</p><p><strong>defaultRoutes：</strong></p><p>想要开启顶部菜单，需要在 src/layout/components/Settings/index.vue 组件中设置，如下图：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220709223235.png" alt></p><p>开启顶部菜单之后，点击顶部菜单，左边菜单栏会跟着切换，此时就是从 defaultRoutes 中遍历出相关的菜单设置给 sidebarRouters。</p><p>好了，这就是这四个 routes 变量的作用，老实说，脚手架中这块的代码设计有点混乱，没必要搞这么多变量，等松哥抽空给大家优化下。</p><p>generateRoutes 方法最终会返回 rewriteRoutes 变量到前面说的那个前置导航守卫中，最终前置导航守卫将数据添加到 router 中。</p><p>菜单的渲染都是在 src/layout/components/Sidebar/index.vue 中完成的，看了下都是常规操作，没啥好说的。</p><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><p>好啦，这就是 RuoYi-Vue3 中的动态菜单渲染逻辑，不知道小伙伴们看明白没有？视频即将奉上，对视频感兴趣的小伙伴请戳这里：<a href="https://mp.weixin.qq.com/s/Qzj-tCYBB6QsviqF9H56rg" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;松哥之前写了两篇文章和大家分享了 TienChin 项目中的菜单数据问题，还没看过的小伙伴请戳这里：&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
      <category term="Vue3" scheme="http://www.javaboy.org/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>一个 Java 猿眼中 Vue3 和 Vue2 的差异</title>
    <link href="http://www.javaboy.org/2022/0718/vue3-vs-vue2.html"/>
    <id>http://www.javaboy.org/2022/0718/vue3-vs-vue2.html</id>
    <published>2022-07-18T15:22:10.000Z</published>
    <updated>2022-07-19T15:48:45.392Z</updated>
    
    <content type="html"><![CDATA[<p>随着 TienChin 项目视频的录制，松哥终于也要静下心来，认真捋一捋 Vue3 中的各种新特性了，然后再和小伙伴们进行分享，其实 Vue3 中还是带来了很多新鲜的玩意，今天我们就不卷 Java 了，来卷卷前端。</p><a id="more"></a><p>以下内容是一个 Java 猿对 Vue3 的理解，主要是应用层面上，如果有专业的前端小伙伴，请轻拍。</p><h2 id="1-script-写法"><a href="#1-script-写法" class="headerlink" title="1. script 写法"></a>1. script 写法</h2><p>进入到 Vue3 时代，最明显的感受就是在一个 .vue 文件中，script 标签的写法大变样了。以前在 Vue2 中，我们都是这样写的：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"SysHr"</span>,</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">                <span class="hljs-comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            <span class="hljs-comment">//</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            deleteHr(hr) &#123;</span><br><span class="line">                <span class="hljs-comment">//</span></span><br><span class="line">            &#125;,</span><br><span class="line">            doSearch() &#123;</span><br><span class="line">                <span class="hljs-comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>不过到了 Vue3 里边，这个写法变了，变成下面这样了：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;result&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;button @click=<span class="hljs-string">"btnClick"</span>&gt;clickMe&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    import &#123;ref&#125; from 'vue';</span></span><br><span class="line"><span class="hljs-regexp">    import &#123;onMounted,computed&#125; from 'vue'</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    export default &#123;</span></span><br><span class="line"><span class="hljs-regexp">        name: "MyVue01",</span></span><br><span class="line"><span class="hljs-regexp">        setup() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            const a = ref(1);</span></span><br><span class="line"><span class="hljs-regexp">            const btnClick=()=&gt;&#123;</span></span><br><span class="line"><span class="hljs-regexp">                a.value++;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            onMounted(() =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">                a.value++;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            const result = computed(()=&gt;&#123;</span></span><br><span class="line"><span class="hljs-regexp">                return Date.now();</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            return &#123;a,btnClick,result&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>先从大的方面来看，细节实现咱们后面再细聊。</p><p>大的方面，就是在这个 export default 中，以后就只有两个元素了，name 和 setup，我们以前的各种方法定义、生命周期函数、计算属性等等，都写在 setup 中，并且需要在 setup 中返回，setup 中返回了什么，上面的 template 中就能用什么。</p><p>这种写法稍微有点费事，所以还有一种简化的写法，像下面这样：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;result&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;button @click=<span class="hljs-string">"btnClick"</span>&gt;clickMe&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">&lt;script setup&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    import &#123;ref&#125; from 'vue';</span></span><br><span class="line"><span class="hljs-regexp">    import &#123;onMounted, computed&#125; from 'vue'</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    const a = ref(1);</span></span><br><span class="line"><span class="hljs-regexp">    const btnClick = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">        a.value++;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    onMounted(() =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">        a.value++;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;);</span></span><br><span class="line"><span class="hljs-regexp">    const result = computed(() =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">        return Date.now();</span></span><br><span class="line"><span class="hljs-regexp">    &#125;);</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>这种写法就是直接在 script 标签中加入 setup，然后在 script 标签中该怎么定义就怎么定义，也不用 return 了。这个场景，又有点 jQuery 的感觉了。</p><p>上面这个实现里有几个细节，我们再来详细说说。</p><h2 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2. 生命周期"></a>2. 生命周期</h2><p>首先就是生命周期函数的写法。</p><p>以前 Vue2 里的写法有一个专业名词叫做 options API，现在在 Vue3 里也有一个专业名词叫做 composition API。在 Vue3 中，这些对应的生命周期函数都要先从 vue 中导出，然后调用并传入一个回调函数，像我们上一小节那样写。</p><p>下图这张表格展示了 options API 和 composition API 的一一对应关系：</p><table><thead><tr><th style="text-align:left">options API</th><th style="text-align:left">composition API</th></tr></thead><tbody><tr><td style="text-align:left">beforeCreate</td><td style="text-align:left">Not Needed</td></tr><tr><td style="text-align:left">created</td><td style="text-align:left">Not Needed</td></tr><tr><td style="text-align:left">mounted</td><td style="text-align:left">onMounted</td></tr><tr><td style="text-align:left">beforeUpdate</td><td style="text-align:left">onBeforeUpdate</td></tr><tr><td style="text-align:left">updated</td><td style="text-align:left">onUpdated</td></tr><tr><td style="text-align:left">beforeUnmount</td><td style="text-align:left">onBeforeUnmount</td></tr><tr><td style="text-align:left">unmounted</td><td style="text-align:left">onUnmounted</td></tr><tr><td style="text-align:left">errorCaptured</td><td style="text-align:left">onErrorCaptured</td></tr><tr><td style="text-align:left">renderTracked</td><td style="text-align:left">onRenderTracked</td></tr><tr><td style="text-align:left">renderTriggered</td><td style="text-align:left">onRenderTriggered</td></tr><tr><td style="text-align:left">activated</td><td style="text-align:left">onActivated</td></tr><tr><td style="text-align:left">deactivated</td><td style="text-align:left">onDeactivated</td></tr></tbody></table><p>想用哪个生命周期函数，就从 vue 中导出这个函数，然后传入回一个回调就可以使用了。例如第一小节中松哥给大家举的 onMounted 的用法。</p><h2 id="3-计算属性"><a href="#3-计算属性" class="headerlink" title="3. 计算属性"></a>3. 计算属性</h2><p>除了生命周期函数，计算属性、watch 监听等等，用法也和生命周期函数类似，需要先从 vue 中导出，导出之后，也是传入一个回调函数就可以使用了。上文有例子，我就不再啰嗦了。</p><p>像 watch 的监控，写法如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;</span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;onMounted,computed,watch&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"MyVue01"</span>,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="hljs-keyword">const</span> a = ref(<span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">const</span> btnClick=<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">                a.value++;</span><br><span class="line">            &#125;</span><br><span class="line">            onMounted(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">                a.value++;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-keyword">const</span> result = computed(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Date</span>.now();</span><br><span class="line">            &#125;);</span><br><span class="line">            watch(a,(value,oldValue)=&gt;&#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"value"</span>, value);</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"oldValue"</span>, oldValue);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;a,btnClick,result&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>导入 watch 之后，然后直接使用即可。</p><h2 id="4-ref-于-reactive"><a href="#4-ref-于-reactive" class="headerlink" title="4. ref 于 reactive"></a>4. ref 于 reactive</h2><p>上面的例子中还有一个 ref，这个玩意也需要跟大家介绍下。</p><p>在 Vue2 里边，如果我们想要定义响应式数据，一般都是写在 data 函数中的，类似下面这样：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"SysHr"</span>,</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">                keywords: <span class="hljs-string">''</span>,</span><br><span class="line">                hrs: [],</span><br><span class="line">                selectedRoles: [],</span><br><span class="line">                allroles: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>但是在 Vue3 里边，你已经看不到 data 函数了，那怎么定义响应式数据呢？就是通过 ref 或者 reactive 来定义了。</p><p>在第一小节中，我们就是通过 ref 定义了一个名为 a 的响应式变量。</p><p>这个 a 在 script 中写的时候，有一个 value 属性，不过在 HTML 中引用的时候，是没有 value 的，可千万别写成了 <code></code>，我们再来回顾下上文的案例：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"MyVue04"</span>,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="hljs-keyword">const</span> a = ref(<span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">const</span> btnClick=<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">                a.value++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;a,btnClick&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>现在就是通过这样的方式来定义响应式对象，修改值的时候，需要用 <code>a.value</code>，但是真正的上面的 template 节点中访问的时候是不需要 value 的（注意，函数也得返回后才能在页面中使用）。</p><p><strong>和 Vue2 相比，这种写法有一个很大的好处就是在方法中引用的时候不用再写 this 了。</strong></p><p>ref 一般用来定义原始数据类型，像 String、Number、BigInt、Boolean、Symbol、Null、Undefined 这些。</p><p>如果你想定义对象，那么可以使用 reactive 来定义，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;book.name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;book.author&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;ref, reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"MyVue04"</span>,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="hljs-keyword">const</span> a = ref(<span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">const</span> book = reactive(&#123;</span><br><span class="line">                name: <span class="hljs-string">"三国演义"</span>,</span><br><span class="line">                author: <span class="hljs-string">"罗贯中"</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-keyword">const</span> btnClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">                a.value++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;a, btnClick,book&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>这里定义了 book 对象，book 对象中包含了 name 和 author 两个属性。</p><p>有的时候，你可能批量把数据定义好了，但是在访问的时候却希望直接访问，那么我们可以使用数据展开，像下面这样：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;author&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">import</span> &#123;ref, reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">        name: <span class="hljs-string">"MyVue04"</span>,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="hljs-keyword">const</span> a = ref(<span class="hljs-number">1</span>);</span><br><span class="line">            <span class="hljs-keyword">const</span> book = reactive(&#123;</span><br><span class="line">                name: <span class="hljs-string">"三国演义"</span>,</span><br><span class="line">                author: <span class="hljs-string">"罗贯中"</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-keyword">const</span> btnClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">                a.value++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;a, btnClick,...book&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>这样，在上面访问的时候，就可以直接访问 name 和 author 两个属性了，就不用添加 book 前缀了。</p><p>不过！！！</p><p>这种写法其实有一个小坑。</p><p>比如我再添加一个按钮，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;author&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;button @click=<span class="hljs-string">"updateBook"</span>&gt;更新图书信息&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    import &#123;ref, reactive&#125; from 'vue';</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    export default &#123;</span></span><br><span class="line"><span class="hljs-regexp">        name: "MyVue04",</span></span><br><span class="line"><span class="hljs-regexp">        setup() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            const a = ref(1);</span></span><br><span class="line"><span class="hljs-regexp">            const book = reactive(&#123;</span></span><br><span class="line"><span class="hljs-regexp">                name: "三国演义",</span></span><br><span class="line"><span class="hljs-regexp">                author: "罗贯中"</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            const btnClick = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">                a.value++;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            const updateBook=()=&gt;&#123;</span></span><br><span class="line"><span class="hljs-regexp">                book.name = '123';</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            return &#123;a, btnClick,...book,updateBook&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>这个时候点击更新按钮，你会发现没反应！因为用了数据展开之后，响应式就失效了。所以，对于这种展开的数据，应该再用 toRefs 来处理下，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;author&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;button @click=<span class="hljs-string">"updateBook"</span>&gt;更新图书信息&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">&lt;script&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    import &#123;ref, reactive, toRefs&#125; from 'vue';</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    export default &#123;</span></span><br><span class="line"><span class="hljs-regexp">        name: "MyVue04",</span></span><br><span class="line"><span class="hljs-regexp">        setup() &#123;</span></span><br><span class="line"><span class="hljs-regexp">            const a = ref(1);</span></span><br><span class="line"><span class="hljs-regexp">            const book = reactive(&#123;</span></span><br><span class="line"><span class="hljs-regexp">                name: "三国演义",</span></span><br><span class="line"><span class="hljs-regexp">                author: "罗贯中"</span></span><br><span class="line"><span class="hljs-regexp">            &#125;);</span></span><br><span class="line"><span class="hljs-regexp">            const btnClick = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">                a.value++;</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            const updateBook = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">                book.name = '123';</span></span><br><span class="line"><span class="hljs-regexp">            &#125;</span></span><br><span class="line"><span class="hljs-regexp">            return &#123;a, btnClick, ...toRefs(book),updateBook&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>当然，如果你将 setup 直接写在了 script 标签中，那么可以直接按照如下方式来展开数据：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;a&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;button @click="btnClick"&gt;clickMe&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;&#123;&#123;author&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;button @click=<span class="hljs-string">"updateBook"</span>&gt;更新图书信息&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/template&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">&lt;script setup&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    import &#123;ref, reactive, toRefs&#125; from 'vue';</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">    const a = ref(1);</span></span><br><span class="line"><span class="hljs-regexp">    const book = reactive(&#123;</span></span><br><span class="line"><span class="hljs-regexp">        name: "三国演义",</span></span><br><span class="line"><span class="hljs-regexp">        author: "罗贯中"</span></span><br><span class="line"><span class="hljs-regexp">    &#125;);</span></span><br><span class="line"><span class="hljs-regexp">    const btnClick = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">        a.value++;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    const updateBook = () =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">        book.name = '123';</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">    const &#123;name, author&#125; = toRefs(book);</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>好啦，今天就和小伙伴们分享了 Vue3 中几个新鲜的玩法～作为我们 TienChin 项目的基础（Vue 基本用法在 vhr 中都已经讲过了，所以这里就不再赘述了），当然，Vue3 和 Vue2 还有其他一些差异，这些我们都将在 TienChin 项目视频中和小伙伴们再仔细分享。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着 TienChin 项目视频的录制，松哥终于也要静下心来，认真捋一捋 Vue3 中的各种新特性了，然后再和小伙伴们进行分享，其实 Vue3 中还是带来了很多新鲜的玩意，今天我们就不卷 Java 了，来卷卷前端。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>如何随意切换 NodeJs 版本？</title>
    <link href="http://www.javaboy.org/2022/0715/nodejs-nvm.html"/>
    <id>http://www.javaboy.org/2022/0715/nodejs-nvm.html</id>
    <published>2022-07-15T15:21:59.000Z</published>
    <updated>2022-07-19T15:48:42.146Z</updated>
    
    <content type="html"><![CDATA[<p>小伙伴们知道松哥最近在录<a href>TienChin</a>项目的视频，其中前端用的是 Vue3，这个用的是 RuoYi-Vue3，这个脚手架里边前端用的 yarn，并且还使用了一些插件，导致 Node 版本必须要 &gt;=14。</p><a id="more"></a><p>正准备更新我的 Node 的时候，忽然想起来我电脑上还有我的个人网站 <code>www.javaboy.org</code>，这个网站我是用 <code>Hexo</code> 在 2019 年构建的，当时用的 <code>Hexo</code> 的版本也比较老，如果使用高版本的 <code>NodeJS</code> 会导致我的 <code>Hexo</code> 运行有问题（这个坑之前踩过一次了），如果重新安装最新版的 <code>Hexo</code> 估计就没啥问题了，但是我的那个个人网站我做了很多定制，不仅仅是修改 <code>Hexo</code> 的配置，甚至还自己上手改了不少代码，所以要是重新安装 <code>Hexo</code> 也费事，要改好多东西，太折腾了。</p><p>思来想去，要是能在电脑上安装多个不同的 NodeJS 版本就好了，并且这个安装还得方便不能太折腾（否则我还不如去折腾我的 Hexo），那么不妨看看 NVM。</p><p>作为 Java 工程师，我觉得这个 NVM 还挺方便的，不过在专业的前端工程师看了，可能会觉得有点幼稚了哈哈。</p><h2 id="1-NVM"><a href="#1-NVM" class="headerlink" title="1. NVM"></a>1. NVM</h2><p>NVM 是 Mac 下的 node 管理工具，当我第一次看到这个工具的时候，就想到了 Ruby 中的 rvm（之前在《Spring Boot+Vue 全栈开发实战》一书中，为了教大家搭建 Redis 集群，不得不教大家用 rvm 安装 Ruby）。</p><p>如果需要管理 Windows 下的 node，官方推荐使用 <code>nvmw</code> 或 <code>nvm-windows</code>，不过，<code>nvm-windows</code> 并不是 nvm 的简单移植，他们也没有任何关系。</p><p>大部分情况下，Windows 下的 nvm 和 mac 里的 nvm 使用都没有大的差异，基本上是一致的，会有个别命令不太相同，这个下文中我会和大家梳理。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>安装之前记得先把自己之前安装的 NodeJS 删除掉，否则可能会起冲突。</p><p>Windows 上好说，控制面板找到对应的文件直接卸载即可，Mac 上则执行如下命令删除：</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo npm uninstall npm -g</span><br><span class="line"></span><br><span class="line">sudo rm -rf /usr/<span class="hljs-built_in">local</span>/lib/node /usr/<span class="hljs-built_in">local</span>/lib/node_modules /var/db/receipts/org.nodejs.*</span><br><span class="line"></span><br><span class="line">sudo rm -rf /usr/<span class="hljs-built_in">local</span>/include/node /Users/<span class="hljs-variable">$USER</span>/.npm</span><br><span class="line"></span><br><span class="line">sudo rm /usr/<span class="hljs-built_in">local</span>/bin/node</span><br><span class="line"></span><br><span class="line">sudo rm /usr/<span class="hljs-built_in">local</span>/share/man/man1/node.1</span><br><span class="line"></span><br><span class="line">sudo rm /usr/<span class="hljs-built_in">local</span>/lib/dtrace/node.d</span><br></pre></td></tr></table></figure><p>一顿操作下来，然后执行如下命令，如果找不到对应的命令，那就表示删除成功了：</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">// -bash: /usr/<span class="hljs-built_in">local</span>/bin/node: No such file or directory</span><br><span class="line"></span><br><span class="line">npm -v</span><br><span class="line">// -bash: /usr/<span class="hljs-built_in">local</span>/bin/npm: No such file or directory</span><br></pre></td></tr></table></figure><p>Windows 上有一个 exe 文件，直接双击安装就行了，这个没啥好说的。</p><p>Mac 或者 Linux 上我们则直接可以在线安装，非常方便：</p><p>可以使用 curl 命令安装：</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><p>也可以使用 wget 命令安装：</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><p>执行完成后，通过 <code>nvm -v</code> 命令可以查看是否安装成功：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220705234001.png" alt></p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><p>使用命令也是比较容易的。给小伙伴们列举一个常见的命令：</p><p>指定当前 Node 版本：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nvm use 16</span><br><span class="line">Now using node v16.9.1 (npm v7.21.1)</span><br><span class="line">$ node -v</span><br><span class="line">v16.9.1</span><br><span class="line">$ nvm use 14</span><br><span class="line">Now using node v14.18.0 (npm v6.14.15)</span><br><span class="line">$ node -v</span><br><span class="line">v14.18.0</span><br></pre></td></tr></table></figure><p>安装一个 Node 版本：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install 12</span><br><span class="line">Now using node v12.22.6 (npm v6.14.5)</span><br><span class="line">$ node -v</span><br><span class="line">v12.22.6</span><br></pre></td></tr></table></figure><p>查看目前已安装的 Node 版本：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><p>查看有哪些可用的 Node 版本：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Mac</span><br><span class="line">nvm ls-remote</span><br><span class="line"># Windows</span><br><span class="line">nvm list available</span><br></pre></td></tr></table></figure><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>好啦，如果小伙伴们也有要使用不同 Node 版本的烦恼，那么不妨试试这个～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小伙伴们知道松哥最近在录&lt;a href&gt;TienChin&lt;/a&gt;项目的视频，其中前端用的是 Vue3，这个用的是 RuoYi-Vue3，这个脚手架里边前端用的 yarn，并且还使用了一些插件，导致 Node 版本必须要 &amp;gt;=14。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot+Vue3 动态菜单实现思路梳理</title>
    <link href="http://www.javaboy.org/2022/0714/vue3-dynamic-menu.html"/>
    <id>http://www.javaboy.org/2022/0714/vue3-dynamic-menu.html</id>
    <published>2022-07-14T15:21:48.000Z</published>
    <updated>2022-07-19T15:48:38.504Z</updated>
    
    <content type="html"><![CDATA[<p>关于 Spring Boot + Vue3 的动态菜单，松哥之前已经写了两篇文章了，这两篇文章主要是从代码上和大家分析动态菜单最终的实现方式，但是还是有小伙伴觉得没太看明白，感觉缺乏一个提纲挈领的思路，所以，今天松哥再整一篇文章和大家再来捋一捋这个问题，希望这篇文章能让小伙伴们彻底搞清楚这个问题。</p><a id="more"></a><h2 id="1-整体思路"><a href="#1-整体思路" class="headerlink" title="1. 整体思路"></a>1. 整体思路</h2><p>首先我们来看整体思路。</p><p>光说思路大家还是云里雾里，我们结合具体的效果图来看：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220712230354.png" alt></p><p>最终菜单显示效果类似上图，我把这里的菜单分为了四类：</p><ol><li>有父有子：像系统管理那种，既有父菜单，又有子菜单。</li><li>只有一个一级菜单，这种又细分为三种情况：<ol><li>普通的菜单，点击之后在右边主页面打开某个功能页面。</li><li>一个超链接，但不是外链，是一个在当前系统中打开的外部网页，点击之后，会在右边的主页面中新开一个选项卡，这个选项卡中显示的是一个外部网页（本质上是通过 iframe 标签引入的一个外部网页）。</li><li>一个超链接，并且还是一个外链，点击之后，直接在浏览器中打开一个新的选项卡，新的选项卡中展示一个外部链接。</li></ol></li></ol><p>整体上来说，就分为这四种情况。其中 1、2.1、2.3 应该都好理解，2.2 有的小伙伴可能不清楚，我给大家截个图看下就知道了：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220627235423.png" alt></p><p>四种菜单对应的 JSON 格式分别如下：</p><ol><li>有父有子：</li></ol><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"/monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"redirect"</span>: <span class="hljs-string">"noRedirect"</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line"><span class="hljs-attr">"alwaysShow"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"系统监控"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="hljs-attr">"children"</span>: [&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Online"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"online"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"monitor/online/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"在线用户"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"online"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Job"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"job"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"monitor/job/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"定时任务"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"job"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>只有一个一级菜单，且一级菜单点击后是一个功能页面：</li></ol><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"/"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line"><span class="hljs-attr">"children"</span>: [&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Role"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"role"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"system/role/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"角色管理"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"peoples"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>只有一个一级菜单，且一级菜单点击之后在当前系统中一个新的选项卡里打开一个网页：</li></ol><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/"</span>,</span><br><span class="line">    <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line">    <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">        <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">        <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-attr">"children"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Www.javaboy.org"</span>,</span><br><span class="line">            <span class="hljs-attr">"path"</span>: <span class="hljs-string">"www.javaboy.org"</span>,</span><br><span class="line">            <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">            <span class="hljs-attr">"component"</span>: <span class="hljs-string">"InnerLink"</span>,</span><br><span class="line">            <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">                <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">                <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">                <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">                <span class="hljs-attr">"link"</span>: <span class="hljs-string">"http://www.javaboy.org"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>只有一个一级菜单，且一级菜单点击之后在浏览器打开一个新的选项卡：</li></ol><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"path"</span>: <span class="hljs-string">"http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line">    <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">        <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">        <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-attr">"link"</span>: <span class="hljs-string">"http://www.javaboy.org"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据以上四种不同的 JSON，我们总结出以下规律：</p><ol><li>父组件都是 Layout，这里的 Layout 就相当于我们 vhr 中的 Home 组件，也就是整个页面的框架。</li><li>如果想在当前系统中，新开选项卡打开一个功能项，那么这个菜单项必然有 children，即使 children 中只有一项菜单。</li><li>如果菜单项是一个外链，那么这个菜单项就不需要有 children 了。</li><li>某种程度上，我们其实可以将 2、3 归为一类，毕竟 3 只是展示内容的组件固定为 InnerLink，2 则视情况而定。</li><li>整体上，可以点击的菜单的 path 都是父菜单的 path + 子菜单的 path，如果菜单项有父有子，那就正常拼接就行了；如果只有一个子菜单，那么父菜单的 path 就是 /；如果是一个外链，那就只有父菜单的 path 了。</li></ol><p>好了，这就是动态菜单的整体设计。</p><h2 id="2-前端渲染"><a href="#2-前端渲染" class="headerlink" title="2. 前端渲染"></a>2. 前端渲染</h2><p>接下来我们再来看一看前端的菜单渲染，前端的动态菜单渲染位于 <code>tienchin-ui/src/layout/components/Sidebar/SidebarItem.vue</code> 文件中：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"!item.hidden"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"hasOneShowingChild(item.children, item) &amp;&amp; (!onlyOneChild.children || onlyOneChild.noShowingChildren) &amp;&amp; !item.alwaysShow"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">app-link</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"onlyOneChild.meta"</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">"resolvePath(onlyOneChild.path, onlyOneChild.query)"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"resolvePath(onlyOneChild.path)"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"&#123; 'submenu-title-noDropdown': !isNest &#125;"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">:icon-class</span>=<span class="hljs-string">"onlyOneChild.meta.icon || (item.meta &amp;&amp; item.meta.icon)"</span>/&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"menu-title"</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"hasTitle(onlyOneChild.meta.title)"</span>&gt;</span>&#123;&#123; onlyOneChild.meta.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">app-link</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">el-sub-menu</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"subMenu"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"resolvePath(item.path)"</span> <span class="hljs-attr">popper-append-to-body</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"item.meta"</span> #<span class="hljs-attr">title</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">:icon-class</span>=<span class="hljs-string">"item.meta &amp;&amp; item.meta.icon"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"menu-title"</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"hasTitle(item.meta.title)"</span>&gt;</span>&#123;&#123; item.meta.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">sidebar-item</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">"child in item.children"</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">:key</span>=<span class="hljs-string">"child.path"</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">:is-nest</span>=<span class="hljs-string">"true"</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">:item</span>=<span class="hljs-string">"child"</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">:base-path</span>=<span class="hljs-string">"resolvePath(child.path)"</span></span></span><br><span class="line"><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">"nest-menu"</span></span></span><br><span class="line"><span class="hljs-tag">      /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-sub-menu</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里涉及到几个方法，具体的方法细节我就不贴出来了，主要和大家说下实现思路。</p><ol><li>先看整体上，这个菜单要是非隐藏的，隐藏的菜单，那么直接一级菜单及其下的子菜单就都不渲染了。</li><li>渲染整体上分两块，上面的 template 主要是渲染只有一个子菜单的情况，也就是第一小节的 2、3、4 三种情况，下面的渲染正常的有父有子的情况，也就是第一小节的菜单 1。</li><li>hasOneShowingChild 主要是判断这个菜单项是否只有一个需要渲染的子菜单，如果有多个子菜单，但是大部分都是隐藏，只有一个需要渲染出来，那也算只有一个子菜单，如果一个菜单项都没有子菜单，那也算一个子菜单，只不过这个子菜单就是他自身，对应第一小节第 4 种情况。在判断的过程中，将唯一需要渲染的菜单的数据赋值给 onlyOneChild 变量，那么最终，如果当前菜单项只有一个子菜单，且这个子菜单没有子菜单（或者有子菜单但是子菜单不用显示），并且当前菜单也不是必须要渲染的，那就将 onlyOneChild 的数据渲染出来。</li><li>对于普通的有父有子的情况，渲染的时候，通过 el-sub-menu 标签进行渲染，但是注意子项是 sidebar-item，sidebar-item 其实就是当前项！换言之，这里的渲染其实还用到了递归（直到没有 children 的时候结束），这样即便菜单有三级四级五级等等，只要不嫌难看，都是可以渲染出来的。</li></ol><h2 id="3-后端菜单生成"><a href="#3-后端菜单生成" class="headerlink" title="3. 后端菜单生成"></a>3. 后端菜单生成</h2><h3 id="3-1-菜单表"><a href="#3-1-菜单表" class="headerlink" title="3.1 菜单表"></a>3.1 菜单表</h3><p>首先我们来看看菜单表的定义，也就是 <code>sys_menu</code>。</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`sys_menu`</span> (</span><br><span class="line">  <span class="hljs-string">`menu_id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单ID'</span>,</span><br><span class="line">  <span class="hljs-string">`menu_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单名称'</span>,</span><br><span class="line">  <span class="hljs-string">`parent_id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'父菜单ID'</span>,</span><br><span class="line">  <span class="hljs-string">`order_num`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'显示顺序'</span>,</span><br><span class="line">  <span class="hljs-string">`path`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'路由地址'</span>,</span><br><span class="line">  <span class="hljs-string">`component`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'组件路径'</span>,</span><br><span class="line">  <span class="hljs-string">`query`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'路由参数'</span>,</span><br><span class="line">  <span class="hljs-string">`is_frame`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'1'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否为外链（0是 1否）'</span>,</span><br><span class="line">  <span class="hljs-string">`is_cache`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否缓存（0缓存 1不缓存）'</span>,</span><br><span class="line">  <span class="hljs-string">`menu_type`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单类型（M目录 C菜单 F按钮）'</span>,</span><br><span class="line">  <span class="hljs-string">`visible`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单状态（0显示 1隐藏）'</span>,</span><br><span class="line">  <span class="hljs-string">`status`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单状态（0正常 1停用）'</span>,</span><br><span class="line">  <span class="hljs-string">`perms`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'权限标识'</span>,</span><br><span class="line">  <span class="hljs-string">`icon`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'#'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单图标'</span>,</span><br><span class="line">  <span class="hljs-string">`create_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建者'</span>,</span><br><span class="line">  <span class="hljs-string">`create_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建时间'</span>,</span><br><span class="line">  <span class="hljs-string">`update_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新者'</span>,</span><br><span class="line">  <span class="hljs-string">`update_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新时间'</span>,</span><br><span class="line">  <span class="hljs-string">`remark`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'备注'</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`menu_id`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">3054</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci <span class="hljs-keyword">COMMENT</span>=<span class="hljs-string">'菜单权限表'</span>;</span><br></pre></td></tr></table></figure><p>其实这里很多字段都和我们 vhr 项目项目很相似，我也就不重复啰嗦了，我这里主要和小伙伴们说一个字段，那就是 <code>menu_type</code>。</p><p><code>menu_type</code> 表示一个菜单字段的类型，一个菜单有三种类型，分别是目录（M）、菜单（C）以及按钮（F）。这里所说的目录，相当于我们在 vhr 中所说的一级菜单，菜单相当于我们在 vhr 中所说的二级菜单。</p><p>当用户从前端登录成功后，要去动态加载的菜单的时候，就查询 M 和 C 类型的数据即可，F 类型的数据不是菜单项，查询的时候直接过滤掉即可，通过 <code>menu_type</code> 这个字段可以轻松的过滤掉 F 类型的数据。小伙伴们想想，F 类型的数据过滤掉之后，剩下的数据不就是一级菜单和二级菜单了，那不就和 vhr 又一样了么！</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220626194444.png" alt></p><p>在 vhr 中，考虑到菜单就是只有两级：一级菜单和二级菜单，一级菜单是目录，二级菜单是则是具体的菜单项，没有三级菜单！所以在 vhr 中，查询菜单的时候我直接用了一个一对多的查询，将一级菜单做一的一方，二级菜单做多的一方，这样比较省事。当然灵活度差一点，所以在 TienChin 项目中，这块还是用上了递归。</p><h3 id="3-2-菜单接口"><a href="#3-2-菜单接口" class="headerlink" title="3.2 菜单接口"></a>3.2 菜单接口</h3><p>当用户登录成功之后，会自动请求 <code>/getRouters</code> 接口来获取菜单信息，我们一起来看下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取路由信息</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由信息</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"getRouters"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">getRouters</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    Long userId = SecurityUtils.getUserId();</span><br><span class="line">    List&lt;SysMenu&gt; menus = menuService.selectMenuTreeByUserId(userId);</span><br><span class="line">    <span class="hljs-keyword">return</span> AjaxResult.success(menuService.buildMenus(menus));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的查询实际上分为两个步骤：</p><ol><li>根据用户 id 查询到所有的菜单信息，这一步的查询实际上是比较容易的，就单纯的多张表联合在一起，然后过滤出和当前用户相关并且菜单类型为 M 或者 C 的菜单（类型为 F 的表示按钮，就不要了），查询到菜单信息之后，然后进行一个递归操作，将菜单数据的层级排列出来。</li><li><code>menuService.buildMenus</code> 这一步则是将菜单数据专为前端所需要的路由数据。</li></ol><p>一共就这两个步骤，我们来逐一进行分析。</p><p>先来看查询菜单数据。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 根据用户ID查询菜单</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId 用户名称</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 菜单列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SysMenu&gt; <span class="hljs-title">selectMenuTreeByUserId</span><span class="hljs-params">(Long userId)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; menus = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (SecurityUtils.isAdmin(userId)) &#123;</span><br><span class="line">        menus = menuMapper.selectMenuTreeAll();</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        menus = menuMapper.selectMenuTreeByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> getChildPerms(menus, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 根据父节点的ID获取所有子节点</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list     分类表</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parentId 传入的父节点ID</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> String</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SysMenu&gt; <span class="hljs-title">getChildPerms</span><span class="hljs-params">(List&lt;SysMenu&gt; list, <span class="hljs-keyword">int</span> parentId)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; returnList = <span class="hljs-keyword">new</span> ArrayList&lt;SysMenu&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (Iterator&lt;SysMenu&gt; iterator = list.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">        SysMenu t = (SysMenu) iterator.next();</span><br><span class="line">        <span class="hljs-comment">// 一、根据传入的某个父节点ID,遍历该父节点的所有子节点</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (t.getParentId() == parentId) &#123;</span><br><span class="line">            recursionFn(list, t);</span><br><span class="line">            returnList.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> returnList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 递归列表</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> t</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">recursionFn</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 得到子节点列表</span></span><br><span class="line">    List&lt;SysMenu&gt; childList = getChildList(list, t);</span><br><span class="line">    t.setChildren(childList);</span><br><span class="line">    <span class="hljs-keyword">for</span> (SysMenu tChild : childList) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (hasChild(list, tChild)) &#123;</span><br><span class="line">            recursionFn(list, tChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 得到子节点列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SysMenu&gt; <span class="hljs-title">getChildList</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; tlist = <span class="hljs-keyword">new</span> ArrayList&lt;SysMenu&gt;();</span><br><span class="line">    Iterator&lt;SysMenu&gt; it = list.iterator();</span><br><span class="line">    <span class="hljs-keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        SysMenu n = (SysMenu) it.next();</span><br><span class="line">        <span class="hljs-keyword">if</span> (n.getParentId().longValue() == t.getMenuId().longValue()) &#123;</span><br><span class="line">            tlist.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> tlist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 判断是否有子节点</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasChild</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> getChildList(list, t).size() &gt; <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里一共涉及到五个关键方法，我们来逐一进行分析：</p><ol><li>selectMenuTreeByUserId：这个方法的执行比较容易，如果当前用户是管理员，那就不用加过滤条件了，直接查询出所有的类型为 M 和 C 的菜单项即可。</li><li>getChildPerms：这个方法主要是将前面查询出来的菜单数据进行重组，本来都是一个集合中的数据，现在在该方法中处理成树状，处理的核心逻辑就是调用 recursionFn 方法将之进行递归。</li><li>recursionFn：这是最为关键的递归方法了，首先调用 getChildList 获取当前菜单项的 children，然后将获取到的 children 设置给当前菜单项，最后还要遍历获取到的 children，如果这个 children 也是有子菜单的，则继续调用 recursionFn 方法进行处理。</li><li>getChildList：这个是查询某一个菜单的子菜单，这个很容易，如果某一个菜单的 parentId 是当前菜单的 id，那么这个菜单就是当前菜单的子菜单。</li><li>hasChild：这个是判断给定的菜单是否有子菜单，这个逻辑就比较简单了。</li></ol><p>好啦，这个就是整个的查询逻辑，整体上来说是比较容易的，就是查询 M 和 C 类型的菜单，然后再做一个递归操作，将菜单数据变成一个树状数据。</p><p>但是因为 SysMenu 和前后端所需要的路由数据的字段名称对不上，并且格式参数等都不符合前端的要求，所以还需要再做一个转换，这就是 <code>menuService.buildMenus</code> 所做的事情了：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 构建前端路由所需要的菜单</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menus 菜单列表</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;RouterVo&gt; <span class="hljs-title">buildMenus</span><span class="hljs-params">(List&lt;SysMenu&gt; menus)</span> </span>&#123;</span><br><span class="line">    List&lt;RouterVo&gt; routers = <span class="hljs-keyword">new</span> LinkedList&lt;RouterVo&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (SysMenu menu : menus) &#123;</span><br><span class="line">        RouterVo router = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">        router.setHidden(<span class="hljs-string">"1"</span>.equals(menu.getVisible()));</span><br><span class="line">        router.setName(getRouteName(menu));</span><br><span class="line">        router.setPath(getRouterPath(menu));</span><br><span class="line">        router.setComponent(getComponent(menu));</span><br><span class="line">        router.setQuery(menu.getQuery());</span><br><span class="line">        router.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), StringUtils.equals(<span class="hljs-string">"1"</span>, menu.getIsCache()), menu.getPath()));</span><br><span class="line">        List&lt;SysMenu&gt; cMenus = menu.getChildren();</span><br><span class="line">        <span class="hljs-keyword">if</span> (!cMenus.isEmpty() &amp;&amp; cMenus.size() &gt; <span class="hljs-number">0</span> &amp;&amp; UserConstants.TYPE_DIR.equals(menu.getMenuType())) &#123;</span><br><span class="line">            router.setAlwaysShow(<span class="hljs-keyword">true</span>);</span><br><span class="line">            router.setRedirect(<span class="hljs-string">"noRedirect"</span>);</span><br><span class="line">            router.setChildren(buildMenus(cMenus));</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMenuFrame(menu)) &#123;</span><br><span class="line">            router.setMeta(<span class="hljs-keyword">null</span>);</span><br><span class="line">            List&lt;RouterVo&gt; childrenList = <span class="hljs-keyword">new</span> ArrayList&lt;RouterVo&gt;();</span><br><span class="line">            RouterVo children = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">            children.setPath(menu.getPath());</span><br><span class="line">            children.setComponent(menu.getComponent());</span><br><span class="line">            children.setName(StringUtils.capitalize(menu.getPath()));</span><br><span class="line">            children.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), StringUtils.equals(<span class="hljs-string">"1"</span>, menu.getIsCache()), menu.getPath()));</span><br><span class="line">            children.setQuery(menu.getQuery());</span><br><span class="line">            childrenList.add(children);</span><br><span class="line">            router.setChildren(childrenList);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (menu.getParentId().intValue() == <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">            router.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon()));</span><br><span class="line">            router.setPath(<span class="hljs-string">"/"</span>);</span><br><span class="line">            List&lt;RouterVo&gt; childrenList = <span class="hljs-keyword">new</span> ArrayList&lt;RouterVo&gt;();</span><br><span class="line">            RouterVo children = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">            String routerPath = innerLinkReplaceEach(menu.getPath());</span><br><span class="line">            children.setPath(routerPath);</span><br><span class="line">            children.setComponent(UserConstants.INNER_LINK);</span><br><span class="line">            children.setName(StringUtils.capitalize(routerPath));</span><br><span class="line">            children.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), menu.getPath()));</span><br><span class="line">            childrenList.add(children);</span><br><span class="line">            router.setChildren(childrenList);</span><br><span class="line">        &#125;</span><br><span class="line">        routers.add(router);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> routers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个方法的执行逻辑上我们可以看到，这里的菜单数据一共分为了四种情况，其实刚好就和我们第一小节所介绍的情况相对应。</p><p>整体上来看，分支语句外面设置了组件的最基本的属性。三个分支语句：</p><ol><li>第一个分支，处理普通的有父有子的情况。</li><li>第二个分支，处理第一小节第二种情况。</li><li>第三个分支，处理第一小节第三种情况。</li><li>如果三个分支都没进去，那就是第一小节的第四种情况，以及各个子菜单的情况了。</li></ol><p>好了，基于这样大的思路，再来看各个属性的具体设置，就很容易了。</p><ol><li>首先是可见性 hidden，这个没啥好说的。</li><li>接下来是菜单的 name 属性，name 属性分为了两种情况：路由的 name 属性是菜单表中的 path 字段值且首字母大写（菜单 1、3、4）；如果在一级菜单中，出现了一个菜单 C（本来这一级别只有 M），并且还不是外链，那么就设置菜单的 name 为空字符串（相当于此时不需要 name 属性了，对应菜单 2 的情况）。</li><li>接下来是路由的 path，设置 path 的时候也分好种情况，松哥对照着代码来和大家说一下：</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取路由地址</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menu 菜单信息</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由地址</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRouterPath</span><span class="hljs-params">(SysMenu menu)</span> </span>&#123;</span><br><span class="line">    String routerPath = menu.getPath();</span><br><span class="line">    <span class="hljs-comment">// 内链打开外网方式</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (menu.getParentId().intValue() != <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">        routerPath = innerLinkReplaceEach(routerPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 非外链并且是一级目录（类型为目录）</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == menu.getParentId().intValue() &amp;&amp; UserConstants.TYPE_DIR.equals(menu.getMenuType())</span><br><span class="line">            &amp;&amp; UserConstants.NO_FRAME.equals(menu.getIsFrame())) &#123;</span><br><span class="line">        routerPath = <span class="hljs-string">"/"</span> + menu.getPath();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 非外链并且是一级目录（类型为菜单）</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMenuFrame(menu)) &#123;</span><br><span class="line">        routerPath = <span class="hljs-string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> routerPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a. 首先获取从数据库中查询到的 path 属性。<br>b. 如果当前组件不是一级菜单，并且是在内部组件中展示，那么除去这个 path 里边的 http 或者 https（对应菜单 3 的 children 的情况）。<br>c. 如果当前组件是一级菜单并且是 M 型并且不是外链，那么就在原有的 path 上加上 / 前缀（对应菜单 1 的一级菜单的 path 情况）。<br>d. 如果当前组件是一级菜单，且是 C 型菜单，那么设置 path 为 /（对应菜单 2、3 中一级菜单的 path 情况）。<br>e. 其他情况，菜单都是从数据库查到什么返回什么。</p><ol start="4"><li>接下来是设置前端 component，这个菜单项用哪个 component 组件显示出来。</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取组件信息</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menu 菜单信息</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 组件信息</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponent</span><span class="hljs-params">(SysMenu menu)</span> </span>&#123;</span><br><span class="line">    String component = UserConstants.LAYOUT;</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(menu.getComponent()) &amp;&amp; !isMenuFrame(menu)) &#123;</span><br><span class="line">        component = menu.getComponent();</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.isEmpty(menu.getComponent()) &amp;&amp; menu.getParentId().intValue() != <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">        component = UserConstants.INNER_LINK;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.isEmpty(menu.getComponent()) &amp;&amp; isParentView(menu)) &#123;</span><br><span class="line">        component = UserConstants.PARENT_VIEW;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a. 首先默认的组件是 Layout（菜单1、2、3、4 的一级菜单）。<br>b. 如果配置的时候就有 component，并且当前菜单项也不是外链，那么就使用配置的 component（菜单 1、2 的子菜单情况）。<br>c. 如果不是一级菜单（是一个子菜单），并且是一个在当前系统展示的外链，那么就使用 InnerLink 这个组件（这个组件中有一个 iframe 标签可以把外链展示出来，如菜单 4 的子菜单情况）。<br>d. 如果配置的时候没有设置组件并且菜单类型是 M（二级菜单中还有三级菜单的情况），那么就设置显示组件为 ParentView。</p><p>component 就分为这几种情况。</p><ol start="5"><li>接下来就是 query 和 meta 这两个参数就没啥好说的。</li></ol><p>接下来就是三个分支的情况了。</p><p>其他属性都比较容易，我就不啰嗦啦～</p><p>好啦，Vue3+Spring Boot 动态菜单管理，最近整了好几篇了，就先说这么多吧，小伙伴们有问题欢迎留言讨论！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 Spring Boot + Vue3 的动态菜单，松哥之前已经写了两篇文章了，这两篇文章主要是从代码上和大家分析动态菜单最终的实现方式，但是还是有小伙伴觉得没太看明白，感觉缺乏一个提纲挈领的思路，所以，今天松哥再整一篇文章和大家再来捋一捋这个问题，希望这篇文章能让小伙伴们彻底搞清楚这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>TienChin 项目动态菜单接口分析</title>
    <link href="http://www.javaboy.org/2022/0711/dynamic-menu.html"/>
    <id>http://www.javaboy.org/2022/0711/dynamic-menu.html</id>
    <published>2022-07-11T15:21:31.000Z</published>
    <updated>2022-07-19T15:48:31.552Z</updated>
    
    <content type="html"><![CDATA[<p>本文一定要结合<a href="https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg" target="_blank" rel="noopener">Vue 里，多级菜单要如何设计才显得专业？</a>一文一起食用效果良好，否则可能会看不懂。</p><a id="more"></a><p>做过 vhr 的小伙伴应该都知道动态菜单是咋回事，就是不同权限的用户登录成功之后，可以看到不同的菜单项，这在前后端不分的项目中，其实是很好实现的，然而在前后端分离项目中，实现起来略微有一些麻烦，不过不管怎么说，想要实现，总是有办法的，并且办法还不止一个！今天松哥就来和大家聊一聊 TienChin 项目中动态菜单的实现方案，一起来学习一个不同于 vhr 的动态菜单实现思路。</p><p>TienChin 项目基于 RuoYi-Vue 脚手架，所以接下来的分析也是在说 RuoYi-Vue 这个脚手架中动态菜单的实现方案。</p><h2 id="1-菜单表"><a href="#1-菜单表" class="headerlink" title="1. 菜单表"></a>1. 菜单表</h2><p>首先我们来看看菜单表的定义，也就是 <code>sys_menu</code>。</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`sys_menu`</span> (</span><br><span class="line">  <span class="hljs-string">`menu_id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单ID'</span>,</span><br><span class="line">  <span class="hljs-string">`menu_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单名称'</span>,</span><br><span class="line">  <span class="hljs-string">`parent_id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'父菜单ID'</span>,</span><br><span class="line">  <span class="hljs-string">`order_num`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'显示顺序'</span>,</span><br><span class="line">  <span class="hljs-string">`path`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'路由地址'</span>,</span><br><span class="line">  <span class="hljs-string">`component`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'组件路径'</span>,</span><br><span class="line">  <span class="hljs-string">`query`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'路由参数'</span>,</span><br><span class="line">  <span class="hljs-string">`is_frame`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'1'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否为外链（0是 1否）'</span>,</span><br><span class="line">  <span class="hljs-string">`is_cache`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否缓存（0缓存 1不缓存）'</span>,</span><br><span class="line">  <span class="hljs-string">`menu_type`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单类型（M目录 C菜单 F按钮）'</span>,</span><br><span class="line">  <span class="hljs-string">`visible`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单状态（0显示 1隐藏）'</span>,</span><br><span class="line">  <span class="hljs-string">`status`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单状态（0正常 1停用）'</span>,</span><br><span class="line">  <span class="hljs-string">`perms`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'权限标识'</span>,</span><br><span class="line">  <span class="hljs-string">`icon`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'#'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单图标'</span>,</span><br><span class="line">  <span class="hljs-string">`create_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建者'</span>,</span><br><span class="line">  <span class="hljs-string">`create_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建时间'</span>,</span><br><span class="line">  <span class="hljs-string">`update_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新者'</span>,</span><br><span class="line">  <span class="hljs-string">`update_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新时间'</span>,</span><br><span class="line">  <span class="hljs-string">`remark`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'备注'</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`menu_id`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">3054</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci <span class="hljs-keyword">COMMENT</span>=<span class="hljs-string">'菜单权限表'</span>;</span><br></pre></td></tr></table></figure><p>其实这里很多字段都和我们 vhr 项目项目很相似，我也就不重复啰嗦了，我这里主要和小伙伴们说一个字段，那就是 <code>menu_type</code>。</p><p><code>menu_type</code> 表示一个菜单字段的类型，一个菜单有三种类型，分别是目录（M）、菜单（C）以及按钮（F）。这里所说的目录，相当于我们在 vhr 中所说的一级菜单，菜单相当于我们在 vhr 中所说的二级菜单。</p><p>当用户从前端登录成功后，要去动态加载的菜单的时候，就查询 M 和 C 类型的数据即可，F 类型的数据不是菜单项，查询的时候直接过滤掉即可，通过 <code>menu_type</code> 这个字段可以轻松的过滤掉 F 类型的数据。小伙伴们想想，F 类型的数据过滤掉之后，剩下的数据不就是一级菜单和二级菜单了，那不就和 vhr 又一样了么！</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220626194444.png" alt></p><p>在 vhr 中，考虑到菜单就是只有两级：一级菜单和二级菜单，一级菜单是目录，二级菜单是则是具体的菜单项，没有三级菜单！所以在 vhr 中，查询菜单的时候我直接用了一个一对多的查询，将一级菜单做一的一方，二级菜单做多的一方，这样比较省事。当然灵活度差一点，所以在 TienChin 项目中，这块还是用上了递归。</p><h2 id="2-前端菜单展示"><a href="#2-前端菜单展示" class="headerlink" title="2. 前端菜单展示"></a>2. 前端菜单展示</h2><p>接下来，前端菜单展示分为了几种情况？这个松哥在之前的文章中已经和大家聊过了，具体可以参考<a href="https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg" target="_blank" rel="noopener">Vue 里，多级菜单要如何设计才显得专业？</a>一文，这里不再赘述。</p><h2 id="3-菜单接口"><a href="#3-菜单接口" class="headerlink" title="3. 菜单接口"></a>3. 菜单接口</h2><p>当用户登录成功之后，会自动请求 <code>/getRouters</code> 接口来获取菜单信息，我们一起来看下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取路由信息</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由信息</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"getRouters"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">getRouters</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    Long userId = SecurityUtils.getUserId();</span><br><span class="line">    List&lt;SysMenu&gt; menus = menuService.selectMenuTreeByUserId(userId);</span><br><span class="line">    <span class="hljs-keyword">return</span> AjaxResult.success(menuService.buildMenus(menus));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的查询实际上分为两个步骤：</p><ol><li>根据用户 id 查询到所有的菜单信息，这一步的查询实际上是比较容易的，就单纯的多张表联合在一起，然后过滤出和当前用户相关并且菜单类型为 M 或者 C 的菜单（类型为 F 的表示按钮，就不要了），查询到菜单信息之后，然后进行一个递归操作，将菜单数据的层级排列出来。</li><li><code>menuService.buildMenus</code> 这一步则是将菜单数据专为前端所需要的路由数据。</li></ol><p>一共就这两个步骤，我们来逐一进行分析。</p><p>先来看查询菜单数据。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 根据用户ID查询菜单</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId 用户名称</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 菜单列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SysMenu&gt; <span class="hljs-title">selectMenuTreeByUserId</span><span class="hljs-params">(Long userId)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; menus = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (SecurityUtils.isAdmin(userId)) &#123;</span><br><span class="line">        menus = menuMapper.selectMenuTreeAll();</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        menus = menuMapper.selectMenuTreeByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> getChildPerms(menus, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 根据父节点的ID获取所有子节点</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list     分类表</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parentId 传入的父节点ID</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> String</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SysMenu&gt; <span class="hljs-title">getChildPerms</span><span class="hljs-params">(List&lt;SysMenu&gt; list, <span class="hljs-keyword">int</span> parentId)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; returnList = <span class="hljs-keyword">new</span> ArrayList&lt;SysMenu&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (Iterator&lt;SysMenu&gt; iterator = list.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">        SysMenu t = (SysMenu) iterator.next();</span><br><span class="line">        <span class="hljs-comment">// 一、根据传入的某个父节点ID,遍历该父节点的所有子节点</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (t.getParentId() == parentId) &#123;</span><br><span class="line">            recursionFn(list, t);</span><br><span class="line">            returnList.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> returnList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 递归列表</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> t</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">recursionFn</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 得到子节点列表</span></span><br><span class="line">    List&lt;SysMenu&gt; childList = getChildList(list, t);</span><br><span class="line">    t.setChildren(childList);</span><br><span class="line">    <span class="hljs-keyword">for</span> (SysMenu tChild : childList) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (hasChild(list, tChild)) &#123;</span><br><span class="line">            recursionFn(list, tChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 得到子节点列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;SysMenu&gt; <span class="hljs-title">getChildList</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    List&lt;SysMenu&gt; tlist = <span class="hljs-keyword">new</span> ArrayList&lt;SysMenu&gt;();</span><br><span class="line">    Iterator&lt;SysMenu&gt; it = list.iterator();</span><br><span class="line">    <span class="hljs-keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        SysMenu n = (SysMenu) it.next();</span><br><span class="line">        <span class="hljs-keyword">if</span> (n.getParentId().longValue() == t.getMenuId().longValue()) &#123;</span><br><span class="line">            tlist.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> tlist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 判断是否有子节点</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasChild</span><span class="hljs-params">(List&lt;SysMenu&gt; list, SysMenu t)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> getChildList(list, t).size() &gt; <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里一共涉及到五个关键方法，我们来逐一进行分析：</p><ol><li>selectMenuTreeByUserId：这个方法的执行比较容易，如果当前用户是管理员，那就不用加过滤条件了，直接查询出所有的类型为 M 和 C 的菜单项即可。</li><li>getChildPerms：这个方法主要是将前面查询出来的菜单数据进行重组，本来都是一个集合中的数据，现在在该方法中处理成树状，处理的核心逻辑就是调用 recursionFn 方法将之进行递归。</li><li>recursionFn：这是最为关键的递归方法了，首先调用 getChildList 获取当前菜单项的 children，然后将获取到的 children 设置给当前菜单项，最后还要遍历获取到的 children，如果这个 children 也是有子菜单的，则继续调用 recursionFn 方法进行处理。</li><li>getChildList：这个是查询某一个菜单的子菜单，这个很容易，如果某一个菜单的 parentId 是当前菜单的 id，那么这个菜单就是当前菜单的子菜单。</li><li>hasChild：这个是判断给定的菜单是否有子菜单，这个逻辑就比较简单了。</li></ol><p>好啦，这个就是整个的查询逻辑，整体上来说是比较容易的，就是查询 M 和 C 类型的菜单，然后再做一个递归操作，将菜单数据变成一个树状数据。</p><p>但是因为 SysMenu 和前后端所需要的路由数据的字段名称对不上，并且格式参数等都不符合前端的要求，所以还需要再做一个转换，这就是 <code>menuService.buildMenus</code> 所做的事情了，在分析 <code>menuService.buildMenus</code> 方法之前，我觉得大家有必要先来回顾一下<a href="https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg" target="_blank" rel="noopener">Vue 里，多级菜单要如何设计才显得专业？</a>一文，再来捋一捋菜单的四种情况，我们先来回顾下四种菜单格式：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"/monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"redirect"</span>: <span class="hljs-string">"noRedirect"</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line"><span class="hljs-attr">"alwaysShow"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"系统监控"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"monitor"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="hljs-attr">"children"</span>: [&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Online"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"online"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"monitor/online/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"在线用户"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"online"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Job"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"job"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"monitor/job/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"定时任务"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"job"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"/"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line"><span class="hljs-attr">"children"</span>: [&#123;</span><br><span class="line"><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Role"</span>,</span><br><span class="line"><span class="hljs-attr">"path"</span>: <span class="hljs-string">"role"</span>,</span><br><span class="line"><span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"component"</span>: <span class="hljs-string">"system/role/index"</span>,</span><br><span class="line"><span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-attr">"title"</span>: <span class="hljs-string">"角色管理"</span>,</span><br><span class="line"><span class="hljs-attr">"icon"</span>: <span class="hljs-string">"peoples"</span>,</span><br><span class="line"><span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"path"</span>: <span class="hljs-string">"http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line">    <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">        <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">        <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-attr">"link"</span>: <span class="hljs-string">"http://www.javaboy.org"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/"</span>,</span><br><span class="line">    <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line">    <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">        <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">        <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-attr">"children"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Www.javaboy.org"</span>,</span><br><span class="line">            <span class="hljs-attr">"path"</span>: <span class="hljs-string">"www.javaboy.org"</span>,</span><br><span class="line">            <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">            <span class="hljs-attr">"component"</span>: <span class="hljs-string">"InnerLink"</span>,</span><br><span class="line">            <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">                <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">                <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">                <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">                <span class="hljs-attr">"link"</span>: <span class="hljs-string">"http://www.javaboy.org"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>这四种菜单 JSON，从上往下显示效果依次是：</p><ol><li>一级菜单中有二级菜单，一级菜单不可点击，二级菜单点击后在右边打开相应的页面。</li><li>只有一个一级菜单，点击之后，右边打开相应的页面。</li><li>一个外链（只有一级菜单），点击之后，在新的选项卡中打开新的页面。</li><li>一个外链（只有一级菜单），点击之后，在当前系统中打开新的页面（第三方页面通过 iframe 标签出现在当前系统中）。</li></ol><p>牢记这四种不同的菜单情况，再来看 <code>buildMenus</code> 方法，就会容易很多了（下文我说菜单 1、2、3、4 分别对应上面的四种情况）：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 构建前端路由所需要的菜单</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menus 菜单列表</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由列表</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;RouterVo&gt; <span class="hljs-title">buildMenus</span><span class="hljs-params">(List&lt;SysMenu&gt; menus)</span> </span>&#123;</span><br><span class="line">    List&lt;RouterVo&gt; routers = <span class="hljs-keyword">new</span> LinkedList&lt;RouterVo&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (SysMenu menu : menus) &#123;</span><br><span class="line">        RouterVo router = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">        router.setHidden(<span class="hljs-string">"1"</span>.equals(menu.getVisible()));</span><br><span class="line">        router.setName(getRouteName(menu));</span><br><span class="line">        router.setPath(getRouterPath(menu));</span><br><span class="line">        router.setComponent(getComponent(menu));</span><br><span class="line">        router.setQuery(menu.getQuery());</span><br><span class="line">        router.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), StringUtils.equals(<span class="hljs-string">"1"</span>, menu.getIsCache()), menu.getPath()));</span><br><span class="line">        List&lt;SysMenu&gt; cMenus = menu.getChildren();</span><br><span class="line">        <span class="hljs-keyword">if</span> (!cMenus.isEmpty() &amp;&amp; cMenus.size() &gt; <span class="hljs-number">0</span> &amp;&amp; UserConstants.TYPE_DIR.equals(menu.getMenuType())) &#123;</span><br><span class="line">            router.setAlwaysShow(<span class="hljs-keyword">true</span>);</span><br><span class="line">            router.setRedirect(<span class="hljs-string">"noRedirect"</span>);</span><br><span class="line">            router.setChildren(buildMenus(cMenus));</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMenuFrame(menu)) &#123;</span><br><span class="line">            router.setMeta(<span class="hljs-keyword">null</span>);</span><br><span class="line">            List&lt;RouterVo&gt; childrenList = <span class="hljs-keyword">new</span> ArrayList&lt;RouterVo&gt;();</span><br><span class="line">            RouterVo children = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">            children.setPath(menu.getPath());</span><br><span class="line">            children.setComponent(menu.getComponent());</span><br><span class="line">            children.setName(StringUtils.capitalize(menu.getPath()));</span><br><span class="line">            children.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), StringUtils.equals(<span class="hljs-string">"1"</span>, menu.getIsCache()), menu.getPath()));</span><br><span class="line">            children.setQuery(menu.getQuery());</span><br><span class="line">            childrenList.add(children);</span><br><span class="line">            router.setChildren(childrenList);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (menu.getParentId().intValue() == <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">            router.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon()));</span><br><span class="line">            router.setPath(<span class="hljs-string">"/"</span>);</span><br><span class="line">            List&lt;RouterVo&gt; childrenList = <span class="hljs-keyword">new</span> ArrayList&lt;RouterVo&gt;();</span><br><span class="line">            RouterVo children = <span class="hljs-keyword">new</span> RouterVo();</span><br><span class="line">            String routerPath = innerLinkReplaceEach(menu.getPath());</span><br><span class="line">            children.setPath(routerPath);</span><br><span class="line">            children.setComponent(UserConstants.INNER_LINK);</span><br><span class="line">            children.setName(StringUtils.capitalize(routerPath));</span><br><span class="line">            children.setMeta(<span class="hljs-keyword">new</span> MetaVo(menu.getMenuName(), menu.getIcon(), menu.getPath()));</span><br><span class="line">            childrenList.add(children);</span><br><span class="line">            router.setChildren(childrenList);</span><br><span class="line">        &#125;</span><br><span class="line">        routers.add(router);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> routers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法一个核心思想就是格式转换，其他的都没啥，不过看似简单的逻辑里边，其实也隐藏了很多实现细节。</p><p>这个方法细看的话，会有很多地方感觉比较绕。但是，小伙伴们仔细回顾一下<a href="https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg" target="_blank" rel="noopener">Vue 里，多级菜单要如何设计才显得专业？</a>一文，在该文章中，松哥将前端展示出来的菜单分为了四种情况，根据那四种显示的情况，再来看这里的数据组装逻辑，就很好懂了。</p><p>首先我们来看 router 基本属性的设置：</p><ol><li>首先是可见性 hidden，这个没啥好说的。</li><li>接下来是菜单的 name 属性，name 属性分为了两种情况：路由的 name 属性是菜单表中的 path 字段值且首字母大写（菜单 1、3、4）；如果在一级菜单中，出现了一个菜单 C（本来这一级别只有 M），并且还不是外链，那么就设置菜单的 name 为空字符串（相当于此时不需要 name 属性了，对应菜单 2 的情况）。</li><li>接下来是路由的 path，设置 path 的时候也分好种情况，松哥对照着代码来和大家说一下：</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取路由地址</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menu 菜单信息</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 路由地址</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRouterPath</span><span class="hljs-params">(SysMenu menu)</span> </span>&#123;</span><br><span class="line">    String routerPath = menu.getPath();</span><br><span class="line">    <span class="hljs-comment">// 内链打开外网方式</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (menu.getParentId().intValue() != <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">        routerPath = innerLinkReplaceEach(routerPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 非外链并且是一级目录（类型为目录）</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == menu.getParentId().intValue() &amp;&amp; UserConstants.TYPE_DIR.equals(menu.getMenuType())</span><br><span class="line">            &amp;&amp; UserConstants.NO_FRAME.equals(menu.getIsFrame())) &#123;</span><br><span class="line">        routerPath = <span class="hljs-string">"/"</span> + menu.getPath();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 非外链并且是一级目录（类型为菜单）</span></span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isMenuFrame(menu)) &#123;</span><br><span class="line">        routerPath = <span class="hljs-string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> routerPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a. 首先获取从数据库中查询到的 path 属性。<br>b. 如果当前组件不是一级菜单，并且是在内部组件中展示，那么除去这个 path 里边的 http 或者 https（对应菜单 4 的 children 的情况）。<br>c. 如果当前组件是一级菜单并且是 M 型并且不是外链，那么就在原有的 path 上加上 / 前缀（对应菜单 1 的一级菜单的 path 情况）。<br>d. 如果当前组件是一级菜单，且是 C 型菜单，那么设置 path 为 /（对应菜单 2、4 中一级菜单的 path 情况）。<br>e. 其他情况，菜单都是从数据库查到什么返回什么。</p><ol start="4"><li>接下来是设置前端 component，这个菜单项用哪个 component 组件显示出来。</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 获取组件信息</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> menu 菜单信息</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 组件信息</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getComponent</span><span class="hljs-params">(SysMenu menu)</span> </span>&#123;</span><br><span class="line">    String component = UserConstants.LAYOUT;</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(menu.getComponent()) &amp;&amp; !isMenuFrame(menu)) &#123;</span><br><span class="line">        component = menu.getComponent();</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.isEmpty(menu.getComponent()) &amp;&amp; menu.getParentId().intValue() != <span class="hljs-number">0</span> &amp;&amp; isInnerLink(menu)) &#123;</span><br><span class="line">        component = UserConstants.INNER_LINK;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.isEmpty(menu.getComponent()) &amp;&amp; isParentView(menu)) &#123;</span><br><span class="line">        component = UserConstants.PARENT_VIEW;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a. 首先默认的组件是 Layout（菜单1、2、3、4 的一级菜单）。<br>b. 如果配置的时候就有 component，并且当前菜单项也不是外链，那么就使用配置的 component（菜单 1、2 的子菜单情况）。<br>c. 如果不是一级菜单（是一个子菜单），并且是一个在当前系统展示的外链，那么就使用 InnerLink 这个组件（这个组件中有一个 iframe 标签可以把外链展示出来，如菜单 4 的子菜单情况）。<br>d. 如果配置的时候没有设置组件并且菜单类型是 M（二级菜单中还有三级菜单的情况），那么就设置显示组件为 ParentView。</p><p>component 就分为这几种情况。</p><ol start="5"><li>接下来就是 query 和 meta 这两个参数就没啥好说的。</li></ol><p>接下来就是三个分支的情况了。</p><ol start="6"><li>首先第一个 if，处理的就是常规情况，一级菜单中有二级菜单的情况（对应菜单 1 的一级菜单情况）。</li><li>第二个分支处理一级 C 型菜单是非外链的情况（对应菜单 2 的情况），此时自动给该菜单项加上一个 children。</li><li>第三个分支是处理一级 M 型菜单是外链的情况（对应菜单 4 的情况），此时自动给该菜单加上一个 children。</li><li>如果三个分支都不进去，实际上就是菜单 3 的情况了。</li></ol><p>好啦，这就是菜单接口分析的全部内容了，有点绕，后面松哥再整几集视频和大家详细分析，对视频感兴趣的小伙伴戳这里：<a href="https://mp.weixin.qq.com/s/Qzj-tCYBB6QsviqF9H56rg" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文一定要结合&lt;a href=&quot;https://mp.weixin.qq.com/s/tpRNztI-sNadV64t7T50eg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue 里，多级菜单要如何设计才显得专业？&lt;/a&gt;一文一起食用效果良好，否则可能会看不懂。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>Spring 事务失效了，怎么办？</title>
    <link href="http://www.javaboy.org/2022/0705/spring-transaction.html"/>
    <id>http://www.javaboy.org/2022/0705/spring-transaction.html</id>
    <published>2022-07-05T15:21:07.000Z</published>
    <updated>2022-07-19T15:48:04.008Z</updated>
    
    <content type="html"><![CDATA[<p>这是小伙伴们在微信上问的一个问题：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220702180737.png" alt></p><a id="more"></a><p>这个问题比较典型，让我想到面试时有一个 Spring 事务失效的问题，跟这个原因以及解决方案是一模一样的，因此，抽空整篇文章和小伙伴们分享下。</p><h2 id="1-AOP-的原理"><a href="#1-AOP-的原理" class="headerlink" title="1. AOP 的原理"></a>1. AOP 的原理</h2><p>小伙伴们知道，AOP 底层就是动态代理，动态代理有两种实现方式：</p><ul><li>JDK 动态代理：利用拦截器（必须实现 InvocationHandler）加上反射机制生成一个代理接口的匿名类，在调用具体方法前调用 InvokeHandler 来处理。举个例子，假设有一个接口 A，A 有一个实现类 B，现在要给 B 生成代理对象，那么实际上是给 A 接口自动生成了一个匿名实现类，并且在这个匿名实现类中调用到 B 中的方法。</li><li>CGLIB 动态代理：利用 ASM 框架，对代理对象类生成的 class 文件加载进来，通过修改其字节码生成子类来处理。举个例子，现在有一个类 A，A 没有接口，现在想给 A 生成一个代理对象，那么实际上是自动给 A 生成了一个子类，在这个子类中覆盖了 A 中的方法，<strong>所以，小伙伴们要注意，A 类以及它里边的方法不能是 final 类型的，否则无法生成代理</strong>。</li></ul><p>如果被代理的对象有接口，则可以使用 JDK 动态代理，没有接口就可以使用 CGLIB 动态代理。</p><p>在 Spring 中，默认情况下，如果被代理的对象有接口，就使用 JDK 动态代理，如果被代理的对象没有接口，则使用 CGLIB 动态代理。</p><p>在 Spring Boot 中，2.0 之前也跟 Spring 中的规则一样，2.0 之后则统一都使用 CGLIB 动态代理。</p><p>不过这些都是默认的规则，如果有接口，但是你又希望使用 CGLIB 动态代理，通过修改配置，也都是可以实现的：</p><p>如果是 XML 配置，想使用 CGLIB 动态代理，可以按如下方式实现：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">"true"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pc1"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"。。。"</span>/&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"logAdvice"</span>&gt;</span></span><br><span class="line">        。。。</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是 Java 配置，想使用 CGLIB 动态代理，可以按如下方式实现：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-meta">@Aspect</span></span><br><span class="line"><span class="hljs-meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="hljs-keyword">true</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogAspect</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，在新版 Spring Boot 项目中，有接口的类默认就是使用 CGLIB 动态代理的。但是此时如果有接口的类你又想使用 JDK 动态代理，那么可以通过如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.aop.proxy-target-class=false</span><br></pre></td></tr></table></figure><p>关于 Spring Boot 中的 AOP 代理问题，可以参考去年松哥写的文章：<a href="https://mp.weixin.qq.com/s/V3bJGgjP2OZDmngtAuM8aw" target="_blank" rel="noopener"><br>Spring Boot 中的 AOP，到底是 JDK 动态代理还是 Cglib 动态代理？</a>。</p><h2 id="2-实际用的类"><a href="#2-实际用的类" class="headerlink" title="2. 实际用的类"></a>2. 实际用的类</h2><p>基于第一小节的讲解，小伙伴们知道，当你在项目中用到了 AOP 之后，其实你所以见到的类，并不是原本的类了。</p><p>松哥前面写了好几篇 AOP 相关的文章，如下：</p><ul><li><a href="https://mp.weixin.qq.com/s/g71F3cnLtD4zqJGFCeJckQ" target="_blank" rel="noopener">手把手教你玩多数据源动态切换！</a></li><li><a href="https://mp.weixin.qq.com/s/rzz2tgBBJpWz7gjmEfz2XQ" target="_blank" rel="noopener">Redis 做接口限流，一个注解的事！</a></li><li><a href="https://mp.weixin.qq.com/s/qSXS401IX2libPKVVVuChQ" target="_blank" rel="noopener">处理接口幂等性的两种常见方案|手把手教你</a></li><li><a href="https://mp.weixin.qq.com/s/_dsdL5hDjd3CMxuWfWJ8Fg" target="_blank" rel="noopener">数据权限，一个注解搞定！</a></li></ul><p>虽然是解决不同的问题，但是有一个共同的点，那就是都是通过自定义注解+ AOP 解决问题的。</p><p>现在我就以<a href="https://mp.weixin.qq.com/s/g71F3cnLtD4zqJGFCeJckQ" target="_blank" rel="noopener">手把手教你玩多数据源动态切换！</a>为例，来和大家说说这里的动态代理到底是咋回事，没看过这篇文章的小伙伴可以先看下。</p><p>小伙伴们看下，我的 UserService 大致上是下面这样：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@DS</span>(<span class="hljs-string">"master"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> userMapper.getCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小伙伴们看到，count() 方法上加了 @DS 注解，所以这个 count() 方法将来是要被自动代理的。换言之，当你在另外一个类中注入 UserService 的时候，其实不是这个 UserService，我 DEBUG 小伙伴们来看一下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220702184820.png" alt></p><p>小伙伴们从图中可以看到，此时我注入的 UserService 并不是真正的 UserService，而是一个通过 CGLIB 动态代理为 UserService 生成的子类，这个子类里边的 count 方法大致逻辑类似下面这样（其实就是 AOP 中的代码，具体小伙伴们可以参考 <a href="https://mp.weixin.qq.com/s/g71F3cnLtD4zqJGFCeJckQ" target="_blank" rel="noopener">手把手教你玩多数据源动态切换！</a>一文）：</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 切换数据源</span><br><span class="line"># 去数据库查询 count</span><br><span class="line"># 清空 ThreadLocal 中的变量</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>但是，如果我的调用逻辑是这样呢：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">count2</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@DS</span>(<span class="hljs-string">"master"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> userMapper.getCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小伙伴们来看，count2 方法，这个时候直接在 count2 方法中调用了 count 方法，当然，count2() 方法中的调用也可以写作 <code>this.count();</code>，这样看起来就更明确了，我们调用 count 方法，使用的是当前对象，而当前对象是不包含代理对象中的代码的，我们通过 DEBUG 来看下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220702222216.png" alt></p><p>所以，当我们在 count2 中直接调用 count 方法的时候，那么加在 count 方法上的注解就会失效。</p><h2 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3. 问题解决"></a>3. 问题解决</h2><p>这个问题存在于所有使用了 AOP 的地方，存在的原因第二小节已经分析的很清楚了。</p><p>解决办法其实也有很多种，最为简单省事的一种，就是在当前类中注入代理对象，然后通过代理对象去调用其他方法，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">count2</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> userService.count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Transactional</span></span><br><span class="line">    <span class="hljs-meta">@DS</span>(<span class="hljs-string">"master"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> userMapper.getCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.itboyhub.com/2021/10/tran/20220702222746.png" alt></p><p>虽然问题解决了，不过这毕竟不是一个好的解决办法（因为自己中注入自己，在新版 Spring Boot 中要开启循环依赖才能实现），大家在实际开发中，还是要从设计上尽量避免这种问题。</p><p>好啦，这个问题搞明白了，那么事务失效这个问题，也不用我多说了吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是小伙伴们在微信上问的一个问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.itboyhub.com/2021/10/tran/20220702180737.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>如何在 TienChin 项目中自定义权限表达式</title>
    <link href="http://www.javaboy.org/2022/0704/custom-permission-expression.html"/>
    <id>http://www.javaboy.org/2022/0704/custom-permission-expression.html</id>
    <published>2022-07-04T15:20:55.000Z</published>
    <updated>2022-07-19T15:50:20.585Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">前面的文章</a>中，松哥已经和小伙伴们聊了 Spring Security 中的权限表达式了，还没看过的小伙伴们可以先看下，本文将在前文的基础上继续完善：</p><a id="more"></a><ul><li><a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">Spring Security 中，想在权限中使用通配符，怎么做？</a></li></ul><h2 id="1-SpEL-回顾"><a href="#1-SpEL-回顾" class="headerlink" title="1. SpEL 回顾"></a>1. SpEL 回顾</h2><p>经过<a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">上篇文章</a>的学习，小伙伴们已经知道了，在 Spring Security 中，@PreAuthorize、@PostAuthorize 等注解都是支持 SpEL 表达式的。</p><p>在 SpEL 表达式中，如果上来就直接写要执行的方法名，那么就说明这个方法是 RootObject 对象中的方法，如果要执行其他对象的方法，那么还需要写上对象的名字，例如如下两个例子：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"hasAuthority('system:user:add')"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子中，表达式中的方法是 hasAuthority，没有写对象名，那么就说明这个方法是 SpEL 中 RootObject 对象中的方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('monitor:operlog:list')"</span>)</span><br><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/list"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title">list</span><span class="hljs-params">(SysOperLog operLog)</span> </span>&#123;</span><br><span class="line">    startPage();</span><br><span class="line">    List&lt;SysOperLog&gt; list = operLogService.selectOperLogList(operLog);</span><br><span class="line">    <span class="hljs-keyword">return</span> getDataTable(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子中，权限注解中的表达式方法是 <a href="mailto:`@ss.hasPermi" target="_blank" rel="noopener">`@ss.hasPermi</a>(‘monitor:operlog:list’)`，其中 ss 是指 Spring 容器中的一个对象名，hasPermi 则是这个对象中的方法。</p><p>好啦，经过<a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">前面文章</a>的学习，这些基本知识大家都已经掌握了。</p><h2 id="2-如何自定义"><a href="#2-如何自定义" class="headerlink" title="2. 如何自定义"></a>2. 如何自定义</h2><p>其实上面给出来的第二个例子就是一个自定义的例子。</p><p>不过，这种自定义方式太自由了，自由到没有在 Spring Security 架构内完成这件事。所以，今天我想和小伙伴们聊一聊，如何在不使用第三方对象的情况下，来自定义一个权限判断的表达式。</p><p>首先小伙伴们知道，我们在 @PreAuthorize 注解中使用的不用加对象名就能调用的权限方法，如 <code>hasAuthority</code>、<code>hasPermission</code>、<code>hasRole</code>、<code>hasAnyRole</code> 等，基本上都是由 SecurityExpressionRoot 及其子类提供的，准确来说是由 MethodSecurityExpressionRoot 类提供的。</p><p>MethodSecurityExpressionRoot 类实际上继承自 SecurityExpressionRoot，只不过增加了过滤对象以及返回值对象。我们来看下 MethodSecurityExpressionRoot 的方法摘要：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220702110528.png" alt></p><p>再来看看 SecurityExpressionRoot 中的方法：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220702110613.png" alt></p><p>这些就是 RootObject 对象中的所有方法了，也是我们能够在 @PreAuthorize 注解中使用的所有方法了。</p><p>那么现在想在已有方法上继续扩展新方法，那么我们可以通过自定义类继承自 SecurityExpressionRoot 对象，扩展这个 RootObject 对象，在该对象中继续添加新的方法，进而实现自定义权限表达式。</p><p>好啦，说干就干，开搞！</p><p>本文的案例在<a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">前文</a>的基础上继续完成，所以这里我就不从头开始写了。</p><h2 id="3-自定义-ExpressionRoot"><a href="#3-自定义-ExpressionRoot" class="headerlink" title="3. 自定义 ExpressionRoot"></a>3. 自定义 ExpressionRoot</h2><p>首先我们自定义一个类继承自 SecurityExpressionRoot 并实现 MethodSecurityExpressionOperations 接口（本来直接继承自 MethodSecurityExpressionRoot 即可，但是因为这个类不是 public 的，没法继承，所以我们就实现 MethodSecurityExpressionOperations 接口即可）：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomSecurityExpressionRoot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SecurityExpressionRoot</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodSecurityExpressionOperations</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> Object filterObject;</span><br><span class="line">    <span class="hljs-keyword">private</span> Object returnObject;</span><br><span class="line">    <span class="hljs-keyword">private</span> AntPathMatcher antPathMatcher = <span class="hljs-keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * Creates a new instance</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> authentication the &#123;<span class="hljs-doctag">@link</span> Authentication&#125; to use. Cannot be null.</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CustomSecurityExpressionRoot</span><span class="hljs-params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(authentication);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 判断当前对象是否具备某一个权限</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> permission</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermission</span><span class="hljs-params">(String permission)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//获取当前登录用户所具有的权限</span></span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">        <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (antPathMatcher.match(authority.getAuthority(), permission)) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 是否具备多个权限中的任意一个权限</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> permissions</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasAnyPermissions</span><span class="hljs-params">(String... permissions)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (permissions == <span class="hljs-keyword">null</span> || permissions.length == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">        <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (String permission : permissions) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (antPathMatcher.match(authority.getAuthority(), permission)) &#123;</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> hasAllPermissions：(String... permissions) &#123;</span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">        <span class="hljs-keyword">if</span> (permissions == <span class="hljs-keyword">null</span> || permissions.length == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span> (String permission : permissions) &#123;</span><br><span class="line">            <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (antPathMatcher.match(authority.getAuthority(), permission)) &#123;</span><br><span class="line">                    flag = <span class="hljs-keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFilterObject</span><span class="hljs-params">(Object filterObject)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.filterObject = filterObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getFilterObject</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> filterObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setReturnObject</span><span class="hljs-params">(Object returnObject)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.returnObject = returnObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getReturnObject</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> returnObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getThis</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加了 @Override 注解的方法，都是普普通通的常规方法，没啥好说的。我们自己主要实现了三个方法，分别是：</p><ul><li>hasPermission：判断当前用户是否具备某一个给定的权限。</li><li>hasAnyPermissions：判断当前用户是否具备给定的多个权限中的某一个。</li><li>hasAllPermissions：判断当前用户是否具备所有的给定的权限。</li></ul><p>这里边的逻辑我就不啰嗦了，都是基本的 Java 语法而已。</p><p>另外，用 AntPathMatcher 做比对是为了支持通配符，这个在<a href="https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw" target="_blank" rel="noopener">上篇文章</a>中已经说过了，这里不再赘述。</p><p>Spring Security 中，MethodSecurityExpressionRoot 的配置是通过 DefaultMethodSecurityExpressionHandler 来完成的，现在我们自定义了 CustomSecurityExpressionRoot，那也得有一个 Handler 来配置 CustomSecurityExpressionRoot，所以，再来一个类继承自 DefaultMethodSecurityExpressionHandler，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomMethodSecurityExpressionHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultMethodSecurityExpressionHandler</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> MethodSecurityExpressionOperations <span class="hljs-title">createSecurityExpressionRoot</span><span class="hljs-params">(Authentication authentication, MethodInvocation invocation)</span> </span>&#123;</span><br><span class="line">        CustomSecurityExpressionRoot root = <span class="hljs-keyword">new</span> CustomSecurityExpressionRoot(authentication);</span><br><span class="line">        root.setTrustResolver(getTrustResolver());</span><br><span class="line">        root.setPermissionEvaluator(getPermissionEvaluator());</span><br><span class="line">        root.setRoleHierarchy(getRoleHierarchy());</span><br><span class="line">        <span class="hljs-keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 createSecurityExpressionRoot 方法中创建一个 CustomSecurityExpressionRoot 对象，对象的 TrustResolver、权限评估器以及角色层级等，统统都用默认的方案即可。</p><p>配置完成后，再配置一下 CustomMethodSecurityExpressionHandler 这个 Bean 即可，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-function">CustomMethodSecurityExpressionHandler <span class="hljs-title">customMethodSecurityExpressionHandler</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CustomMethodSecurityExpressionHandler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好啦，这就注入成功了。</p><p>接下来，我们就可以在权限注解中使用这个自定义的方法了：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"hasPermission('system:user:add')"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个自定义权限表达式的思路，说到底还是在 Spring Security 体系中玩，个人感觉这种方式更合理一些。</p><p>在 TienChin 项目中，松哥也将按照这种思路去改造 RuoYi-Vue 脚手架。届时在 TienChin 项目视频中，我再和大伙细聊，对视频感兴趣的小伙伴，戳这里：<a href="https://mp.weixin.qq.com/s/Qzj-tCYBB6QsviqF9H56rg" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://mp.weixin.qq.com/s/2Ci_Xg8wTrRcEnjgt18CDw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前面的文章&lt;/a&gt;中，松哥已经和小伙伴们聊了 Spring Security 中的权限表达式了，还没看过的小伙伴们可以先看下，本文将在前文的基础上继续完善：&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>一个月过去了，TienChin 项目视频进度怎么样了呢？给大家汇报下！</title>
    <link href="http://www.javaboy.org/2022/0630/tienchin-video.html"/>
    <id>http://www.javaboy.org/2022/0630/tienchin-video.html</id>
    <published>2022-06-30T15:20:36.000Z</published>
    <updated>2022-07-19T15:50:17.604Z</updated>
    
    <content type="html"><![CDATA[<p>距离上次跟小伙伴们汇报 TienChin 项目视频进度已经过去一个月啦，今天是 6 月 30 号，再来汇报一下这个月视频的进展。</p><a id="more"></a><p>其实也没啥好说的，直接上目录吧！</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">├── 000.开篇.mp4</span><br><span class="line">├── 001.运行RuoYi-Vue.mp4</span><br><span class="line">├── 002.代码格式化.mp4</span><br><span class="line">├── 003.项目结构大改造.mp4</span><br><span class="line">├── 004.项目改造完善.mp4</span><br><span class="line">├── 005.项目结构分析.mp4</span><br><span class="line">├── 006.验证码响应结果分析.mp4</span><br><span class="line">├── 007.验证码生成接口分析.mp4</span><br><span class="line">├── 008.验证码配置分析.mp4</span><br><span class="line">├── 009.验证码的校验.mp4</span><br><span class="line">├── 010.登录流程分析.mp4</span><br><span class="line">├── 011.登录JWT校验.mp4</span><br><span class="line">├── 012.SpringSecurity登录配置分析.mp4</span><br><span class="line">├── 013.自定义多数据源思路分析.mp4</span><br><span class="line">├── 014.自定义多数据源-1.mp4</span><br><span class="line">├── 015.自定义多数据源-2.mp4</span><br><span class="line">├── 016.手动实现网页上切换数据源.mp4</span><br><span class="line">├── 017.RateLimiter注解简介.mp4</span><br><span class="line">├── 018.自定义限流注解-1.mp4</span><br><span class="line">├── 019.自定义限流注解-2.mp4</span><br><span class="line">├── 020.RuoYi脚手架限流注解分析.mp4</span><br><span class="line">├── 021.幂等性实现的6中思路梳理.mp4</span><br><span class="line">├── 022.实现JSON格式参数多次读取.mp4</span><br><span class="line">├── 023.防止请求重复提交.mp4</span><br><span class="line">├── 024.防止接口重复提交注解分析.mp4</span><br><span class="line">├── 025.数据权限注解介绍.mp4</span><br><span class="line">├── 026.数据权限案例准备工作.mp4</span><br><span class="line">├── 027.权限注解实现思路分析.mp4</span><br><span class="line">├── 028.自定义数据权限注解@DataScope.mp4</span><br><span class="line">├── 029.数据权限过滤角色数据.mp4</span><br><span class="line">├── 030.数据权限过滤用户数据.mp4</span><br><span class="line">├── 031.数据权限注解总结.mp4</span><br><span class="line">├── 032.操作日志记录.mp4</span><br><span class="line">├── 033.修改日志方法名称.mp4</span><br><span class="line">├── 034.理解Aware接口.mp4</span><br><span class="line">├── 035.自定义注解+AOP整理.mp4</span><br><span class="line">├── 036.TienChin细化到按钮的权限实现思路.mp4</span><br><span class="line">├── 037.理解TienChin项目中的权限注解.mp4</span><br><span class="line">├── 038.角色和权限概念梳理.mp4</span><br><span class="line">├── 039.Spring Security中角色和权限的区别.mp4</span><br><span class="line">├── 040.SpringSecurity中的权限处理逻辑.mp4</span><br><span class="line">├── 041.SpringSecurity中使用权限通配符.mp4</span><br><span class="line">├── 042.SpringSecurity另一种权限判断方式.mp4</span><br><span class="line">├── 043.使用POSTMAN测试项目接口.mp4</span><br><span class="line">├── 【号外001】.登录流程解析.mp4</span><br><span class="line">├── 【号外002】.分布式事务开篇.mp4</span><br><span class="line">├── 【号外003】.分布式事务seata三个核心概念.mp4</span><br><span class="line">├── 【号外004】.分布式事务seata四种事务模式.mp4</span><br><span class="line">├── 【号外005】.分布式事务seata中的at模式.mp4</span><br><span class="line">├── 【号外006】.分布式事务安装seata-server.mp4</span><br><span class="line">├── 【号外007】.分布式事务seata-at模式实战.mp4</span><br><span class="line">├── 【号外008】.分布式事务seata-at模式总结.mp4</span><br><span class="line">├── 【号外009】.多数据源如何处理事务问题.mp4</span><br><span class="line">├── 【号外010】.分布式事务seata-at模式补充.mp4</span><br><span class="line">├── 【号外011】.分布式事务seata-tcc模式简介.mp4</span><br><span class="line">├── 【号外012】.分布式事务seata-tcc模式实战-1.mp4</span><br><span class="line">├── 【号外013】.分布式事务seata-tcc模式实战-2.mp4</span><br><span class="line">├── 【号外014】.分布式事务seata-tcc模式实战-3.mp4</span><br><span class="line">├── 【号外015】.分布式事务seata-tcc模式实战-4.mp4</span><br><span class="line">├── 【号外016】.分布式事务seata-tcc总结.mp4</span><br><span class="line">├── 【号外017】.分布式事务seata-xa简介.mp4</span><br><span class="line">├── 【号外018】.MySQL中的XA事务实践.mp4</span><br><span class="line">├── 【号外019】.分布式事务seata-xa模式实战-1.mp4</span><br><span class="line">├── 【号外020】.分布式事务seata-xa模式实战-2.mp4</span><br><span class="line">├── 【号外021】.分布式事务总结-1.mp4</span><br><span class="line">├── 【号外022】.分布式事务总结-2 copy.mp4</span><br><span class="line">└── 【号外022】.分布式事务总结-2.mp4</span><br></pre></td></tr></table></figure><p><strong>目前已经录的总共是 44+22=66 集，约 18 个小时。</strong>和五月底的时候相比，集数和时间基本上都翻倍了。</p><p>可能有小伙伴还不知道我最近在录这个项目，因此这里再跟大伙啰嗦一下：</p><blockquote><p>TienChin 项目是一个健身会员管理系统，基于 RuoYi-Vue 脚手架来做，使用 Spring Boot + Vue3 开发，不同于之前的 vhr 是一个脚手架，TienChin 项目的业务完成度会超过 90%。这个项目的视频教程整体上分为两大块：第一块主要是解剖 RuoYi-Vue 脚手架，让小伙伴们能够熟练掌握这个脚手架的使用，在这个过程中，我会讲许多技术点，前面列出来的视频目录都属于这一部分的内容，这个过程中我不会带领大家从头敲一边 RuoYi-Vue 脚手架，但是对项目里边的一些技术点，会有针对性的讲解，也会写一些案例来帮助大家理解这些技术点。第二块内容则主要是业务功能的完成了，业务功能涉及到的技术点主要有：SpringBoot、Vue、MyBatis Plus、MySQL、Redis、Flowable、EasyExcel、NodeJS 等。</p></blockquote><p>目前更新的视频主要出于第一阶段。</p><p>这些视频基本上都是工作之余录制的，大部分都是早上 6-8 点之间录的，所以是付费视频，视频定价是 399，不过目前可以 7 折上车，也就是 279，之前买过 vhr 的小伙伴可在此基础上再优惠 30，即只要 249，随着视频的录制，内容越来越多，折扣力度也会变小，这个之前买过 vhr 视频得小伙伴应该都懂，无论你何时上车，当前价格都是你在未来能够买到的最低价格啦。</p><p>录视频还是蛮辛苦的，一方面赚点小钱养家糊口，另一方面也是小伙伴们的认可在支撑着我把这件事做下去，得瑟一下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/996.jpg" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/995.jpg" alt></p><p><img src="http://img.itboyhub.com/2021/10/tran/013.jpeg" alt></p><p><strong>有时候看小伙伴们发的，我真的特别动容。虽然大家看我天天写文章聊技术，其实我在生活中除了工作之外很少和人交流，真的特别想给这些爱学习会说话的小伙伴们点赞，他们肯定会混的比我好。</strong></p><hr><p>好啦，最后再统一回答大家几个关于视频的问题。</p><p><strong>Q1：视频放在哪里，怎么播放？</strong></p><p>视频放在百度网盘上，下载后使用专用播放器授权播放，专用播放器一机一码一人一码。至于小伙伴们推荐的阿里网盘等，由于空间、分享文件类型等限制，并无法用在 TienChin 项目视频分发中。</p><p><strong>Q2：视频为什么不支持在线播放？</strong></p><p>在线播放的话，一般都是和平台合作，但是国内大家所熟知的平台如慕课网、csdn 学院等，平台抽成基本都是 4 成起，松哥之前还合作了一个平台拿 6 成（也就是假如 100 块钱的课，平台拿走 60）。这样的分成比例无形中会推高课程的价格，现在我自己分发，所以才能做到<strong>低价</strong>。同时为了防止视频泄露，松哥对视频做了加密处理，这样可以确保大家不会在其他地方看到一模一样的免费视频，加密后的视频只能使用专用播放器播放，因此不支持在线播放。</p><p><strong>Q3：视频可以试看吗？</strong></p><p>其实我最近在公号发的视频，大家都可以当作试看的，反正的录视频风格是不变的。和 vhr 视频相比，现在的 TienChin 项目视频音质是杠杠滴，下面三个视频是我最近发过的，小伙伴们可以当作试看的视频：</p><p><strong>Q4：可以砍价吗？</strong></p><p>不可以，这个价格已经很便宜了，没法砍了（悄悄告诉大家，从 vhr 到 tienchin，暂时没有人砍价成功过）。</p><p><strong>Q5：视频多久更新完毕？</strong></p><p>其实如果单纯带着大家写业务功能，这个项目不会花太多时间，这样虽然大家完整的做了一个项目，但是技术却不会有太多长进，而我则希望在这个过程中多整点活，能让小伙伴们技术也有一些提升，这样内容一加，最终何时更完就不确定了。不过，有一点是可以保证的，每周至少一次，每周至少更一个半小时精品视频。</p><p><strong>Q6：知识星球是什么？</strong></p><p>星球主要是用来更新视频下载地址的地方，大家在这套视频教程时遇到问题时，都可以在星球上提问，小伙伴们购买视频后，我会拉你进星球。</p><p><strong>Q7：这套视频适合哪些人看？</strong></p><p>学习这套视频，首先需要有 SSM 基础，如果没有，可以在公众号后台回复 SSM，有我录制的免费视频教程；另外也需要一些 Spring Boot 基础和 Vue 基础，要是没接触过 Spring Boot 和 Vue 的话，那么建议先看看 vhr，戳这里：<a href="https://mp.weixin.qq.com/s/aIyP77WrrswWNXaueBXj7w" target="_blank" rel="noopener">Spring Boot+Vue+微人事视频教程</a></p><p><strong>Q8：看视频有问题可以问吗？</strong></p><p>参考 Q6。</p><p><strong>Q9：这套视频我能学到啥？</strong></p><p>TienChin 项目基于 RuoYi-Vue 脚手架（Spring Boot+Vue3），这套视频学完后，小伙伴们对 RuoYi-Vue 脚手架基本上就融会贯通了，并能在 RuoYi-Vue 脚手架上随心所欲的开发常规的企业后台应用。并且对于分布式事务 seata、Flowable 流程引擎等框架也能熟练使用并掌握其原理，对于 Redis 在项目中的各种实际应用场景也会有较好的掌握。</p><hr><p><strong>好啦，七折 279 抄底就在今天啦！</strong></p><p>P.s.：可能有小伙伴加了松哥多个微信，其实没有必要重复添加，任意一个都能找到我。当然，如果你还没有松哥微信，扫码加微信，转账 279 上车吧（买过 vhr 的小伙伴可在此基础上再优惠 ¥30 哦）～</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220504151134.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离上次跟小伙伴们汇报 TienChin 项目视频进度已经过去一个月啦，今天是 6 月 30 号，再来汇报一下这个月视频的进展。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>Vue 里，多级菜单要如何设计才显得专业？</title>
    <link href="http://www.javaboy.org/2022/0628/vue-menu.html"/>
    <id>http://www.javaboy.org/2022/0628/vue-menu.html</id>
    <published>2022-06-28T15:20:23.000Z</published>
    <updated>2022-07-19T15:50:13.785Z</updated>
    
    <content type="html"><![CDATA[<p>老生常谈了！</p><p>虽然我们是 Java 猿，但是写起来前端代码也不含糊！今天我想来和大家聊聊这个前端的动态菜单，要如何设计才显得专业！还是以我们的 TienChin 项目为例，大家一起来看看。</p><a id="more"></a><p>先来一张截图看看效果：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220426215908.png" alt></p><p>那么这样的菜单是如何设计出来的呢？</p><p>今天我也不想和大家聊过多的技术细节，就聊聊这个路由是如何设计的，一旦大家明白了路由是如何设计的，剩下的问题都是细枝末节的问题了。</p><h2 id="1-路由设计"><a href="#1-路由设计" class="headerlink" title="1. 路由设计"></a>1. 路由设计</h2><p>有的小伙伴做过 vhr，知道 vhr 里的动态菜单实现方式，松哥和大家一样，也是在不断学习不断进步中，今天我想和大家探讨 TienChin 项目中动态菜单的实现方案，看看是否是一种更佳的解决方案。</p><h3 id="1-1-菜单设计"><a href="#1-1-菜单设计" class="headerlink" title="1.1 菜单设计"></a>1.1 菜单设计</h3><p>先来和小伙伴们回顾下 vhr 中的方案：</p><p>在 vhr 中，权限的控制，只控制到二级菜单，也就是一级菜单和权限没关系。举个例子，现在有一级菜单 A 和 二级菜单 B，B 是 A 中的菜单，现在假设：</p><ul><li>如果当前用户权限可以查看 B 菜单，那么 A 菜单会自动显示出来。</li><li>如果当前用户权限无法查看 B 菜单，且 A 菜单中也没有其他子菜单可以展示，那么 A 菜单就不会显示出来。</li></ul><p>换言之，A 菜单显示与否，主要看它里边有没有子菜单需要展示，如果有，A 菜单就显示，如果没有，A 菜单就不显示。</p><p>vhr 中的思路是这样的。</p><p>在 TienChin 项目中，这一块有一些变化：</p><p>如果 A 中只有一个 B，那么似乎就没有必要再做一个两级菜单了，直接把 B 展示出来不就行了？用户操作也方便！</p><p>这是第一个不一样的地方。</p><h3 id="1-2-路由数据"><a href="#1-2-路由数据" class="headerlink" title="1.2 路由数据"></a>1.2 路由数据</h3><p>基于第一点，就涉及到一个问题，就是路由接口该如何设计？最主要是接口返回的数据格式应该是什么样子的？</p><p>首先有一点小伙伴们应该知道，这里的路由是一个嵌套路由，也就是一级菜单中嵌套着二级菜单。即使这个地方在展示的时候，不存在层级关系，例如上图中的促销活动，但是底层的数据结构也应该是嵌套路由。</p><p>好啦，不卖关子了，我们来看一段路由 JSON：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"Monitor"</span>,</span><br><span class="line"><span class="hljs-string">"path"</span>: <span class="hljs-string">"/monitor"</span>,</span><br><span class="line"><span class="hljs-string">"hidden"</span>: <span class="hljs-keyword">false</span>,</span><br><span class="line"><span class="hljs-string">"redirect"</span>: <span class="hljs-string">"noRedirect"</span>,</span><br><span class="line"><span class="hljs-string">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line"><span class="hljs-string">"alwaysShow"</span>: <span class="hljs-keyword">true</span>,</span><br><span class="line"><span class="hljs-string">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-string">"title"</span>: <span class="hljs-string">"系统监控"</span>,</span><br><span class="line"><span class="hljs-string">"icon"</span>: <span class="hljs-string">"monitor"</span>,</span><br><span class="line"><span class="hljs-string">"noCache"</span>: <span class="hljs-keyword">false</span>,</span><br><span class="line"><span class="hljs-string">"link"</span>: <span class="hljs-keyword">null</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="hljs-string">"children"</span>: [&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"Online"</span>,</span><br><span class="line"><span class="hljs-string">"path"</span>: <span class="hljs-string">"online"</span>,</span><br><span class="line"><span class="hljs-string">"hidden"</span>: <span class="hljs-keyword">false</span>,</span><br><span class="line"><span class="hljs-string">"component"</span>: <span class="hljs-string">"monitor/online/index"</span>,</span><br><span class="line"><span class="hljs-string">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-string">"title"</span>: <span class="hljs-string">"在线用户"</span>,</span><br><span class="line"><span class="hljs-string">"icon"</span>: <span class="hljs-string">"online"</span>,</span><br><span class="line"><span class="hljs-string">"noCache"</span>: <span class="hljs-keyword">false</span>,</span><br><span class="line"><span class="hljs-string">"link"</span>: <span class="hljs-keyword">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"Job"</span>,</span><br><span class="line"><span class="hljs-string">"path"</span>: <span class="hljs-string">"job"</span>,</span><br><span class="line"><span class="hljs-string">"hidden"</span>: <span class="hljs-keyword">false</span>,</span><br><span class="line"><span class="hljs-string">"component"</span>: <span class="hljs-string">"monitor/job/index"</span>,</span><br><span class="line"><span class="hljs-string">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-string">"title"</span>: <span class="hljs-string">"定时任务"</span>,</span><br><span class="line"><span class="hljs-string">"icon"</span>: <span class="hljs-string">"job"</span>,</span><br><span class="line"><span class="hljs-string">"noCache"</span>: <span class="hljs-keyword">false</span>,</span><br><span class="line"><span class="hljs-string">"link"</span>: <span class="hljs-keyword">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="hljs-string">"path"</span>: <span class="hljs-string">"/"</span>,</span><br><span class="line"><span class="hljs-string">"hidden"</span>: <span class="hljs-keyword">false</span>,</span><br><span class="line"><span class="hljs-string">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line"><span class="hljs-string">"children"</span>: [&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"Role"</span>,</span><br><span class="line"><span class="hljs-string">"path"</span>: <span class="hljs-string">"role"</span>,</span><br><span class="line"><span class="hljs-string">"hidden"</span>: <span class="hljs-keyword">false</span>,</span><br><span class="line"><span class="hljs-string">"component"</span>: <span class="hljs-string">"system/role/index"</span>,</span><br><span class="line"><span class="hljs-string">"meta"</span>: &#123;</span><br><span class="line"><span class="hljs-string">"title"</span>: <span class="hljs-string">"角色管理"</span>,</span><br><span class="line"><span class="hljs-string">"icon"</span>: <span class="hljs-string">"peoples"</span>,</span><br><span class="line"><span class="hljs-string">"noCache"</span>: <span class="hljs-keyword">false</span>,</span><br><span class="line"><span class="hljs-string">"link"</span>: <span class="hljs-keyword">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>这里我举了两个菜单的例子，这两个例子比较具有代表性，这个菜单最终显示效果大概类似下面这样：</p><ul><li>系统监控<ul><li>在线用户</li><li>定时任务</li></ul></li><li>角色管理</li></ul><p>大概显示效果如上图。</p><p>接下来我就来说一下这里几个典型属性：</p><ol><li>redirect：noRedirect 表示该路由在面包屑导航中不可被点击。</li><li>alwaysShow：如果这个属性设置为 false，那么当当前菜单只有一个子菜单的时候，默认情况下就只会显示子菜单，而忽略父菜单（如 1.1 小节所述），但是如果将该属性设置为 true，则无论当前菜单有几个子菜单，都会将当前菜单展示出来（这就类似于 vhr 中的效果了）。</li><li>每一个父菜单都有自己的 path，每一个 children 也有自己的 path，父菜单的 path 加上每一个 children 的 path，共同组成每一个 children 的路径。</li><li>再来看第二个角色管理这个菜单项，由于它的父菜单中只有一个子菜单项，并且父菜单中也没有 alwaysShow 属性，所以这个菜单项在最终展示的时候，就只展示里边的角色管理，父菜单则不会展示出来（正好，生成的 JSON 中也没说父菜单的名字、图标等属性）。</li></ol><p>当然，不是说你的 JSON 这么写就自动这么显示，JSON 中的东西只是一个标记，最终怎么显示，还要看渲染：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"!item.hidden"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"hasOneShowingChild(item.children,item) &amp;&amp; (!onlyOneChild.children||onlyOneChild.noShowingChildren)&amp;&amp;!item.alwaysShow"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">app-link</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"onlyOneChild.meta"</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">"resolvePath(onlyOneChild.path, onlyOneChild.query)"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"resolvePath(onlyOneChild.path)"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"&#123;'submenu-title-noDropdown':!isNest&#125;"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">"onlyOneChild.meta.icon||(item.meta&amp;&amp;item.meta.icon)"</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"onlyOneChild.meta.title"</span> /&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">app-link</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"subMenu"</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">"resolvePath(item.path)"</span> <span class="hljs-attr">popper-append-to-body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"title"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"item.meta"</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">"item.meta &amp;&amp; item.meta.icon"</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"item.meta.title"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">sidebar-item</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">v-for</span>=<span class="hljs-string">"child in item.children"</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">:key</span>=<span class="hljs-string">"child.path"</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">:is-nest</span>=<span class="hljs-string">"true"</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">:item</span>=<span class="hljs-string">"child"</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">:base-path</span>=<span class="hljs-string">"resolvePath(child.path)"</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">"nest-menu"</span></span></span><br><span class="line"><span class="hljs-tag">    /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有一个函数我就没有列出来了，反正我们看名字也大概知道每一个函数的含义。</p><p>大家看，这个 div 中实际上分为了两部分，上面 template 专门用来处理 children 中只有一项的情况（角色管理），具体处理方式就是把 children 拿出来显示，其他的则不考虑，具体执行的时候不一定是只有一个 children，也有可能压根就没有 children，此时直接显示 parent 即可（参考 1.3 小节）。</p><p>下面的 el-submenu 则处理 children 有多个的情况（系统监控）。</p><p>另外这里涉及到了一个 resolvePath，也是特别关键的一个方法，我们来大致看下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resolvePath(routePath, routeQuery) &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (isExternal(routePath)) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> routePath</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">if</span> (isExternal(<span class="hljs-keyword">this</span>.basePath)) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.basePath</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">if</span> (routeQuery) &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> query = <span class="hljs-built_in">JSON</span>.parse(routeQuery);</span><br><span class="line">    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">path</span>: path.resolve(<span class="hljs-keyword">this</span>.basePath, routePath), <span class="hljs-attr">query</span>: query &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> path.resolve(<span class="hljs-keyword">this</span>.basePath, routePath)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的主要左右，就是处理菜单的路径问题。</p><p>我们来看下这个具体的判断逻辑：</p><ol><li>如果这个菜单的路径是一个外链（判断逻辑是查看这个 path 是否有 http 或者 https 等前缀），即 isExternal 返回 true，就把这个路径原封不动返回。</li><li>如果这个菜单的父菜单的路径是一个外链，则将父菜单的 path 原封不懂返回。</li><li>如果有查询参数，就把参数加上。</li><li>最后通过 path.resolve 对路径进行一个简单运算。</li></ol><p>有的小伙伴可能对 path.resolve 不熟悉，我简单说下：</p><p>path.resolve() 方法可以将多个路径解析为一个规范化的绝对路径，它的处理方式类似于对这些路径逐一进行 cd 操作，然而与 cd 操作不同的是，这些路径可以是文件，并且可不必实际存在（resolve() 方法不会利用底层的文件系统判断路径是否存在，而只是进行路径字符串操作）。例如：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(<span class="hljs-string">'foo/bar'</span>, <span class="hljs-string">'/tmp/file/'</span>, <span class="hljs-string">'..'</span>, <span class="hljs-string">'a/../subfile'</span>)</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd foo/bar</span><br><span class="line">cd /tmp/file/</span><br><span class="line">cd ..</span><br><span class="line">cd a/../subfile</span><br><span class="line">pwd</span><br></pre></td></tr></table></figure><p>举个简单的例子：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(<span class="hljs-string">'/foo/bar'</span>, <span class="hljs-string">'./baz'</span>) </span><br><span class="line"><span class="hljs-comment">// 输出结果为 </span></span><br><span class="line"><span class="hljs-string">'/foo/bar/baz'</span> </span><br><span class="line"></span><br><span class="line">path.resolve(<span class="hljs-string">'/foo/bar'</span>, <span class="hljs-string">'/tmp/file/'</span>) </span><br><span class="line"><span class="hljs-comment">// 输出结果为 </span></span><br><span class="line"><span class="hljs-string">'/tmp/file'</span> </span><br><span class="line"></span><br><span class="line">path.resolve(<span class="hljs-string">'wwwroot'</span>, <span class="hljs-string">'static_files/png/'</span>, <span class="hljs-string">'../gif/image.gif'</span>) </span><br><span class="line"><span class="hljs-comment">// 当前的工作路径是 /home/javaboy/node，则输出结果为 </span></span><br><span class="line"><span class="hljs-string">'/home/javaboy/node/wwwroot/static_files/gif/image.gif'</span></span><br></pre></td></tr></table></figure><p>现在大家知道菜单跳转的路径是怎么来的了吧！</p><h3 id="1-3-外链问题"><a href="#1-3-外链问题" class="headerlink" title="1.3 外链问题"></a>1.3 外链问题</h3><p>在 TienChin 项目中，菜单还存在一个外链的问题。</p><p>这个外链有两种不同的显示思路：</p><ol><li>点击外链，直接打开一个新的选项卡，在新的选项卡中展示新的页面。</li><li>点击外链，在当前项目中打开一个新的选项卡，选项卡中展示新的内容。</li></ol><p>对于第一种情况我就不和大家演示了，对于第二种情况，我截个图给大家看下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220627235423.png" alt></p><p>就是在当前项目的选项卡中，展示一个外部链接的内容。</p><p>我们先来看第一种情况。即点击菜单之后，就在一个新的选项卡中打开网页，这种菜单的 JSON 格式如下：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"path"</span>: <span class="hljs-string">"http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line">    <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">        <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">        <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-attr">"link"</span>: <span class="hljs-string">"http://www.javaboy.org"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个大家看，也没有 children，因为不需要，这个显示的时候，就当成了只有一个 children 来处理，然后菜单项的 path 是一个 http 路径，一点击，自然就跳到新的选项卡了。</p><p>对于第二种情况，即点击外链，在当前项目中打开一个新的选项卡，选项卡中展示链接的内容，它的 JSON 结构类似下面这样：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Http://www.javaboy.org"</span>,</span><br><span class="line">    <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/"</span>,</span><br><span class="line">    <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-attr">"component"</span>: <span class="hljs-string">"Layout"</span>,</span><br><span class="line">    <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">        <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">        <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-attr">"link"</span>: <span class="hljs-literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-attr">"children"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Www.javaboy.org"</span>,</span><br><span class="line">            <span class="hljs-attr">"path"</span>: <span class="hljs-string">"www.javaboy.org"</span>,</span><br><span class="line">            <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">            <span class="hljs-attr">"component"</span>: <span class="hljs-string">"InnerLink"</span>,</span><br><span class="line">            <span class="hljs-attr">"meta"</span>: &#123;</span><br><span class="line">                <span class="hljs-attr">"title"</span>: <span class="hljs-string">"TienChin健身官网"</span>,</span><br><span class="line">                <span class="hljs-attr">"icon"</span>: <span class="hljs-string">"guide"</span>,</span><br><span class="line">                <span class="hljs-attr">"noCache"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">                <span class="hljs-attr">"link"</span>: <span class="hljs-string">"http://www.javaboy.org"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个其实也没啥好说的，类似于上面系统监控的那种情况，但是只有一个子菜单，在菜单渲染的时候，也是只渲染一个子菜单。由于父子菜单的 path 都不是以 http 或者 https 之类的地址开头，所以这个链接最终生成的 path 是 <code>/www.javaboy.org</code>，然后这个路径的内容将展示在 InnerLink 组件上，最终就是大家上图中所看到的效果了。</p><h2 id="2-小结"><a href="#2-小结" class="headerlink" title="2. 小结"></a>2. 小结</h2><p>好啦，今天就先和小伙伴们分析一下前端菜单的各种情况，后端菜单如何按照需要返回数据，咱们下篇文章继续～</p><p>前端代码就是繁琐呀～松哥后面再录视频和大家仔细捋一捋，对视频感兴趣的小伙伴戳戳戳这里：<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247497947&amp;idx=1&amp;sn=c6851795e8371739215c877237fa9b6a&amp;chksm=e9c0aabbdeb723adc5fe1e30bda90e5188b49898c6e436416e1c6e90e23f1c937b29366b0b9d#rd" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;老生常谈了！&lt;/p&gt;
&lt;p&gt;虽然我们是 Java 猿，但是写起来前端代码也不含糊！今天我想来和大家聊聊这个前端的动态菜单，要如何设计才显得专业！还是以我们的 TienChin 项目为例，大家一起来看看。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security 中，想在权限中使用通配符，怎么做？</title>
    <link href="http://www.javaboy.org/2022/0627/permission-wildcard.html"/>
    <id>http://www.javaboy.org/2022/0627/permission-wildcard.html</id>
    <published>2022-06-27T15:20:11.000Z</published>
    <updated>2022-07-19T15:50:10.373Z</updated>
    
    <content type="html"><![CDATA[<p>小伙伴们知道，在 Shiro 中，默认是支持权限通配符的，例如系统用户有如下一些权限：</p><ul><li>system:user:add</li><li>system:user:delete</li><li>system:user:select</li><li>system:user:update</li><li>…</li></ul><a id="more"></a><p>现在给用户授权的时候，我们可以像上面这样，一个权限一个权限的配置，也可以直接用通配符：</p><ul><li>system:user:*</li></ul><p>这个通配符就表示拥有针对用户的所有权限。</p><p>当然这是 Shiro 里边的，对 Shiro 不熟悉的小伙伴，可以在公众号后台回复 shiro，查看松哥之前录的视频教程。</p><p>今天我们来聊聊 Spring Security 中对此如何处理，也顺便来看看 TienChin 项目中，这块该如何改进。</p><h2 id="1-SpEL"><a href="#1-SpEL" class="headerlink" title="1. SpEL"></a>1. SpEL</h2><p>要搞明白基于注解的权限管理，那么得首先理解 SpEL，不需要了解多深入，我这里就简单介绍下。</p><p>Spring Expression Language（简称 SpEL）是一个支持查询和操作运行时对象导航图功能的强大的表达式语言。它的语法类似于传统 EL，但提供额外的功能，最出色的就是函数调用和简单字符串的模板函数。</p><p>SpEL 给 Spring 社区提供一种简单而高效的表达式语言，一种可贯穿整个 Spring 产品组的语言。这种语言的特性基于 Spring 产品的需求而设计，这是它出现的一大特色。</p><p>在我们离不开 Spring 框架的同时，其实我们也已经离不开 SpEL 了，因为它太好用、太强大了，SpEL 在整个 Spring 家族中也处于一个非常重要的位置。但是很多时候，我们对它的只了解一个大概，其实如果你系统的学习过 SpEL，那么上面 Spring Security 那个注解其实很好理解。</p><p>我先通过一个简单的例子来和大家捋一捋 SpEL。</p><p>为了省事，我就创建一个 Spring Boot 工程来和大家演示，创建的时候不用加任何额外的依赖，就最最基础的依赖即可。</p><p>代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String expressionStr = <span class="hljs-string">"1 + 2"</span>;</span><br><span class="line">ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(expressionStr);</span><br></pre></td></tr></table></figure><p>expressionStr 是我们自定义的一个表达式字符串，这个字符串通过一个 ExpressionParser 对象将之解析为一个 Expression，接下来就可以执行这个 exp 了。</p><p>执行的时候有两种方式，对于我们上面这种不带任何额外变量的，我们可以直接执行，直接执行的方式如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object value = exp.getValue();</span><br><span class="line">System.out.println(value.toString());</span><br></pre></td></tr></table></figure><p>这个打印结果为 3。</p><p>我记得之前有个小伙伴在群里问想执行一个字符串表达式，但是不知道怎么办，js 中有 eval 函数很方便，我们 Java 中也有 SpEL，一样也很方便。</p><p>不过很多时候，我们要执行的表达式可能比较复杂，这时候上面这种调用方式就不太够用了。</p><p>此时我们可以为要调用的表达式设置一个上下文环境，这个时候就会用到 EvaluationContext 或者它的子类，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StandardEvaluationContext context = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">System.out.println(exp.getValue(context));</span><br></pre></td></tr></table></figure><p>当然上面这个表达式不需要设置上下文环境，我举一个需要设置上下文环境的例子。</p><p>例如我现在有一个 User 类，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer id;</span><br><span class="line">    <span class="hljs-keyword">private</span> String username;</span><br><span class="line">    <span class="hljs-keyword">private</span> String address;</span><br><span class="line">    <span class="hljs-comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我的表达式是这样：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String expression = <span class="hljs-string">"#user.username"</span>;</span><br><span class="line">ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(expression);</span><br><span class="line">StandardEvaluationContext ctx = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">User user = <span class="hljs-keyword">new</span> User();</span><br><span class="line">user.setAddress(<span class="hljs-string">"广州"</span>);</span><br><span class="line">user.setUsername(<span class="hljs-string">"javaboy"</span>);</span><br><span class="line">user.setId(<span class="hljs-number">99</span>);</span><br><span class="line">ctx.setVariable(<span class="hljs-string">"user"</span>, user);</span><br><span class="line">String value = exp.getValue(ctx, String.class);</span><br><span class="line">System.out.println(<span class="hljs-string">"value = "</span> + value);</span><br></pre></td></tr></table></figure><p>这个表达式就表示获取 user 对象的 username 属性。将来创建一个 user 对象，放到 StandardEvaluationContext 中，并基于此对象执行表达式，就可以打印出来想要的结果。</p><p>如果我们将 user 对象设置为 rootObject，那么表达式中就不需要 user 了，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String expression = <span class="hljs-string">"username"</span>;</span><br><span class="line">ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(expression);</span><br><span class="line">StandardEvaluationContext ctx = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">User user = <span class="hljs-keyword">new</span> User();</span><br><span class="line">user.setAddress(<span class="hljs-string">"广州"</span>);</span><br><span class="line">user.setUsername(<span class="hljs-string">"javaboy"</span>);</span><br><span class="line">user.setId(<span class="hljs-number">99</span>);</span><br><span class="line">ctx.setRootObject(user);</span><br><span class="line">String value = exp.getValue(ctx, String.class);</span><br><span class="line">System.out.println(<span class="hljs-string">"value = "</span> + value);</span><br></pre></td></tr></table></figure><p>表达式就一个 username 字符串，将来执行的时候，会自动从 user 中找到 username 的值并返回。</p><p>当然表达式也可以是方法，例如我在 User 类中添加如下两个方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(Integer age)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello "</span> + username + <span class="hljs-string">";age="</span> + age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello "</span> + username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们就可以通过表达式调用这两个方法，如下：</p><p>调用有参的 sayHello：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String expression = <span class="hljs-string">"sayHello(99)"</span>;</span><br><span class="line">ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(expression);</span><br><span class="line">StandardEvaluationContext ctx = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">User user = <span class="hljs-keyword">new</span> User();</span><br><span class="line">user.setAddress(<span class="hljs-string">"广州"</span>);</span><br><span class="line">user.setUsername(<span class="hljs-string">"javaboy"</span>);</span><br><span class="line">user.setId(<span class="hljs-number">99</span>);</span><br><span class="line">ctx.setRootObject(user);</span><br><span class="line">String value = exp.getValue(ctx, String.class);</span><br><span class="line">System.out.println(<span class="hljs-string">"value = "</span> + value);</span><br></pre></td></tr></table></figure><p>就直接写方法名然后执行就行了。</p><p>调用无参的 sayHello：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String expression = <span class="hljs-string">"sayHello"</span>;</span><br><span class="line">ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(expression);</span><br><span class="line">StandardEvaluationContext ctx = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">User user = <span class="hljs-keyword">new</span> User();</span><br><span class="line">user.setAddress(<span class="hljs-string">"广州"</span>);</span><br><span class="line">user.setUsername(<span class="hljs-string">"javaboy"</span>);</span><br><span class="line">user.setId(<span class="hljs-number">99</span>);</span><br><span class="line">ctx.setRootObject(user);</span><br><span class="line">String value = exp.getValue(ctx, String.class);</span><br><span class="line">System.out.println(<span class="hljs-string">"value = "</span> + value);</span><br></pre></td></tr></table></figure><p>这些就都好懂了。</p><p><strong>甚至，我们的表达式也可以涉及到 Spring 中的一个 Bean，例如我们向 Spring 中注册如下 Bean：</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span>(<span class="hljs-string">"us"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过 SpEL 表达式来调用这个名为 us 的 bean 中的 sayHello 方法，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Autowired</span></span><br><span class="line">BeanFactory beanFactory;</span><br><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    String expression = <span class="hljs-string">"@us.sayHello('javaboy')"</span>;</span><br><span class="line">    ExpressionParser parser = <span class="hljs-keyword">new</span> SpelExpressionParser();</span><br><span class="line">    Expression exp = parser.parseExpression(expression);</span><br><span class="line">    StandardEvaluationContext ctx = <span class="hljs-keyword">new</span> StandardEvaluationContext();</span><br><span class="line">    ctx.setBeanResolver(<span class="hljs-keyword">new</span> BeanFactoryResolver(beanFactory));</span><br><span class="line">    String value = exp.getValue(ctx, String.class);</span><br><span class="line">    System.out.println(<span class="hljs-string">"value = "</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给配置的上下文环境设置一个 bean 解析器，这个 bean 解析器会自动跟进名字从 Spring 容器中找打响应的 bean 并执行对应的方法。</p><p>当然，关于 SpEL 的玩法还有很多，我就不一一列举了。这里主要是想让小伙伴们知道，有这么个技术，方便大家理解 @PreAuthorize 注解的原理。</p><p>总结一下：</p><ol><li>在使用 SpEL 的时候，如果表达式直接写的就是方法名，那是因为在构建 SpEL 上下文的时候，已经设置了 RootObject 了，我们所调用的方法，实际上就是 RootObject 对象中的方法。</li><li>在使用 SpEL 对象的时候，如果像调用非 RootObject 对象中的方法，那么表达式需要加上 <code>@对象名</code> 作为前缀，例如前面案例的 <code>@us</code>。</li></ol><h2 id="2-自定义权限该如何写"><a href="#2-自定义权限该如何写" class="headerlink" title="2. 自定义权限该如何写"></a>2. 自定义权限该如何写</h2><p>那么自定义权限到底该如何写呢？首先我们来看下在 Spring Security 中，不涉及到通配符的权限该怎么处理。</p><p>松哥举一个简单的例子，我们创建一个 Spring Boot 工程，引入 Web 和 Security 依赖，为了方便，这里的用户我直接创建在内存中，配置如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="hljs-keyword">true</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">UserDetailsService <span class="hljs-title">userDetailsService</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager m = <span class="hljs-keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        m.createUser(User.withUsername(<span class="hljs-string">"javaboy"</span>).password(<span class="hljs-string">"&#123;noop&#125;123"</span>).authorities(<span class="hljs-string">"system:user:add"</span>,<span class="hljs-string">"system:user:delete"</span>).build());</span><br><span class="line">        <span class="hljs-keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">SecurityFilterChain <span class="hljs-title">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll();</span><br><span class="line">        <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都是常规配置，没啥好说的。注意前面的注解，开启基于注解的权限控制。</p><blockquote><p>这里我多啰嗦一句，大家看创建用户的时候，调用的是 authorities 方法去设置权限的，这个跟 roles 方法其实没啥大的区别，调用 roles 方法会自动为你设置的字符串添加一个 <code>ROLE_</code> 前缀，其他的其实都一样。在 Spring Security 中，role 和 permission 仅仅只是人为划分出来的东西，底层的实现包括判断逻辑基本上都是没有区别的。</p></blockquote><p>接下来我们定义四个测试接口，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/add"</span>)</span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"hasPermission('/add','system:user:add')"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"add"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/delete"</span>)</span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"hasPermission('/delete','system:user:delete')"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"delete"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/update"</span>)</span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"hasPermission('/update','system:user:update')"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateUser</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"update"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/select"</span>)</span><br><span class="line">    <span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"hasPermission('/select','system:user:select')"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">selectUser</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"select"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口访问都需要不同的权限。</p><p>此时如果大家启动项目去此时，系统会提示你四个接口统统都不具备权限，这是啥原因呢？我们来继续分析。</p><p>小伙伴们看这里，调用的时候 <code>@PreAuthorize</code> 注解中执行写方法名，不用写对象名，说明调用的方法是 RootObject 中的方法，这里的 RootObject 实际上就是 SecurityExpressionRoot，我们来看看这个对象中的 hasPermission 方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermission</span><span class="hljs-params">(Object target, Object permission)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.permissionEvaluator.hasPermission(<span class="hljs-keyword">this</span>.authentication, target, permission);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermission</span><span class="hljs-params">(Object targetId, String targetType, Object permission)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.permissionEvaluator.hasPermission(<span class="hljs-keyword">this</span>.authentication, (Serializable) targetId, targetType,</span><br><span class="line">permission);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的调用又指向了 permissionEvaluator 对象。</p><p>在 Spring Security 中，permissionEvaluator 有一个统一的接口就是 PermissionEvaluator，但是这个接口只有一个实现类，就是 DenyAllPermissionEvaluator，看名字就知道，这是拒绝所有。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DenyAllPermissionEvaluator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PermissionEvaluator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> false always</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermission</span><span class="hljs-params">(Authentication authentication, Object target, Object permission)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> false always</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermission</span><span class="hljs-params">(Authentication authentication, Serializable targetId, String targetType,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">Object permission)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个方法里啥都没干，直接返回了 false，这下就破案了！</p><p>所以，在 Spring Security 中，如果想判断权限，需要自己提供一个 PermissionEvaluator 的实例，我们来看下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomPermissionEvaluator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PermissionEvaluator</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermission</span><span class="hljs-params">(Authentication authentication, Object targetDomainObject, Object permission)</span> </span>&#123;</span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">        <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (authority.getAuthority().equals(permission)) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermission</span><span class="hljs-params">(Authentication authentication, Serializable targetId, String targetType, Object permission)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里的判断逻辑比较简单，所以只需要实现第一个方法就行了，这个方法三个参数，第一个参数就是当前登录成功的用户对象，后面两个参数则是我们在 <code>@PreAuthorize(&quot;hasPermission(&#39;/select&#39;,&#39;system:user:select&#39;)&quot;)</code> 注解中的两个参数，现在该有的东西都有了，我们只需要判断需要的权限当前用户是否有就行了。</p><p>这个自定义的权限评估器写好之后，注册到 Spring 容器就行了，其他什么事情都不用做。</p><p>接下来我们就可以对刚才的四个接口进行测试了，测试过程我就不演示了，小伙伴们自行用 postman 测试就行了。</p><h2 id="3-权限通配符"><a href="#3-权限通配符" class="headerlink" title="3. 权限通配符"></a>3. 权限通配符</h2><p>看明白了上面的逻辑，现在不用我说，大家也知道权限通配符在 Spring Security 中是不支持的（无论你在 @PreAuthorize 注解中写的 SpEL 是哪个，调用的是哪个方法，都是不支持权限通配符的）。</p><p>例如我现在这样描述我的用户权限：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-function">UserDetailsService <span class="hljs-title">userDetailsService</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    InMemoryUserDetailsManager m = <span class="hljs-keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">    m.createUser(User.withUsername(<span class="hljs-string">"javaboy"</span>).password(<span class="hljs-string">"&#123;noop&#125;123"</span>).authorities(<span class="hljs-string">"system:user:*"</span>).build());</span><br><span class="line">    <span class="hljs-keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我想用 <code>system:user:*</code> 字符串表示 javaboy 具有针对用户的所有权限。</p><p>直接这样写肯定是不行的，最终字符串比较一定是不会通过的。</p><p>那么怎么办呢？用正则似乎也不太行，因为 * 在正则中不代表所有字符，如果拆解字符串去比较，功能虽然也行得通，但是比较麻烦。</p><p>想来想去，想到一个办法，不知道小伙伴们是否还记得我们之前在 vhr 中用过的 AntPathMatcher，用这个不就行了！</p><p>修改后的 CustomPermissionEvaluator 如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomPermissionEvaluator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PermissionEvaluator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    AntPathMatcher antPathMatcher = <span class="hljs-keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermission</span><span class="hljs-params">(Authentication authentication, Object targetDomainObject, Object permission)</span> </span>&#123;</span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">        <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (antPathMatcher.match(authority.getAuthority(), (String) permission)) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermission</span><span class="hljs-params">(Authentication authentication, Serializable targetId, String targetType, Object permission)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改之后，现在只要用户具备 <code>system:user:*</code> 权限，就四个接口都能访问了。</p><h2 id="4-TienChin-项目怎么做的？"><a href="#4-TienChin-项目怎么做的？" class="headerlink" title="4. TienChin 项目怎么做的？"></a>4. TienChin 项目怎么做的？</h2><p>TienChin 项目用的是 RuoYi-Vue 脚手架，我们来看下这个脚手架的实现方式：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('tienchin:channel:query')"</span>)</span><br><span class="line"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/list"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title">getChannelList</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    startPage();</span><br><span class="line">    List&lt;Channel&gt; list = channelService.list();</span><br><span class="line">    <span class="hljs-keyword">return</span> getDataTable(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了前面的讲解，现在 <a href="mailto:`@ss.hasPermi" target="_blank" rel="noopener">`@ss.hasPermi</a>(‘tienchin:channel:query’)` 应该很好懂了：</p><ul><li>ss 是一个注册在 Spring 容器中的 bean，对应的类位于 <code>org.javaboy.tienchin.framework.web.service.PermissionService</code> 中。</li><li>很明显，hasPermi 就是这个类中的方法。</li></ul><p>这个 hasPermi 方法的逻辑其实很简单：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermi</span><span class="hljs-params">(String permission)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(permission)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LoginUser loginUser = SecurityUtils.getLoginUser();</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.isNull(loginUser) || CollectionUtils.isEmpty(loginUser.getPermissions())) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> hasPermissions(loginUser.getPermissions(), permission);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPermissions</span><span class="hljs-params">(Set&lt;String&gt; permissions, String permission)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> permissions.contains(ALL_PERMISSION) || permissions.contains(StringUtils.trim(permission));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个判断逻辑很简单，就是获取到当前登录的用户，判断当前登录用户的权限集合中是否具备当前请求所需要的权限。具体的判断逻辑没啥好说的，就是看集合中是否存在某个字符串，从判断的逻辑中我们也可以看出来，这个权限也是不支持通配符的。</p><p>不过我还是觉得官方的方案更好一些，接下来在视频中，我会带领小伙伴们对 RuoYi-Vue 脚手架进行一个小改造，把这个按照 Spring Security 官方的思路来定制一下，这个咱们视频中见，对视频感兴趣的小伙伴，戳戳戳这里:<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247497947&amp;idx=1&amp;sn=c6851795e8371739215c877237fa9b6a&amp;chksm=e9c0aabbdeb723adc5fe1e30bda90e5188b49898c6e436416e1c6e90e23f1c937b29366b0b9d#rd" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小伙伴们知道，在 Shiro 中，默认是支持权限通配符的，例如系统用户有如下一些权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;system:user:add&lt;/li&gt;
&lt;li&gt;system:user:delete&lt;/li&gt;
&lt;li&gt;system:user:select&lt;/li&gt;
&lt;li&gt;system:user:update&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>工具类如何获取到 Spring 容器中的 Bean？</title>
    <link href="http://www.javaboy.org/2022/0623/spring-aware.html"/>
    <id>http://www.javaboy.org/2022/0623/spring-aware.html</id>
    <published>2022-06-23T15:19:56.000Z</published>
    <updated>2022-07-19T15:50:05.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Aware-接口"><a href="#1-Aware-接口" class="headerlink" title="1. Aware 接口"></a>1. Aware 接口</h2><p>小伙伴们知道，Spring 容器最大的特点在于所有的 Bean 对于 Spring 容器的存在是没有意识的，因此我们常说理论上你可以无缝将 Spring 容器切换为其他容器（然而在现实世界中，我们其实没有这样的选择，除了 Spring 容器，难道还有更好用的？）。</p><a id="more"></a><p>当然这只是一个理论，在实际开发中，我们往往要用到 Spring 容器为我们提供的诸多资源，例如想要获取到容器中的配置、获取到容器中的 Bean 等等。在这种情况下，就需要 Spring 容器中的 Bean 真正的意识到 Spring 容器的存在，才能要到这些东西，那么如何让一个 Bean 意识到 Spring 容器的存在呢？</p><p>这就依赖于 Spring 容器给我们提供的各种 Aware 接口了。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * A marker superinterface indicating that a bean is eligible to be notified by the</span></span><br><span class="line"><span class="hljs-comment"> * Spring container of a particular framework object through a callback-style method.</span></span><br><span class="line"><span class="hljs-comment"> * The actual method signature is determined by individual subinterfaces but should</span></span><br><span class="line"><span class="hljs-comment"> * typically consist of just one void-returning method that accepts a single argument.</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * &lt;p&gt;Note that merely implementing &#123;<span class="hljs-doctag">@link</span> Aware&#125; provides no default functionality.</span></span><br><span class="line"><span class="hljs-comment"> * Rather, processing must be done explicitly, for example in a</span></span><br><span class="line"><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.beans.factory.config.BeanPostProcessor&#125;.</span></span><br><span class="line"><span class="hljs-comment"> * Refer to &#123;<span class="hljs-doctag">@link</span> org.springframework.context.support.ApplicationContextAwareProcessor&#125;</span></span><br><span class="line"><span class="hljs-comment"> * for an example of processing specific &#123;<span class="hljs-doctag">@code</span> *Aware&#125; interface callbacks.</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Chris Beams</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 3.1</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Aware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个接口的注释中，我们也能大概看出来，这个接口的子类，主要是提供了一些只有一个参数的 set 方法，通过这些方法可以让 Spring 容器感知到某一件事情。</p><p>Aware 的实现有很多，大的方向来说主要有如下一些：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220622075948.png" alt></p><p>每一个 Aware 的作用如下：</p><ul><li>ApplicationEventPublisherAware：实现该接口的对象可以获取事件发布的能力。</li><li>ServletContextAware：实现该接口的对象可以获取到 ServletContext 对象。</li><li>MessageSourceAware：实现该接口的对象可以获取到 MessageSource 对象，MessageSource 支持多消息源，主要用于主要用于国际化。</li><li>ResourceLoaderAware：实现该接口的对象可以获取到一个 ResourceLoader，Spring ResourceLoader 则为我们提供了一个统一的 getResource() 方法来通过资源路径检索外部资源，例如文本文件、XML 文件、属性文件或图像文件等。</li><li>ApplicationStartupAware：实现该接口的对象可以获取到一个 ApplicationStartup 对象，这个比较新，是 Spring 5.3 中新推出的，通过 ApplicationStartup 可以标记应用程序启动期间的步骤，并收集有关执行上下文或其处理时间的数据。</li><li>NotificationPublisherAware：实现该接的对象可以获取到一个 NotificationPublisher 对象，通过该对象可以实现通知的发送。</li><li>EnvironmentAware：实现该接口的对象可以获取到一个 Environment 对象，通过 Environment 可以获取到容器的环境信息。</li><li>BeanFactoryAware：实现该接口的对象可以获取到一个 BeanFactory 对象，通过 BeanFactory 可以完成 Bean 的查询等操作。</li><li>ImportAware：实现该接口的对象可以获取到一个 AnnotationMetadata 对象，ImportAware 接口是需要和 @Import 注解一起使用的。在 @Import 作为元注解使用时，通过 @Import 导入的配置类如果实现了 ImportAware 接口就可以获取到导入该配置类接口的数据配置。</li><li>EmbeddedValueResolverAware：实现该接口的对象可以获取到一个 StringValueResolver 对象，通过 StringValueResolver 对象，可以读取到 Spring 容器中的 properties 配置的值（YAML 配置也可以）。</li><li>ServletConfigAware：实现该接口的对象可以获取到一个 ServletConfig 对象，不过这个似乎没什么用，我们很少自己去配置 ServletConfig。</li><li>LoadTimeWeaverAware：实现该接口的对象可以获取到一个 LoadTimeWeaver 对象，通过该对象可以获取加载 Spring Bean 时织入的第三方模块，如 AspectJ 等。</li><li>BeanClassLoaderAware：实现该接口的对象可以获取到一个 ClassLoader 对象，ClassLoader 能干嘛不需要我多说了吧。</li><li>BeanNameAware：实现该接口的对象可以获取到一个当前 Bean 的名称。</li><li>ApplicationContextAware：实现该接口的对象可以获取到一个 ApplicationContext 对象，通过 ApplicationContext 可以获取容器中的 Bean、环境等信息。</li></ul><p>这是 Spring 中提供的一堆 Aware。</p><p>接下来松哥随便写个例子大家来看下 Aware 的用法。</p><h2 id="2-BeanFactoryAware"><a href="#2-BeanFactoryAware" class="headerlink" title="2. BeanFactoryAware"></a>2. BeanFactoryAware</h2><p>实现该接口的对象可以获取到一个 BeanFactory 对象，通过 BeanFactory 可以完成 Bean 的查询等操作。这算是一个比较常见的 Aware 了，我们一起来看下。</p><p>这里为了省事，我就在 Spring Boot 中来和大家演示。</p><p>首先我们来定义一个简单的 UserService：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"hello javaboy!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后提供一个工具类：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanUtils</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BeanFactory beanFactory = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        BeanUtils.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> (T) beanFactory.getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个工具类，接下来我们就可以在一个非 Spring 管理的 Bean 中，随时随地的查询 Bean 了，像下面这样：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserService userService = BeanUtils.getBean(<span class="hljs-string">"userService"</span>);</span><br><span class="line">userService.hello();</span><br></pre></td></tr></table></figure><h2 id="3-TienChin-项目实践"><a href="#3-TienChin-项目实践" class="headerlink" title="3. TienChin 项目实践"></a>3. TienChin 项目实践</h2><p>为什么会有今天这篇文章呢？主要是在松哥最近做的 TienChin 项目中，有一个地方涉及到这块知识点了，但是有的小伙伴不熟悉，因此就拎出来和大家梳理下。</p><p>在 TienChin 项目中，在记录日志的时候，因为日志是一个延迟任务，所以提前准备好了相关的 Bean 已经注册到 Spring 容器中了，像下面这样：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 执行周期性或定时任务</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Bean</span>(name = <span class="hljs-string">"scheduledExecutorService"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> ScheduledExecutorService <span class="hljs-title">scheduledExecutorService</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize,</span><br><span class="line">                <span class="hljs-keyword">new</span> BasicThreadFactory.Builder().namingPattern(<span class="hljs-string">"schedule-pool-%d"</span>).daemon(<span class="hljs-keyword">true</span>).build(),</span><br><span class="line">                <span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy()) &#123;</span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterExecute</span><span class="hljs-params">(Runnable r, Throwable t)</span> </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">super</span>.afterExecute(r, t);</span><br><span class="line">                Threads.printException(r, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringUtils</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanFactoryPostProcessor</span>, <span class="hljs-title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * Spring应用上下文环境</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        SpringUtils.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        SpringUtils.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获取对象</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Object 一个以所给名字注册的bean的实例</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> org.springframework.beans.BeansException</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> (T) beanFactory.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获取类型为requiredType的对象</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clz</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> org.springframework.beans.BeansException</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(Class&lt;T&gt; clz)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        T result = (T) beanFactory.getBean(clz);</span><br><span class="line">        <span class="hljs-keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而写日志的异步任务工具类，并非一个容器，所以要通过这个工具类获取相应的 Bean，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncManager</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 操作延迟10毫秒</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> OPERATE_DELAY_TIME = <span class="hljs-number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 异步操作任务调度线程池</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-keyword">private</span> ScheduledExecutorService executor = SpringUtils.getBean(<span class="hljs-string">"scheduledExecutorService"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 单例模式</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">AsyncManager</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> AsyncManager me = <span class="hljs-keyword">new</span> AsyncManager();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AsyncManager <span class="hljs-title">me</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> me;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 执行任务</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task 任务</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(TimerTask task)</span> </span>&#123;</span><br><span class="line">        executor.schedule(task, OPERATE_DELAY_TIME, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了 SpringUtils 我们就可以在一个非 Spring 容器所管理的 Bean 中，获取到 Spring 容器中的 Bean 了。</p><p>在 TienChin 项目视频中，我也会和大家详细聊一聊这块，视频戳这里：<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247497947&amp;idx=1&amp;sn=c6851795e8371739215c877237fa9b6a&amp;chksm=e9c0aabbdeb723adc5fe1e30bda90e5188b49898c6e436416e1c6e90e23f1c937b29366b0b9d#rd" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p><p>just this。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Aware-接口&quot;&gt;&lt;a href=&quot;#1-Aware-接口&quot; class=&quot;headerlink&quot; title=&quot;1. Aware 接口&quot;&gt;&lt;/a&gt;1. Aware 接口&lt;/h2&gt;&lt;p&gt;小伙伴们知道，Spring 容器最大的特点在于所有的 Bean 对于 Spring 容器的存在是没有意识的，因此我们常说理论上你可以无缝将 Spring 容器切换为其他容器（然而在现实世界中，我们其实没有这样的选择，除了 Spring 容器，难道还有更好用的？）。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>权限想要细化到按钮，怎么做？</title>
    <link href="http://www.javaboy.org/2022/0620/button-permission.html"/>
    <id>http://www.javaboy.org/2022/0620/button-permission.html</id>
    <published>2022-06-20T15:19:43.000Z</published>
    <updated>2022-07-19T15:50:02.812Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>因为写了不少 Spring Security 文章的缘故，所以总是有小伙伴来问松哥：按钮级别的权限怎么实现？甚至有一些看过 vhr 的小伙伴也问这种问题，其实有的时候搞得我确实挺郁闷的，最近刚好要做 TienChin 项目，我就再把这个问题拎出来和小伙伴们仔细捋一捋。</p><a id="more"></a><h2 id="1-权限颗粒度"><a href="#1-权限颗粒度" class="headerlink" title="1. 权限颗粒度"></a>1. 权限颗粒度</h2><p>首先小伙伴们都知道权限有不同的颗粒度，在 vhr 项目中，整体上我是基于请求地址去处理权限的，这个粒度算粗还是算细呢？</p><p>有的小伙伴们可能认为这个权限粒度太粗，所谓细粒度的权限应该是基于按钮的。</p><p>如果有小伙伴们做过前后端不分的开发，应该会有这样的体会：在 Shiro 或者 Spring Security 框架中，都提供了一些标签，通过这些标签可以做到在满足某种角色或者权限的情况下，显示某个按钮；当用户不具备某种角色或者权限的时候，按钮则会自动隐藏起来。</p><p>但是大家想想，按钮的显示与隐藏不过是前端页面为了提高用户体验而作出的样式的变化而已，本质上，当你点击一个按钮的时候，还是发送了一个 HTTP 请求，那么服务端处理该请求的接口，必须要进行权限控制。既然要在接口上进行权限控制，那么跟 vhr 的区别在哪里呢？</p><p>现在流行前后端分离开发，所以 Shiro 或者 Spring Security 中的那些前端标签现在基本上都不用了，取而代之的做法是用户在登录成功之后，向服务端发送请求，获取当前登录用户的权限以及角色信息，然后根据这些权限、角色等信息，在前端自动的去判断一个菜单或者按钮应该是显示还是隐藏，这么做的目的是为了提高用户体验，避免用户点击一个没有权限的按钮。<strong>前端的显示或者隐藏仅仅只是为了提高用户体验，真正的权限控制还是要后端来做。</strong></p><p>后端可以在接口或者业务层对权限进行处理，具体在哪里做，就要看各自的项目了。</p><p>所以，vhr 中的权限，从设计上来说，粒度并不算粗，也是细粒度的，只不过跟菜单表放在了一起，小伙伴们可能感觉有点粗。但是，菜单表是可以继续细化的，我们可以继续在菜单表中添加新的记录，新记录的 hidden 字段为 true，则菜单是隐藏的，就单纯只是细化权限而已。</p><p>如下图可以继续添加新的访问规则，只不过把 enabled 字段设置为 false 即可（这样菜单就不会显示出来了，单纯就只是权限的配置）。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220613233324.png" alt></p><p>所以 vhr 的权限设计是 OK 的。</p><p>当你理解了 vhr 中的权限设计，再来看 TienChin 这个项目，或者说看 RuoYi-Vue 这个脚手架，就会发现非常 easy 了。</p><h2 id="2-权限表"><a href="#2-权限表" class="headerlink" title="2. 权限表"></a>2. 权限表</h2><p>首先我们来看看资源表的定义，也就是 <code>sys_menu</code>。</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`sys_menu`</span> (</span><br><span class="line">  <span class="hljs-string">`menu_id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单ID'</span>,</span><br><span class="line">  <span class="hljs-string">`menu_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单名称'</span>,</span><br><span class="line">  <span class="hljs-string">`parent_id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'父菜单ID'</span>,</span><br><span class="line">  <span class="hljs-string">`order_num`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'显示顺序'</span>,</span><br><span class="line">  <span class="hljs-string">`path`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'路由地址'</span>,</span><br><span class="line">  <span class="hljs-string">`component`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'组件路径'</span>,</span><br><span class="line">  <span class="hljs-string">`query`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'路由参数'</span>,</span><br><span class="line">  <span class="hljs-string">`is_frame`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'1'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否为外链（0是 1否）'</span>,</span><br><span class="line">  <span class="hljs-string">`is_cache`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'是否缓存（0缓存 1不缓存）'</span>,</span><br><span class="line">  <span class="hljs-string">`menu_type`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单类型（M目录 C菜单 F按钮）'</span>,</span><br><span class="line">  <span class="hljs-string">`visible`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单状态（0显示 1隐藏）'</span>,</span><br><span class="line">  <span class="hljs-string">`status`</span> <span class="hljs-built_in">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单状态（0正常 1停用）'</span>,</span><br><span class="line">  <span class="hljs-string">`perms`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'权限标识'</span>,</span><br><span class="line">  <span class="hljs-string">`icon`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'#'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'菜单图标'</span>,</span><br><span class="line">  <span class="hljs-string">`create_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建者'</span>,</span><br><span class="line">  <span class="hljs-string">`create_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建时间'</span>,</span><br><span class="line">  <span class="hljs-string">`update_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新者'</span>,</span><br><span class="line">  <span class="hljs-string">`update_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新时间'</span>,</span><br><span class="line">  <span class="hljs-string">`remark`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'备注'</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`menu_id`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">3054</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4 <span class="hljs-keyword">COLLATE</span>=utf8mb4_unicode_ci <span class="hljs-keyword">COMMENT</span>=<span class="hljs-string">'菜单权限表'</span>;</span><br></pre></td></tr></table></figure><p>其实这里很多字段都和我们 vhr 项目项目很相似，我也就不重复啰嗦了，我这里主要和小伙伴们说一个字段，那就是 <code>menu_type</code>。</p><p><code>menu_type</code> 表示一个菜单字段的类型，一个菜单有三种类型，分别是目录（M）、菜单（C）以及按钮（F）。这里所说的目录，相当于我们在 vhr 中所说的一级菜单，菜单相当于我们在 vhr 中所说的二级菜单。</p><p>当用户从前端登录成功后，要去动态加载的菜单的时候，就查询 M 和 C 类型的数据即可，F 类型的数据不是菜单项，查询的时候直接过滤掉即可，通过 <code>menu_type</code> 这个字段可以轻松的过滤掉 F 类型的数据。小伙伴们想想，F 类型的数据过滤掉之后，剩下的数据不就是一级菜单和二级菜单了，那不就和 vhr 又一样了么！</p><p>最后再来说说 F 类型的，F 类型的就是按钮级别的权限了，前端每一个按钮的执行，需要哪些权限，现在就在这里定义好。</p><p>举一个简单的例子大家来看下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220614202729.png" alt></p><p>当需要展示<strong>用户管理</strong>这个菜单的时候，需要 <code>system:user:list</code> 这个权限，当需要点击<strong>用户修改</strong>这个按钮的时候，则需要 <code>system:user:edit</code> 这个权限。</p><p>其他相关的表基本上和 vhr 都是一样的，用户有用户表 <code>sys_user</code>，角色有角色表 <code>sys_role</code>，用户和角色关联的表是 <code>sys_user_role</code>，资源和角色关联的表是 <code>sys_role_menu</code>。</p><p>当用户登录成功后，后端会提供一个接口，将当前用户的角色和权限统统返回给前端：</p><ul><li>查询角色思路：根据用户 id，先去 <code>sys_user_role</code> 表中查询到角色 id，再根据角色 id 去 <code>sys_role</code> 表中查询到对应的角色（这里为了方便大家理解这么描述，实际上一个多表联合查询即可）。</li><li>查询权限思路：根据用户 id，先去 <code>sys_user_role</code> 表中查询到角色 id，再根据角色 id 去 <code>sys_role</code> 表中查询到对应的角色，再拿着角色 id 去 <code>sys_role_menu</code> 表中查询到对应的 <code>menu_id</code>，再根据 <code>menu_id</code> 去 <code>sys_menu</code> 表中查询到对应的 menu 中的权限（这里为了方便大家理解这么描述，实际上一个多表联合查询即可）。</li></ul><p>前端有了用户的权限以及角色之后，就可以自行决定是否显示某一个菜单或者是否展示某一个按钮了。</p><h2 id="3-后端权限判断"><a href="#3-后端权限判断" class="headerlink" title="3. 后端权限判断"></a>3. 后端权限判断</h2><p>我先来说说这块 TienChin 项目中是怎么做的（即 RuoYi 脚手架的实现方案），再来和 vhr 进行一个对比。</p><p>在 TienChin 项目中是通过注解来控制权限的，接口的访问权限都是通过注解来标记的，例如下面这种：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('system:menu:add')"</span>)</span><br><span class="line"><span class="hljs-meta">@PostMapping</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">add</span><span class="hljs-params">(@Validated @RequestBody SysMenu menu)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 修改菜单</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('system:menu:edit')"</span>)</span><br><span class="line"><span class="hljs-meta">@PutMapping</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">edit</span><span class="hljs-params">(@Validated @RequestBody SysMenu menu)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 删除菜单</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('system:menu:remove')"</span>)</span><br><span class="line"><span class="hljs-meta">@DeleteMapping</span>(<span class="hljs-string">"/&#123;menuId&#125;"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">remove</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"menuId"</span>)</span> Long menuId) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个接口需要什么权限，都是通过 <code>@PreAuthorize</code> 注解来实现的，关于这个注解的使用原理，松哥之前也有两篇文章：</p><ul><li><a href="https://mp.weixin.qq.com/s/1NlWRwiBs8dl3Lu40haz5Q" target="_blank" rel="noopener">想要控制好权限，这八个注解你必须知道！</a></li><li><a href="https://mp.weixin.qq.com/s/TaPlws-ZLTDUnffuiw-r1Q" target="_blank" rel="noopener">Spring Security 中的权限注解很神奇吗？</a></li></ul><p>看懂了这两篇文章，上面这个注解就懂了，我这里不赘述。</p><p>不过上面这种写法说到底还是有一点“硬编码”，因为访问哪个接口需要哪些权限，在代码中固定了，如果接口和权限直接的关系能够保存到数据库中，那么用户就可以在自己需要的时候，随时进行灵活修改，岂不美哉！</p><p>在 vhr 项目中，松哥利用 Spring Security 中自定义 FilterInvocationSecurityMetadataSource 和 AccessDecisionManager 实现了服务端动态控制权限。这个具体的实现思路之前的文章中也和大家分享过了，传送门：<a href="https://mp.weixin.qq.com/s/Bau8poOA4fMh3DNb9GaR1A" target="_blank" rel="noopener">Spring Security 动态权限实现方案！</a>，这里就不赘述了。</p><p>相对来说，vhr 中的实现方案更灵活一些，因为可以配置接口和权限之间的关系。不过怎么说呢？其实像 RuoYi-Vue 这样硬编码其实也不是不可以，毕竟接口和权限之间的映射关系还是稍显“专业”一些，普通用户可能并不懂该如何配置，这个加入说系统提供了这个功能，那么更多的还是面向程序员这一类专业人员的，那么程序员到底是否需要这个功能呢？我觉得还是得具体情况具体分析。</p><p>总之，小伙伴们可以结合自己项目的实际情况，来决定接口和权限之间的映射关系是否需要动态管理，如果需要动态管理，那么可以按照 vhr 中的方案来，如果不需要动态管理，那么就按照 RuoYi-Vue 脚手架中的方式来就行了。</p><p>好啦，这就是 RuoYi-Vue 这个脚手架中关于权限的设计，现在有一个新的问题摆在面前：如何给用户设置权限的？现在整个系统的权限架构师安排的明明白白的，那么用户的权限又是从何而来的呢？这个我们下篇文章继续拆解。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;因为写了不少 Spring Security 文章的缘故，所以总是有小伙伴来问松哥：按钮级别的权限怎么实现？甚至有一些看过 vhr 的小伙伴也问这种问题，其实有的时候搞得我确实挺郁闷的，最近刚好要做 TienChin 项目，我就再把这个问题拎出来和小伙伴们仔细捋一捋。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security 动态权限实现方案！</title>
    <link href="http://www.javaboy.org/2022/0616/dynamic-permission.html"/>
    <id>http://www.javaboy.org/2022/0616/dynamic-permission.html</id>
    <published>2022-06-16T15:19:30.000Z</published>
    <updated>2022-07-19T15:49:59.753Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>最近在做 TienChin 项目，用的是 RuoYi-Vue 脚手架，在这个脚手架中，访问某个接口需要什么权限，这个是在代码中硬编码的，具体怎么实现的，松哥下篇文章来和大家分析，有的小伙伴可能希望能让这个东西像 vhr 一样，可以在数据库中动态配置，因此这篇文章和小伙伴们简单介绍下 Spring Security 中的动态权限方案，以便于小伙伴们更好的理解 TienChin 项目中的权限方案。</p><a id="more"></a><p><strong>本文节选自松哥之前出版的《深入浅出Spring Security》一书第 13 章，这套动态权限实现方案比 vhr 中的动态权限更优雅一些。</strong></p><h2 id="1-动态管理权限规则"><a href="#1-动态管理权限规则" class="headerlink" title="1. 动态管理权限规则"></a>1. 动态管理权限规则</h2><p>通过代码来配置 URL 拦截规则和请求 URL 所需要的权限，这样就比较死板，如果想要调整访问某一个 URL 所需要的权限，就需要修改代码。</p><p>动态管理权限规则就是我们将 URL 拦截规则和访问 URL 所需要的权限都保存在数据库中，这样，在不改变源代码的情况下，只需要修改数据库中的数据，就可以对权限进行调整。</p><h3 id="1-1-数据库设计"><a href="#1-1-数据库设计" class="headerlink" title="1.1 数据库设计"></a>1.1 数据库设计</h3><p>简单起见，我们这里就不引入权限表了，直接使用角色表，用户和角色关联，角色和资源关联，设计出来的表结构如图 13-9 所示。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220614223648.png" alt="图13-9  一个简单的权限数据库结构"></p><p>menu 表是相当于我们的资源表，它里边保存了访问规则，如图 13-10 所示。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220614223736.png" alt="图13-10  访问规则"></p><p>role 是角色表，里边定义了系统中的角色，如图 13-11 所示。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220614223808.png" alt="图13-11  用户角色表"></p><p>user 是用户表，如图 13-12 所示。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220614223835.png" alt="图13-12  用户表"></p><p>user_role 是用户角色关联表，用户具有哪些角色，可以通过该表体现出来，如图 13-13 所示。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220614223905.png" alt="图13-13  用户角色关联表"></p><p>menu_role 是资源角色关联表，访问某一个资源，需要哪些角色，可以通过该表体现出来，如图 13-14 所示。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220614223946.png" alt="图13-14  资源角色关联表"></p><p>至此，一个简易的权限数据库就设计好了（在本书提供的案例中，有SQL脚本）。</p><h3 id="1-2-实战"><a href="#1-2-实战" class="headerlink" title="1.2 实战"></a>1.2 实战</h3><p><strong>项目创建</strong></p><p>创建 Spring Boot 项目，由于涉及数据库操作，这里选用目前大家使用较多的 MyBatis 框架，所以除了引入 Web、Spring Security 依赖之外，还需要引入 MyBatis 以及 MySQL 依赖。</p><p>最终的 pom.xml 文件内容如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目创建完成后，接下来在 application.properties 中配置数据库连接信息：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line">spring.datasource.url=jdbc:mysql:///security13?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><br></pre></td></tr></table></figure><p>配置完成后，我们的准备工作就算完成了。</p><p><strong>创建实体类</strong></p><p>根据前面设计的数据库，我们需要创建三个实体类。</p><p>首先来创建角色类 Role：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer id;</span><br><span class="line">    <span class="hljs-keyword">private</span> String name;</span><br><span class="line">    <span class="hljs-keyword">private</span> String nameZh;</span><br><span class="line">       <span class="hljs-comment">//省略getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建菜单类 Menu：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Menu</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer id;</span><br><span class="line">    <span class="hljs-keyword">private</span> String pattern;</span><br><span class="line">    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">    <span class="hljs-comment">//省略getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单类中包含一个 roles 属性，表示访问该项资源所需要的角色。</p><p>最后我们创建 User 类：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Integer id;</span><br><span class="line">    <span class="hljs-keyword">private</span> String password;</span><br><span class="line">    <span class="hljs-keyword">private</span> String username;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> enabled;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> locked;</span><br><span class="line">    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> roles.stream()</span><br><span class="line">                        .map(r -&gt; <span class="hljs-keyword">new</span> SimpleGrantedAuthority(r.getName()))</span><br><span class="line">                        .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonExpired</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonLocked</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> !locked;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCredentialsNonExpired</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEnabled</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//省略其他getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于数据库中有 enabled 和 locked 字段，所以 isEnabled() 和 isAccountNonLocked() 两个方法如实返回，其他几个账户状态方法默认返回 true 即可。在 getAuthorities() 方法中，我们对 roles 属性进行遍历，组装出新的集合对象返回即可。</p><p><strong>创建Service</strong></p><p>接下来我们创建 UserService 和 MenuService，并提供相应的查询方法。</p><p>先来看 UserService：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> </span></span><br><span class="line"><span class="hljs-function">                                             <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userMapper.loadUserByUsername(username);</span><br><span class="line">        <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UsernameNotFoundException(<span class="hljs-string">"用户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        user.setRoles(userMapper.getUserRoleByUid(user.getId()));</span><br><span class="line">        <span class="hljs-keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码应该不用多说了，不熟悉的读者可以参考本书 2.4 节。</p><p>对应的 UserMapper 如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Mapper</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function">List&lt;Role&gt; <span class="hljs-title">getUserRoleByUid</span><span class="hljs-params">(Integer uid)</span></span>;</span><br><span class="line">    <span class="hljs-function">User <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper.xml：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"org.javaboy.base_on_url_dy.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loadUserByUsername"</span> </span></span><br><span class="line"><span class="hljs-tag">                         <span class="hljs-attr">resultType</span>=<span class="hljs-string">"org.javaboy.base_on_url_dy.model.User"</span>&gt;</span></span><br><span class="line">        select * from user where username=#&#123;username&#125;;</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserRoleByUid"</span> </span></span><br><span class="line"><span class="hljs-tag">                         <span class="hljs-attr">resultType</span>=<span class="hljs-string">"org.javaboy.base_on_url_dy.model.Role"</span>&gt;</span></span><br><span class="line">        select r.* from role r,user_role ur where ur.uid=#&#123;uid&#125; and ur.rid=r.id</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再来看 MenuService，该类只需要提供一个方法，就是查询出所有的 Menu 数据，代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MenuService</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    MenuMapper menuMapper;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Menu&gt; <span class="hljs-title">getAllMenu</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> menuMapper.getAllMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MenuMapper：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Mapper</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MenuMapper</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function">List&lt;Menu&gt; <span class="hljs-title">getAllMenu</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MenuMapper.xml：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"org.javaboy.base_on_url_dy.mapper.MenuMapper"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"MenuResultMap"</span> </span></span><br><span class="line"><span class="hljs-tag">                                <span class="hljs-attr">type</span>=<span class="hljs-string">"org.javaboy.base_on_url_dy.model.Menu"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"pattern"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"pattern"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"roles"</span> </span></span><br><span class="line"><span class="hljs-tag">                              <span class="hljs-attr">ofType</span>=<span class="hljs-string">"org.javaboy.base_on_url_dy.model.Role"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"rid"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"rname"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>/&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"rnameZh"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"nameZh"</span>/&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getAllMenu"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"MenuResultMap"</span>&gt;</span></span><br><span class="line">        select m.*,r.id as rid,r.name as rname,r.nameZh as rnameZh from menu m left join menu_role mr on m.`id`=mr.`mid` left join role r on r.`id`=mr.`rid`</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意，由于每一个 Menu 对象都包含了一个 Role 集合，所以这个查询是一对多，这里通过 resultMap 来进行查询结果映射。</p><p>至此，所有基础工作都完成了，接下来配置 Spring Security。</p><p><strong>配置Spring Security</strong></p><p>回顾 13.3.6 小节的内容，SecurityMetadataSource 接口负责提供受保护对象所需要的权限。在本案例中，受保护对象所需要的权限保存在数据库中，所以我们可以通过自定义类继承自 FilterInvocationSecurityMetadataSource，并重写 getAttributes 方法来提供受保护对象所需要的权限，代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomSecurityMetadataSource</span> </span></span><br><span class="line"><span class="hljs-class">                         <span class="hljs-keyword">implements</span> <span class="hljs-title">FilterInvocationSecurityMetadataSource</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    MenuService menuService;</span><br><span class="line">    AntPathMatcher antPathMatcher = <span class="hljs-keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="hljs-title">getAttributes</span><span class="hljs-params">(Object object)</span> </span></span><br><span class="line"><span class="hljs-function">                                               <span class="hljs-keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        String requestURI = </span><br><span class="line">                   ((FilterInvocation) object).getRequest().getRequestURI();</span><br><span class="line">        List&lt;Menu&gt; allMenu = menuService.getAllMenu();</span><br><span class="line">        <span class="hljs-keyword">for</span> (Menu menu : allMenu) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (antPathMatcher.match(menu.getPattern(), requestURI)) &#123;</span><br><span class="line">                String[] roles = menu.getRoles().stream()</span><br><span class="line">                               .map(r -&gt; r.getName()).toArray(String[]::<span class="hljs-keyword">new</span>);</span><br><span class="line">                <span class="hljs-keyword">return</span> SecurityConfig.createList(roles);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="hljs-title">getAllConfigAttributes</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> FilterInvocation.class.isAssignableFrom(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义 CustomSecurityMetadataSource 类并实现 FilterInvocationSecurityMetadataSource 接口，然后重写它里边的三个方法：</p><ul><li>getAttributes：该方法的参数是受保护对象，在基于 URL 地址的权限控制中，受保护对象就是 FilterInvocation；该方法的返回值则是访问受保护对象所需要的权限。在该方法里边，我们首先从受保护对象 FilterInvocation 中提取出当前请求的 URL 地址，例如 <code>/admin/hello</code>，然后通过 menuService 对象查询出所有的菜单数据（每条数据中都包含访问该条记录所需要的权限），遍历查询出来的菜单数据，如果当前请求的 URL 地址和菜单中某一条记录的 pattern 属性匹配上了（例如 <code>/admin/hello</code> 匹配上 <code>/admin/**</code>），那么我们就可以获取当前请求所需要的权限。从 menu 对象中获取 roles 属性，并将其转为一个数组，然后通过 <code>SecurityConfig.createList</code> 方法创建一个 <code>Collection&lt;ConfigAttribute&gt;</code> 对象并返回。如果当前请求的 URL 地址和数据库中 menu 表的所有项都匹配不上，那么最终返回 null。如果返回 null，那么受保护对象到底能不能访问呢？这就要看 AbstractSecurityInterceptor 对象中的 rejectPublicInvocations 属性了，该属性默认为 false，表示当 getAttributes 方法返回 null 时，允许访问受保护对象（回顾 13.4.4 小节中关于 <code>AbstractSecurityInterceptor#beforeInvocation</code> 的讲解）。</li><li>getAllConfigAttributes：该方法可以用来返回所有的权限属性，以便在项目启动阶段做校验，如果不需要校验，则直接返回 null 即可。</li><li>supports：该方法表示当前对象支持处理的受保护对象是 FilterInvocation。</li></ul><p><code>CustomSecurityMetadataSource</code> 类配置完成后，接下来我们要用它来代替默认的 <code>SecurityMetadataSource</code> 对象，具体配置如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    CustomSecurityMetadataSource customSecurityMetadataSource;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> </span></span><br><span class="line"><span class="hljs-function">                                                                <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = </span><br><span class="line">                              http.getSharedObject(ApplicationContext.class);</span><br><span class="line">        http.apply(<span class="hljs-keyword">new</span> UrlAuthorizationConfigurer&lt;&gt;(applicationContext))</span><br><span class="line">                .withObjectPostProcessor(<span class="hljs-keyword">new</span> </span><br><span class="line">                           ObjectPostProcessor&lt;FilterSecurityInterceptor&gt;() &#123;</span><br><span class="line">                    <span class="hljs-meta">@Override</span></span><br><span class="line">                    <span class="hljs-keyword">public</span> &lt;O extends FilterSecurityInterceptor&gt; O </span><br><span class="line">                                                            postProcess(O object) &#123;</span><br><span class="line">           object.setSecurityMetadataSource(customSecurityMetadataSource);</span><br><span class="line">                        <span class="hljs-keyword">return</span> object;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于用户的配置无需多说，我们重点来看 configure(HttpSecurity) 方法。</p><p>由于访问路径规则和所需要的权限之间的映射关系已经保存在数据库中，所以我们就没有必要在 Java 代码中配置映射关系了，同时这里的权限对比也不会用到权限表达式，所以我们通过 UrlAuthorizationConfigurer 来进行配置。</p><p>在配置的过程中，通过 withObjectPostProcessor 方法调用 ObjectPostProcessor 对象后置处理器，在对象后置处理器中，将 FilterSecurityInterceptor 中的 SecurityMetadataSource 对象替换为我们自定义的 customSecurityMetadataSource 对象即可。</p><h2 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h2><p>接下来创建 HelloController，代码如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/admin/hello"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">admin</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/user/hello"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">user</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello user"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/guest/hello"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">guest</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello guest"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/hello"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后启动项目进行测试。</p><p>首先使用 <code>admin/123</code> 进行登录，该用户具备 <code>ROLE_ADMIN</code> 角色，<code>ROLE_ADMIN</code> 可以访问 <code>/admin/hello</code>、<code>/user/hello</code> 以及 <code>/guest/hello</code> 三个接口。</p><p>接下来使用 <code>user/123</code> 进行登录，该用户具备 <code>ROLE_USER</code> 角色，<code>ROLE_USER</code> 可以访问 <code>/user/hello</code> 以及 <code>/guest/hello</code> 两个接口。</p><p>最后使用 <code>javaboy/123</code> 进行登录，该用户具备 <code>ROLE_GUEST</code> 角色，<code>ROLE_GUEST</code> 可以访问 <code>/guest/hello</code> 接口。</p><p>由于 <code>/hello</code> 接口不包含在 <code>URL-权限</code> 映射关系中，所以任何用户都可以访问 <code>/hello</code> 接口，包括匿名用户。如果希望所有的 <code>URL</code> 地址都必须在数据库中配置 <code>URL-权限</code> 映射关系后才能访问，那么可以通过如下配置实现：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http.apply(<span class="hljs-keyword">new</span> UrlAuthorizationConfigurer&lt;&gt;(applicationContext))</span><br><span class="line">        .withObjectPostProcessor(<span class="hljs-keyword">new</span>  </span><br><span class="line">                           ObjectPostProcessor&lt;FilterSecurityInterceptor&gt;() &#123;</span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-keyword">public</span> &lt;O extends FilterSecurityInterceptor&gt; O </span><br><span class="line">                                                           postProcess(O object) &#123;   </span><br><span class="line">           object.setSecurityMetadataSource(customSecurityMetadataSource);</span><br><span class="line">                object.setRejectPublicInvocations(<span class="hljs-keyword">true</span>);</span><br><span class="line">                <span class="hljs-keyword">return</span> object;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>通过设置 FilterSecurityInterceptor 中的 rejectPublicInvocations 属性为 true，就可以关闭URL的公开访问，所有 URL 必须具备对应的权限才能访问。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;最近在做 TienChin 项目，用的是 RuoYi-Vue 脚手架，在这个脚手架中，访问某个接口需要什么权限，这个是在代码中硬编码的，具体怎么实现的，松哥下篇文章来和大家分析，有的小伙伴可能希望能让这个东西像 vhr 一样，可以在数据库中动态配置，因此这篇文章和小伙伴们简单介绍下 Spring Security 中的动态权限方案，以便于小伙伴们更好的理解 TienChin 项目中的权限方案。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>记录项目日志，一个注解搞定</title>
    <link href="http://www.javaboy.org/2022/0614/log.html"/>
    <id>http://www.javaboy.org/2022/0614/log.html</id>
    <published>2022-06-14T15:19:14.000Z</published>
    <updated>2022-07-19T15:49:55.542Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间做了一个支线任务，现在还是回到我们的主线上面来，继续完成 TienChin 项目。</p><a id="more"></a><p>小伙伴们知道松哥最近在录制 TienChin 项目视频教程，这是一个基于 RuoYi-Vue 脚手架的项目，用过这个脚手架的小伙伴可能知道，这个脚手架有一个功能，就是如果你需要记录下来一个接口的操作信息，那么只需要在 Controller 接口中加上一个 <code>@Log</code> 注解即可，非常方便，最终记录到数据库中的日志类似下面这样：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220613205838.png" alt></p><p>可能有小伙伴要吐槽了，这不该记录到 Elasticsearch 中吗？上 ELK 啊！怎么说呢，如果你会将日志存入数据库，那么将来存 Elasticsearch 其实非常 Easy，结合松哥之前录制的 Es 视频（公号后台回复 es），我相信这个问题你能自己搞定。</p><p>今天我们主要来分析一下这个脚手架中 <code>@Log</code> 注解的玩法。</p><h2 id="1-日志表设计"><a href="#1-日志表设计" class="headerlink" title="1. 日志表设计"></a>1. 日志表设计</h2><p>先来看看日志表的设计。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `sys_oper_log` (</span><br><span class="line">  `oper_id` bigint(<span class="hljs-number">20</span>) NOT NULL AUTO_INCREMENT COMMENT <span class="hljs-string">'日志主键'</span>,</span><br><span class="line">  `title` varchar(<span class="hljs-number">50</span>) COLLATE utf8mb4_unicode_ci DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'模块标题'</span>,</span><br><span class="line">  `business_type` <span class="hljs-keyword">int</span>(<span class="hljs-number">2</span>) DEFAULT <span class="hljs-string">'0'</span> COMMENT <span class="hljs-string">'业务类型（0其它 1新增 2修改 3删除）'</span>,</span><br><span class="line">  `method` varchar(<span class="hljs-number">100</span>) COLLATE utf8mb4_unicode_ci DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'方法名称'</span>,</span><br><span class="line">  `request_method` varchar(<span class="hljs-number">10</span>) COLLATE utf8mb4_unicode_ci DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'请求方式'</span>,</span><br><span class="line">  `operator_type` <span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>) DEFAULT <span class="hljs-string">'0'</span> COMMENT <span class="hljs-string">'操作类别（0其它 1后台用户 2手机端用户）'</span>,</span><br><span class="line">  `oper_name` varchar(<span class="hljs-number">50</span>) COLLATE utf8mb4_unicode_ci DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'操作人员'</span>,</span><br><span class="line">  `dept_name` varchar(<span class="hljs-number">50</span>) COLLATE utf8mb4_unicode_ci DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'部门名称'</span>,</span><br><span class="line">  `oper_url` varchar(<span class="hljs-number">255</span>) COLLATE utf8mb4_unicode_ci DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'请求URL'</span>,</span><br><span class="line">  `oper_ip` varchar(<span class="hljs-number">128</span>) COLLATE utf8mb4_unicode_ci DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'主机地址'</span>,</span><br><span class="line">  `oper_location` varchar(<span class="hljs-number">255</span>) COLLATE utf8mb4_unicode_ci DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'操作地点'</span>,</span><br><span class="line">  `oper_param` varchar(<span class="hljs-number">2000</span>) COLLATE utf8mb4_unicode_ci DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'请求参数'</span>,</span><br><span class="line">  `json_result` varchar(<span class="hljs-number">2000</span>) COLLATE utf8mb4_unicode_ci DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'返回参数'</span>,</span><br><span class="line">  `status` <span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>) DEFAULT <span class="hljs-string">'0'</span> COMMENT <span class="hljs-string">'操作状态（0正常 1异常）'</span>,</span><br><span class="line">  `error_msg` varchar(<span class="hljs-number">2000</span>) COLLATE utf8mb4_unicode_ci DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'错误消息'</span>,</span><br><span class="line">  `oper_time` datetime DEFAULT NULL COMMENT <span class="hljs-string">'操作时间'</span>,</span><br><span class="line">  <span class="hljs-function">PRIMARY <span class="hljs-title">KEY</span> <span class="hljs-params">(`oper_id`)</span></span></span><br><span class="line"><span class="hljs-function">) ENGINE</span>=InnoDB AUTO_INCREMENT=<span class="hljs-number">280</span> DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=<span class="hljs-string">'操作日志记录'</span>;</span><br></pre></td></tr></table></figure><p>这里各个字段的含义我来解释下：</p><ul><li>oper_id：这是日志主键，自增的。</li><li>title：这个标题，一般就是用来说明这个操作是干嘛的，例如删除一个用户、添加一条线索等待。</li><li>business_type：这个是指业务类型，一般来说有：添加、修改、删除、导入、导出等等。</li><li>method：执行的接口方法名称。</li><li>request_method：这个是指请求的方法类型，如 GET、POST、PUT、DELETE 等。</li><li>operator_type：这个是指操作类别，分为三种：后台用户、手机用户以及其他。</li><li>oper_name：操作人员的名称。</li><li>dept_name：操作人员所属的部门。</li><li>oper_url：请求的 URL 地址。</li><li>oper_ip：请求的 IP 地址。</li><li>oper_location：请求 IP 地址所属的区域。</li><li>oper_param：请求的参数。</li><li>json_result：响应的 JSON 参数。</li><li>status：操作的状态，成功还是失败。</li><li>error_msg：如果是失败，失败的内容是什么。</li><li>oper_time：操作的时间。</li></ul><p>这里给出来的就这些字段，基本上满足项目需求了，如果不够的话，也可以自定添加即可。</p><h2 id="2-注解的定义"><a href="#2-注解的定义" class="headerlink" title="2. 注解的定义"></a>2. 注解的定义</h2><p>再来看看 @Log 注解的定义，该注解位于 <code>org.javaboy.tienchin.common.annotation.Log</code>：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Target</span>(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span><br><span class="line"><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="hljs-meta">@Documented</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 模块</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">title</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 功能</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> BusinessType <span class="hljs-title">businessType</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> BusinessType.OTHER</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 操作人类别</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> OperatorType <span class="hljs-title">operatorType</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> OperatorType.MANAGE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 是否保存请求的参数</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSaveRequestData</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 是否保存响应的参数</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSaveResponseData</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个注解一共有五个属性，结合上面表的定义，五个属性含义很好理解，不多说。</p><h2 id="3-注解的解析"><a href="#3-注解的解析" class="headerlink" title="3. 注解的解析"></a>3. 注解的解析</h2><p>经典搭配：自定义注解+ AOP 切面。解析该注解的 AOP 切面是 LogAspect，位于 <code>org.javaboy.tienchin.framework.aspectj.LogAspect</code>：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Aspect</span></span><br><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 处理完请求后执行</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint 切点</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@AfterReturning</span>(pointcut = <span class="hljs-string">"@annotation(controllerLog)"</span>, returning = <span class="hljs-string">"jsonResult"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAfterReturning</span><span class="hljs-params">(JoinPoint joinPoint, Log controllerLog, Object jsonResult)</span> </span>&#123;</span><br><span class="line">        handleLog(joinPoint, controllerLog, <span class="hljs-keyword">null</span>, jsonResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 拦截异常操作</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint 切点</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e         异常</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@AfterThrowing</span>(value = <span class="hljs-string">"@annotation(controllerLog)"</span>, throwing = <span class="hljs-string">"e"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAfterThrowing</span><span class="hljs-params">(JoinPoint joinPoint, Log controllerLog, Exception e)</span> </span>&#123;</span><br><span class="line">        handleLog(joinPoint, controllerLog, e, <span class="hljs-keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleLog</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JoinPoint joinPoint, Log controllerLog, <span class="hljs-keyword">final</span> Exception e, Object jsonResult)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// 获取当前的用户</span></span><br><span class="line">            LoginUser loginUser = SecurityUtils.getLoginUser();</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">// *========数据库日志=========*//</span></span><br><span class="line">            SysOperLog operLog = <span class="hljs-keyword">new</span> SysOperLog();</span><br><span class="line">            operLog.setStatus(BusinessStatus.SUCCESS.ordinal());</span><br><span class="line">            <span class="hljs-comment">// 请求的地址</span></span><br><span class="line">            String ip = IpUtils.getIpAddr(ServletUtils.getRequest());</span><br><span class="line">            operLog.setOperIp(ip);</span><br><span class="line">            operLog.setOperUrl(ServletUtils.getRequest().getRequestURI());</span><br><span class="line">            <span class="hljs-keyword">if</span> (loginUser != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                operLog.setOperName(loginUser.getUsername());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                operLog.setStatus(BusinessStatus.FAIL.ordinal());</span><br><span class="line">                operLog.setErrorMsg(StringUtils.substring(e.getMessage(), <span class="hljs-number">0</span>, <span class="hljs-number">2000</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">// 设置方法名称</span></span><br><span class="line">            String className = joinPoint.getTarget().getClass().getName();</span><br><span class="line">            String methodName = joinPoint.getSignature().getName();</span><br><span class="line">            operLog.setMethod(className + <span class="hljs-string">"."</span> + methodName + <span class="hljs-string">"()"</span>);</span><br><span class="line">            <span class="hljs-comment">// 设置请求方式</span></span><br><span class="line">            operLog.setRequestMethod(ServletUtils.getRequest().getMethod());</span><br><span class="line">            <span class="hljs-comment">// 处理设置注解上的参数</span></span><br><span class="line">            getControllerMethodDescription(joinPoint, controllerLog, operLog, jsonResult);</span><br><span class="line">            <span class="hljs-comment">// 保存数据库</span></span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordOper(operLog));</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Exception exp) &#123;</span><br><span class="line">            <span class="hljs-comment">// 记录本地异常日志</span></span><br><span class="line">            log.error(<span class="hljs-string">"==前置通知异常=="</span>);</span><br><span class="line">            log.error(<span class="hljs-string">"异常信息:&#123;&#125;"</span>, exp.getMessage());</span><br><span class="line">            exp.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获取注解中对方法的描述信息 用于Controller层注解</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> log     日志</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> operLog 操作日志</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getControllerMethodDescription</span><span class="hljs-params">(JoinPoint joinPoint, Log log, SysOperLog operLog, Object jsonResult)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// 设置action动作</span></span><br><span class="line">        operLog.setBusinessType(log.businessType().ordinal());</span><br><span class="line">        <span class="hljs-comment">// 设置标题</span></span><br><span class="line">        operLog.setTitle(log.title());</span><br><span class="line">        <span class="hljs-comment">// 设置操作人类别</span></span><br><span class="line">        operLog.setOperatorType(log.operatorType().ordinal());</span><br><span class="line">        <span class="hljs-comment">// 是否需要保存request，参数和值</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (log.isSaveRequestData()) &#123;</span><br><span class="line">            <span class="hljs-comment">// 获取参数的信息，传入到数据库中。</span></span><br><span class="line">            setRequestValue(joinPoint, operLog);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// 是否需要保存response，参数和值</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (log.isSaveResponseData() &amp;&amp; StringUtils.isNotNull(jsonResult)) &#123;</span><br><span class="line">            operLog.setJsonResult(StringUtils.substring(JSON.toJSONString(jsonResult), <span class="hljs-number">0</span>, <span class="hljs-number">2000</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 获取请求的参数，放到log中</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> operLog 操作日志</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRequestValue</span><span class="hljs-params">(JoinPoint joinPoint, SysOperLog operLog)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String requestMethod = operLog.getRequestMethod();</span><br><span class="line">        <span class="hljs-keyword">if</span> (HttpMethod.PUT.name().equals(requestMethod) || HttpMethod.POST.name().equals(requestMethod)) &#123;</span><br><span class="line">            String params = argsArrayToString(joinPoint.getArgs());</span><br><span class="line">            operLog.setOperParam(StringUtils.substring(params, <span class="hljs-number">0</span>, <span class="hljs-number">2000</span>));</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            Map&lt;?, ?&gt; paramsMap = (Map&lt;?, ?&gt;) ServletUtils.getRequest().getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);</span><br><span class="line">            operLog.setOperParam(StringUtils.substring(paramsMap.toString(), <span class="hljs-number">0</span>, <span class="hljs-number">2000</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 参数拼装</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">argsArrayToString</span><span class="hljs-params">(Object[] paramsArray)</span> </span>&#123;</span><br><span class="line">        String params = <span class="hljs-string">""</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (paramsArray != <span class="hljs-keyword">null</span> &amp;&amp; paramsArray.length &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span> (Object o : paramsArray) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (StringUtils.isNotNull(o) &amp;&amp; !isFilterObject(o)) &#123;</span><br><span class="line">                    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                        Object jsonObj = JSON.toJSON(o);</span><br><span class="line">                        params += jsonObj.toString() + <span class="hljs-string">" "</span>;</span><br><span class="line">                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> params.trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 判断是否需要过滤的对象。</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> o 对象信息。</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果是需要过滤的对象，则返回true；否则返回false。</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFilterObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object o)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = o.getClass();</span><br><span class="line">        <span class="hljs-keyword">if</span> (clazz.isArray()) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> clazz.getComponentType().isAssignableFrom(MultipartFile.class);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Collection.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            Collection collection = (Collection) o;</span><br><span class="line">            <span class="hljs-keyword">for</span> (Object value : collection) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> value <span class="hljs-keyword">instanceof</span> MultipartFile;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            Map map = (Map) o;</span><br><span class="line">            <span class="hljs-keyword">for</span> (Object value : map.entrySet()) &#123;</span><br><span class="line">                Map.Entry entry = (Map.Entry) value;</span><br><span class="line">                <span class="hljs-keyword">return</span> entry.getValue() <span class="hljs-keyword">instanceof</span> MultipartFile;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> o <span class="hljs-keyword">instanceof</span> MultipartFile || o <span class="hljs-keyword">instanceof</span> HttpServletRequest || o <span class="hljs-keyword">instanceof</span> HttpServletResponse</span><br><span class="line">                || o <span class="hljs-keyword">instanceof</span> BindingResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概跟小伙伴们捋一下这个切面的逻辑。</p><ol><li>首先定义了两种不同类型的通知：<strong>返回通知和异常通知</strong>，正常流程就是在返回通知中处理日志写入操作，但是如果系统不幸抛出异常，就在异常通知中处理日志写入操作（此时就多了一个异常对象）。</li><li>日志数据保存在 SysOperLog 对象中，采集各种日志数据都是常规操作，不多说。</li><li>当收集接口参数的时候，有两个需要注意的地方：1.如果请求类型是 PUT 或者 POST，就直接从接口的参数中获取想要的数据，但是接口的参数中可能会存在一些并不需要记录的内容，例如 HttpServletRequest、HttpServletResponse 或者文件上传对象 MultipartFile 等，这些类型的内容是不需要记录到日志中的，这里通过一个 isFilterObject 方法完成了数据过滤操作；2. 如果请求类型是 GET 或者 DELETE，则请求参数就直接从请求对象提取了。为什么设计成这样呢？很明显，直接从请求对象中提取参数是最为方便的，一行代码就搞定，但是如果请求类型是 PUT 或者 POST，就意味着请求参数是在请求体中，请求参数有可能是二进制数据（例如上传的文件），二进制数据就不好保存了，所以对于 POST 和 PUT 还是从接口参数中提取，然后过滤掉二进制数据即可。</li><li>数据收集齐了，接下来就是往数据库中写入了。因为我们现在用的 SpringMVC 这一套是线程阻塞的，也就是得等到服务端都处理完毕之后，接口才会给客户端响应，而写日志是一个业务无关的操作，所以可以直接放在一个子线程中去完成。在 RuoYi-Vue 脚手架中，使用了 Java JUC 中的 ScheduledExecutorService 去完成这个延时任务，<code>AsyncManager.me().execute</code> 方法实际上就是去执行一个延时任务，这个延时任务就是一个往数据库中写入一条记录。</li></ol><h2 id="4-记录日志"><a href="#4-记录日志" class="headerlink" title="4. 记录日志"></a>4. 记录日志</h2><p>弄好之后，日志注解具体用法如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Log</span>(title = <span class="hljs-string">"参数管理"</span>, businessType = BusinessType.EXPORT)</span><br><span class="line"><span class="hljs-meta">@PreAuthorize</span>(<span class="hljs-string">"@ss.hasPermi('system:config:export')"</span>)</span><br><span class="line"><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/export"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">export</span><span class="hljs-params">(HttpServletResponse response, SysConfig config)</span> </span>&#123;</span><br><span class="line">    List&lt;SysConfig&gt; list = configService.selectConfigList(config);</span><br><span class="line">    ExcelUtil&lt;SysConfig&gt; util = <span class="hljs-keyword">new</span> ExcelUtil&lt;SysConfig&gt;(SysConfig.class);</span><br><span class="line">    util.exportExcel(response, list, <span class="hljs-string">"参数数据"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好啦，这就是整体操作，实际上看起来并不难，后面要是有空的话，松哥把这个日志整成一个 ELK 的，和小伙伴们一起探讨。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间做了一个支线任务，现在还是回到我们的主线上面来，继续完成 TienChin 项目。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务处理方案大 PK！</title>
    <link href="http://www.javaboy.org/2022/0613/distributed-transaction.html"/>
    <id>http://www.javaboy.org/2022/0613/distributed-transaction.html</id>
    <published>2022-06-13T15:18:57.000Z</published>
    <updated>2022-07-19T15:49:52.449Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>说好了写 TienChin 项目的，最近这个分布式事务算是一个支线任务吧，今天是最后一篇，松哥再来一个短篇和小伙伴们总结一下分布式事务。</p><a id="more"></a><p>首先先说一个大原则：分布式事务能不用就不要用，毕竟这个用起来还是有一些麻烦的。当然，不用和不会用可是两码事。</p><h2 id="1-分布式事务基础理论"><a href="#1-分布式事务基础理论" class="headerlink" title="1. 分布式事务基础理论"></a>1. 分布式事务基础理论</h2><p>学习分布式事务，有一些基础理论需要我们先来了解下。</p><h3 id="1-1-本地事务"><a href="#1-1-本地事务" class="headerlink" title="1.1 本地事务"></a>1.1 本地事务</h3><p>本地事务是指将多条语句作为一个整体进行操作的功能，通过数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败，如果事务失败，那么效果就和没有执行这些SQL一样，不会对数据库数据有任何改动。也就是事务具有原子性，一个事务中的一系列操作要么全部成功，要么全部失败。一般来说，事务具有 4 个属性：</p><ul><li>Atomic：原子性，将一个事务中的所有 SQL 作为原子工作单元执行，要么全部执行，要么全部不执行；</li><li>Consistent：一致性，事务完成后，所有数据的状态都是一致的，以银行转帐为例，如果 A 账户减去了 100，则 B 账户则必定加上了 100；</li><li>Isolation：隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离；</li><li>Duration：持久性，即事务完成后，对数据库数据的修改被持久化存储。</li></ul><p>这四个属性通常称为 ACID 特性。</p><p>这块松哥之前专门录过相关的视频，这里就不再赘述了。</p><ul><li><a href="https://www.bilibili.com/video/BV1Eq4y1R7Ds" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Eq4y1R7Ds</a></li></ul><h3 id="1-2-分布式事务"><a href="#1-2-分布式事务" class="headerlink" title="1.2 分布式事务"></a>1.2 分布式事务</h3><p>当我们的项目上了微服务之后，分布式事务就是一个比较常见的问题了，我们也会遇到很多相关的场景。</p><p>就拿我们前两天讲的商品下单的分布式事务的案例来说，像下面这样，一共有五个服务，架构如下图：</p><p><img src="http://img.itboyhub.com/2021/07/20210810204721.png" alt></p><ul><li>eureka：这是服务注册中心。</li><li>account：这是账户服务，可以查询/修改用户的账户信息（主要是账户余额）。</li><li>order：这是订单服务，可以下订单。</li><li>storage：这是一个仓储服务，可以查询/修改商品的库存数量。</li><li>bussiness：这是业务，用户下单操作将在这里完成。</li></ul><p><strong>当用户想要下单的时候，调用了 bussiness 中的接口，bussiness 中的接口又调用了它自己的 service，在 service 中，通过 feign 调用 storage 中的接口去扣库存，然后再通过 feign 调用 order 中的接口去创建订单（order 在创建订单的时候，不仅会创建订单，还会扣除用户账户的余额）。</strong></p><p>这三个操作，我们希望他们能够同时成功或者同时失败。然而如上图所示，三个微服务都有自己的 DB，这是三个完全不同的 DB，相当于三个不同的本地事务，按照传统的本地事务规则，我们显然是无法实现三个操作同时成功或者同时失败的。</p><p>想要实现 storage、order 以及 account 中的操作同时成功或者同时失败，就得考虑分布式事务了。</p><p>最后，我们再来看看分布式事务的概念：分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于的不同节点之上，数据库的操作执行成功与否，不仅取决于本地 DB 的执行结果，也取决于第三方系统的执行结果。而分布式事务就保证这些操作要么全部成功，要么全部失败。<strong>本质上，分布式事务就是为了保证不同数据库的数据一致性。</strong></p><h3 id="1-3-CAP"><a href="#1-3-CAP" class="headerlink" title="1.3 CAP"></a>1.3 CAP</h3><p>CAP 定理（CAP theorem），有时候又被称作布鲁尔定理（Brewer’s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：</p><ol><li>一致性（Consistency）：在分布式系统中的所有数据备份，在同一时刻是否具备同样的值。（等同于所有节点访问同一份最新的数据副本）。</li><li>可用性（Availability）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）。</li><li>分区容错性（Partition tolerance）：这个我觉得可能对有的小伙伴来说有点难以理解，我就简单说一下，先来说分区：因为我们是分布式系统，分布式系统中不同的微服务位于不同的网络节点上，当发生网络故障或者节点故障的时候，不同的服务之间就无法通信了，也就是说发生了分区；再来看分区容错性：这是说，当我们的系统中出现分区的时候，系统还要能运行，不能罢工！一般来说，在一个分布式系统中，分区发生的概率还是比较大的，不会发生分区的系统，那就不是分布式系统了，而是单体应用了。</li></ol><p>CAP 原则的精髓就是要么 AP，要么 CP，要么 AC，但是不存在 CAP。因为在分布式系统内，P 是必然的发生的，不选 P，一旦发生分区，整个分布式系统就完全无法使用了，这样的系统就太脆弱了。所以对于分布式系统，我们只能能考虑当发生分区错误时，如何选择一致性和可用性（选择一致性，意味着服务在某段时间内不可用，选择了可用性，意味着服务虽然一直可用但是返回的数据却不一致）。</p><p>而根据一致性和可用性的选择不同，开源的分布式系统往往又被分为 CP 系统和 AP 系统。</p><p>当一套系统在发生分区故障后，客户端的任何请求都被卡死或者超时，但是系统的每个节点总是会返回一致的数据，则这套系统就是 CP 系统，经典的比如 Zookeeper。</p><p>如果一套系统发生分区故障后，客户端依然可以访问系统，但是获取的数据有的是新的数据，有的还是老数据，那么这套系统就是 AP 系统，经典的比如 Eureka。</p><h3 id="1-4-BASE"><a href="#1-4-BASE" class="headerlink" title="1.4 BASE"></a>1.4 BASE</h3><p>因为无法同时满足 CAP，所以又有了 BASE 理论，BASE 理论指的是：</p><ol><li>基本可用 Basically Available：分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。</li><li>软状态 Soft State：允许系统存在中间状态，而该中间状态不会影响系统整体可用性。</li><li>终一致性 Eventual Consistency：系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。</li></ol><p>BASE 理论的核心思想是即便无法做到强一致性，但应该采用适合的方式保证最终一致性。</p><p>BASE 理论本质上是对 CAP 理论的延伸，是对 CAP 中 AP 方案的一个补充。</p><h3 id="1-5-刚柔并济"><a href="#1-5-刚柔并济" class="headerlink" title="1.5 刚柔并济"></a>1.5 刚柔并济</h3><p>事务有刚性事务和柔性事务之分。</p><p><strong>刚性事务</strong>（如单数据库中的本地事务）完全遵循 ACID 规范，即数据库事务正确执行的四个基本要素：</p><ul><li>原子性（Atomicity）</li><li>一致性（Consistency）</li><li>隔离性（Isolation）</li><li>持久性（Durability）</li></ul><p><strong>柔性事务</strong>，主要就是只分布式事务了，柔性事务为了满足可用性、性能与降级服务的需要，降低一致性（Consistency）与隔离性（Isolation）的要求，遵守 BASE 理论：</p><ul><li>基本业务可用性（Basic Availability）</li><li>柔性状态（Soft state）</li><li>最终一致性（Eventual consistency）</li></ul><p>当然，柔性事务也部分遵循 ACID 规范：</p><ul><li>原子性：严格遵循</li><li>一致性：事务完成后的一致性严格遵循；事务中的一致性可适当放宽</li><li>隔离性：并行事务间不可影响；事务中间结果可见性允许安全放宽</li><li>持久性：严格遵循</li></ul><p>柔性事务有不同的分类，不过基本上都可以看作是分布式事务的解决方案：</p><ul><li>两阶段型：分布式事务二阶段提交，对应技术上的 XA、JTA/JTS，这是分布式环境下事务处理的典型模式。</li><li>补偿型：我们之前文章介绍的 TCC，就算是一种补偿型事务，在 Try 成功的情况下，如果事务要回滚，Cancel 将作为一个补偿机制，回滚 Try 操作；TCC 各操作事务本地化，且尽早提交（没有两阶段约束）；当全局事务要求回滚时，通过另一个本地事务实现“补偿”行为。 TCC 是将资源层的二阶段提交协议转换到业务层，成为业务模型中的一部分。</li><li>异步确保型：将一些有同步冲突的事务操作变为异步操作，避免对数据库事务的争用，如消息事务机制。</li><li>最大努力通知型：通过通知服务器（消息通知）进行，允许失败，有补充机制。</li></ul><h2 id="2-分布式事务实践"><a href="#2-分布式事务实践" class="headerlink" title="2. 分布式事务实践"></a>2. 分布式事务实践</h2><h3 id="2-1-XA"><a href="#2-1-XA" class="headerlink" title="2.1 XA"></a>2.1 XA</h3><p>先来说说 XA。</p><p>XA 是一种典型的两阶段提交（2PC，Two-phase commit protocol），而两阶段提交是一种强一致性设计，在两阶段提交中，一般会引入一个事务协调者的角色来协调管理各个事务参与者，例如我们之前文章中使用的 seata-server 其实是就是一个事务协调者。所谓的两阶段分别指的是准备和提交两个阶段。</p><p>XA 规范 是 X/Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准。</p><p>XA 规范描述了全局的事务管理器与局部的资源管理器之间的接口。 XA规范的目的是允许多个资源（如数据库，应用服务器，消息队列等）在同一事务中访问，这样可以使 <strong>ACID</strong> 属性跨越应用程序而保持有效。</p><p>XA 规范使用两阶段提交来保证所有资源同时提交或回滚任何特定的事务。</p><p>XA 规范在上世纪 90 年代初就被提出。目前，几乎所有主流的数据库如 MySQL、Oracle、MSSQL 等都对 XA 规范提供了支持。</p><p>XA 事务的基础是两阶段提交协议。需要有一个事务协调者来保证所有的事务参与者都完成了准备工作(第一阶段)。如果协调者收到所有参与者都准备好的消息，就会通知所有的事务都可以提交了（第二阶段）。MySQL 在这个 XA 事务中扮演的是参与者的角色，而不是协调者(事务管理器)。</p><p>MySQL 的 XA 事务分为内部 XA 和外部 XA。外部 XA 可以参与到外部的分布式事务中，需要应用层介入作为协调者；内部 XA 事务用于同一实例下跨多引擎事务，由 Binlog 作为协调者，比如在一个存储引擎提交时，需要将提交信息写入二进制日志，这就是一个分布式内部 XA 事务，只不过二进制日志的参与者是 MySQL 本身。 MySQL 在 XA 事务中扮演的是一个参与者的角色，而不是协调者。</p><p>XA 事务的特点是：</p><ul><li>简单易理解，开发较容易。</li><li>对资源进行了长时间的锁定，并发度低。</li></ul><h3 id="2-2-3PC"><a href="#2-2-3PC" class="headerlink" title="2.2 3PC"></a>2.2 3PC</h3><p>3PC 主要是为了弥补 2PC 的不足而产生的，2PC 有哪些不足呢？</p><ol><li>同步阻塞：2PC 在执行过程中，所有参与节点（也就是一个分支事务）都是事务阻塞型的，当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态，也就是在 2PC 执行的过程中，资源是被锁住的。</li><li>单点故障：在 2PC 中，事务协调者扮演了举足轻重的作用，由于事务协调者的重要性，一旦事务协调者发生故障，事务的参与者就会一直阻塞下去。尤其是在第二阶段，如果协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。还有一个问题，就是当事务协调者发出 commit 指令之前，如果宕机了，此时虽然可以重新选举一个新的协调者出来，但是还是无法解决因为事务协调者宕机导致的事务参与者处于阻塞状态的问题。</li></ol><p>3PC 则尝试解决 2PC 的这些问题。3PC 主要是把 2PC 中的第一阶段再次一分为二，这样 3PC 就有 CanCommit、PreCommit 以及 DoCommit 三个不同的阶段。不过 3PC 并不能解决 2PC 的所有问题，3PC 主要解决了单点故障问题，并且减少了阻塞。一旦事务参与者（分支事务）无法及时收到来自事务协调者的信息，那么分支事务会默认执行 commit，而不会一直持有事务资源并处于阻塞状态，不过这种机制也带来了新的问题，假设事务协调者发送了 abort 指令给各个分支事务，然而由于网络问题导致分支事务没有及时接收到该指令，那么分支事务在等待超时之后执行了 commit 操作，这样就和其他接到 abort 命令并执行回滚的分支事务之间存在数据不一致的情况。</p><p>我们来看看 3PC 的流程：</p><ol><li>CanCommit 阶段：这个阶段所做的事很简单，就是事务协调者询问各个分支事务，你是否有能力完成此次事务？如果都返回 yes，则进入第二阶段；有一个返回 no 或等待响应超时，则中断事务，并向所有分支事务发送 abort 请求。</li><li>PreCommit 阶段：此时事务协调者会向所有的分支事务发送 PreCommit 请求，分支事务收到后开始执行事务操作，并将 Undo 和 Redo 信息记录到事务日志中。分支执行完事务操作后(此时属于未提交事务的状态)，就会向事务协调者反馈“Ack”表示我已经准备好提交了，并等待协调者的下一步指令。</li><li>DoCommit 阶段：在阶段二中如果所有的分支事务节点都可以进行 PreCommit 提交，那么事务协调者就会从“预提交状态”转变为“提交状态”，然后向所有的分支事务节点发送”doCommit”请求，分支事务节点在收到提交请求后就会各自执行事务提交操作，并向协调者节点反馈“Ack”消息，协调者收到所有参与者的 Ack 消息后完成事务。</li></ol><p>相反，如果有一个分支事务节点未完成 PreCommit 的反馈或者反馈超时，那么协调者都会向所有的参与者节点发送 abort 请求，从而中断事务。</p><h3 id="2-3-TCC"><a href="#2-3-TCC" class="headerlink" title="2.3 TCC"></a>2.3 TCC</h3><p>关于 TCC（Try-Confirm-Cancel）的概念，最早是由 Pat Helland 于 2007 年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出。</p><p>TCC 模式主要有如下一些优缺点：</p><p><strong>优点：</strong></p><ol><li>性能提升：通过具体业务来实现控制资源锁的粒度变小，不会锁定整个资源。</li><li>数据最终一致性：基于 Confirm 和 Cancel 的幂等性，保证事务最终完成确认或者取消，保证数据的一致性。</li><li>可靠性：解决了 XA 协议的协调者单点故障问题，由主业务方发起并控制整个业务活动，业务活动管理器也变成多点，引入集群。</li></ol><p><strong>缺点：</strong></p><ol><li>对微服务的侵入性强，微服务的每个事务都必须实现 try，confirm，cancel 等 3 个方法，开发成本高，今后维护改造的成本也高。</li><li>为了达到事务的一致性要求，try，confirm、cancel 接口必须实现等幂性操作，这在一定程度上增加了开发工作量。</li></ol><p>TCC 主要是两个阶段，步骤如下：</p><ol><li>Try 阶段（一阶段）：尝试执行，完成所有业务检查（一致性）, 预留必须业务资源（准隔离性）。</li><li>Confirm 阶段（二阶段）：确认执行真正执行业务，不作任何业务检查，只使用 Try 阶段预留的业务资源，Confirm 操作满足需要满足幂等性，Confirm 执行失败后需要进行重试。</li><li>Cancel 阶段：取消执行，释放 Try 阶段预留的业务资源，Cancel 操作也需要满足幂等性。Cancel 阶段的异常和 Confirm 阶段异常处理方案基本上一致。</li></ol><p>在我们之前的文章中，松哥也给大家举了 TCC 的例子了，这里就不再赘述了。</p><h3 id="2-4-SAGA"><a href="#2-4-SAGA" class="headerlink" title="2.4 SAGA"></a>2.4 SAGA</h3><p>SAGA 最初出现在 1987 年 Hector Garcaa-Molrna &amp; Kenneth Salem 发表的论文 SAGAS 里。这篇论文的核心思想是将长事务拆分为多个短事务，由 Saga 事务协调器协调，如果每个短事务都成功提交完成，那么全局事务就正常完成，如果某个步骤失败，则根据相反顺序一次调用补偿操作。</p><p>Saga 事务的特点是：</p><ol><li>并发度高，不用像 XA 事务那样长期锁定资源。</li><li>需要定义正常操作以及补偿操作（回滚），开发量工作量比 XA 大。</li><li>一致性较弱，对于转账，可能发生 A 用户已扣款，最后转账又失败的情况</li></ol><p>SAGA 适用的场景较多，适用于长事务或者对中间结果不敏感的业务场景。</p><h3 id="2-5-本地消息表"><a href="#2-5-本地消息表" class="headerlink" title="2.5 本地消息表"></a>2.5 本地消息表</h3><p>本地消息表这个方案最初是 ebay 架构师 Dan Pritchett 在 2008 年发表给 ACM 的文章中提出。</p><p>顾名思义，本地消息表就是会有一张存放本地消息的表，一般都是放在数据库中，然后在执行业务的时候将业务的执行和将消息放入消息表中的操作放在同一个事务中，这样就能保证消息放入本地表以及业务肯定是一起执行成功的。</p><p>当一个操作执行成功之后，再去执行下一个操作，如果下一个操作调用成功了好说，消息表的消息状态可以直接改为已成功；如果下一个任务调用失败也没关系，会有后台任务定时去读取本地消息表，筛选出还未成功的消息再调用对应的服务（重试），服务更新成功了再变更消息的状态。</p><p>重试就得保证对应服务的方法是幂等的，而且一般重试会有最大次数，超过最大次数可以记录下报警让人工处理。</p><p>根据上面的描述，小伙伴们其实可以看到，本地消息表其实实现的是最终一致性，容忍了数据暂时不一致的情况。</p><p>本地消息表的特点：</p><ul><li>长事务仅需要分拆成多个任务，使用简单。</li><li>生产者需要额外的创建消息表。</li><li>每个本地消息表都需要进行轮询（如果有失败的要重试）。</li><li>消费者的逻辑如果无法通过重试成功，那么还需要更多的机制，来回滚操作。</li></ul><p>根据本地消息表的特点我们可以发现，本地消息表适用于可异步执行且后续操作无需回滚的业务。</p><h3 id="2-6-消息事务"><a href="#2-6-消息事务" class="headerlink" title="2.6 消息事务"></a>2.6 消息事务</h3><p>这种方案的核心思路，其实就是通过消息中间件来将全局事务转为本地事务，通过消息中间件来确保各个分支事务最终都能调用成功。</p><p>松哥之前写过一篇文章是利用 RabbitMQ 实现的：</p><ul><li><a href="https://mp.weixin.qq.com/s/jcavJfjseBvaETAuTPnRqw" target="_blank" rel="noopener">利用 RabbitMQ 处理分布式事务</a></li></ul><p>不过后来发现利用 Alibaba 的 RocketMQ（4.3之后）可以更好的实现分布式事务。</p><p>RocketMQ 是一种最终一致性的分布式事务，就是说它保证的是消息最终一致性，而不是像 2PC、3PC、TCC 那样强一致分布式事务，在 RocketMQ 中有一种消息叫做 Half Message，Half Message 是指暂不能被 Consumer 消费的消息，虽然 Producer 已经把消息成功发送到了 Broker 端，但此消息被标记为暂不能投递状态，处于该种状态下的消息称为半消息，此时需要 Producer 对消息进行二次确认后，Consumer 才能去消费它。</p><p>RocketMQ 就是基于 Half Message 来实现的分布式事务，举一个转账的例子：</p><ol><li>A 服务先发送个 Half Message 给 Brock 端，消息中携带 B 服务即将要 +100 元的信息。</li><li>当 A 服务知道 Half Message 发送成功后，那么开始本地事务。</li><li>执行本地事务(会有三种情况1、执行成功；2、执行失败；3、网络等原因导致没有响应)<br> 3.1 如果本地事务成功，那么 A 向 Broker 服务器发送 Commit,这样 B 服务就可以消费该 message。<br> 3.2 如果本地事务失败，那么 A 向 Broker 服务器发送 Rollback，那么就会直接删除上面这条半消息。<br> 3.3 如果由于网络或者生产者应用重启等原因。导致 A 一直没有对 Half Message 进行二次确认，此时 Broker 服务器会定时扫描长期处于半消息的消息，会主动询问 A 端该消息的最终状态(Commit 或者 Rollback)，这个操作也就是所谓的消息回查。</li></ol><p>可能有小伙伴会说，那要是 B 最终执行失败怎么办？对于这种情况，我们几乎可以断定就是代码有问题所以才引起异常，因为消费端 RocketMQ 有重试机制，如果不是代码问题一般重试几次就能成功。</p><p>如果是代码的原因引起多次重试失败后，也没有关系，将该异常记录下来，由人工处理，人工兜底处理后，就可以让事务达到最终的一致性。</p><h3 id="2-7-最大努力通知"><a href="#2-7-最大努力通知" class="headerlink" title="2.7 最大努力通知"></a>2.7 最大努力通知</h3><p>发起通知方通过一定的机制最大努力将业务处理结果通知到接收方。具体包括：</p><ol><li>有一定的消息重试机制。因为接收通知方可能没有接收到通知，此时要有一定的机制对消息进行重试。</li><li>消息校对机制。如果尽最大努力也没有通知到接收方，或者接收方消费消息后要再次消费，此时可由接收方主动向通知方查询消息信息来满足需求。 </li></ol><p>在前面两个小节介绍的的本地消息表和事务消息都属于可靠消息，这与我们这里介绍的最大努力通知有什么不同？</p><ul><li>可靠消息一致性：消息发起方需要保证将消息发出去，并且将消息发到接收方，消息的可靠性关键由发起方来保证。</li><li>最大努力通知：消息发起方尽最大努力将业务处理结果通知给接收方，但是可能消息接收不到，此时需要接收方主动调用发起方的接口查询业务处理结果，此时消息的可靠性关键在接收方。</li></ul><p>仅此而已。</p><p>在具体的解决方案上，最大努力通知需要消息发起方提供接口，让被通知方能够通过接口查询业务处理结果。</p><p>最大努力通知适用于业务通知类型，最常见的场景就是支付回调，支付服务收到第三方服务支付成功通知后，先更新自己库中订单支付状态，然后同步通知订单服务支付成功。如果此次同步通知失败，会通过异步脚步不断重试地调用订单服务的接口。</p><p>最大努力通知更多是业务上的设计，在基础设施层，可以直接使用二阶段消息，或者事务消息、本地消息表等来实现。</p><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><p>好啦，学习分布式事务解决方案，最大的感受就是：<strong>没有银弹！</strong></p><p>前面的文章松哥也和大家聊了很多实际的解决方案，也录制了相应的分布式事务视频在 TienChin 项目中，欢迎一起探讨。</p><p>参考资料：</p><ol><li><a href="https://help.aliyun.com/document_detail/132895.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/132895.html</a></li><li><a href="https://cloud.tencent.com/developer/article/1860632" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1860632</a></li><li><a href="https://zh.m.wikipedia.org/zh-hans/CAP%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">https://zh.m.wikipedia.org/zh-hans/CAP%E5%AE%9A%E7%90%86</a></li><li><a href="https://zhuanlan.zhihu.com/p/35616811" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35616811</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;说好了写 TienChin 项目的，最近这个分布式事务算是一个支线任务吧，今天是最后一篇，松哥再来一个短篇和小伙伴们总结一下分布式事务。&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务，原理简单，写起来全是坑！</title>
    <link href="http://www.javaboy.org/2022/0610/seata-xa.html"/>
    <id>http://www.javaboy.org/2022/0610/seata-xa.html</id>
    <published>2022-06-10T15:18:45.000Z</published>
    <updated>2022-07-19T15:49:48.929Z</updated>
    
    <content type="html"><![CDATA[<p>分布式事务，我们已经给小伙伴介绍了整体内容：</p><a id="more"></a><ul><li><a href="https://mp.weixin.qq.com/s/6DOtO5OQyCL8bR03Z-3q9A" target="_blank" rel="noopener">一文搞明白分布式事务解决方案！真的 so easy！</a></li></ul><p>AT 模式的实现：</p><ul><li><a href="https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA" target="_blank" rel="noopener">手把手带领小伙伴们写一个分布式事务案例！</a></li></ul><p>AT 模式在多数据源中的应用：</p><ul><li><a href="https://mp.weixin.qq.com/s/NbnCiRwRFUZGym5vDxOoPQ" target="_blank" rel="noopener">Spring Boot 多数据源如何处理事务？教你一招！</a></li></ul><p>TCC 模式的实现：</p><ul><li><a href="https://mp.weixin.qq.com/s/EQuVJGFi6SEj3Qj2FS-uSg" target="_blank" rel="noopener">听说 TCC 不支持 OpenFeign？这个坑松哥必须给大家填了！</a></li></ul><p>今天我们就一起来看下另一种模式，XA 模式！</p><p>其实我觉得 seata 中的四种不同的分布式事务模式，学完 AT、TCC 以及 XA 就够了，Saga 不好玩，而且长事务本身就有很多问题，也不推荐使用。</p><p>Seata 中的 XA 模式实际上是基于 MySQL 的 XA 两阶段提交发展出来的，所以学习 XA 模式，需要小伙伴们先理解 MySQL 中的 XA 是怎么一回事，把 MySQL 中的 XA 搞清楚了，再来学习 Seata 中的 XA 模式就容易的多了。</p><h2 id="1-什么是-XA-规范"><a href="#1-什么是-XA-规范" class="headerlink" title="1. 什么是 XA 规范"></a>1. 什么是 XA 规范</h2><h3 id="1-1-什么是两阶段提交"><a href="#1-1-什么是两阶段提交" class="headerlink" title="1.1 什么是两阶段提交"></a>1.1 什么是两阶段提交</h3><p>我们先来稍微回顾一下两阶段提交。</p><p>先来看下面一张图：</p><p><img src="http://img.itboyhub.com/2021/07/20210818233345.png" alt></p><p>这张图里涉及到三个概念：</p><ul><li>AP：这个不用多说，AP 就是应用程序本身。</li><li>RM：RM 是资源管理器，也就是事务的参与者，大部分情况下就是指数据库，一个分布式事务往往涉及到多个 RM。</li><li>TM：TM 就是事务管理器，创建分布式事务并协调分布式事务中的各个子事务的执行和状态，子事务就是指在 RM 上执行的具体操作。</li></ul><p>那么什么是两阶段(Two-Phase Commit, 简称 2PC)提交？</p><p>两阶段提交说白了道理很简单，松哥举个简单例子来和大家说明两阶段提交：</p><p>比如下面一张图：</p><p><img src="http://img.itboyhub.com/2021/07/20210810204721.png" alt></p><p>我们在 Business 中分别调用 Storage 与 Order、Account，这三个中的操作要同时成功或者同时失败，但是由于这三个分处于不同服务，因此我们只能先让这三个服务中的操作各自执行，三个服务中的事务各自执行就是两阶段中的第一阶段。</p><p>第一阶段执行完毕后，先不要急着提交，因为三个服务中有的可能执行失败了，此时需要三个服务各自把自己一阶段的执行结果报告给一个事务协调者（也就是前面文章中的 Seata Server），事务协调者收到消息后，如果三个服务的一阶段都执行成功了，此时就通知三个事务分别提交，如果三个服务中有服务执行失败了，此时就通知三个事务分别回滚。</p><p>这就是所谓的两阶段提交。</p><p>总结一下：两阶段提交中，事务分为参与者（例如上图的各个具体服务）与协调者（上文案例中的 Seata Server），参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是要提交操作还是中止操作，这里的参与者可以理解为 RM，协调者可以理解为 TM。</p><p>不过 Seata 中的各个分布式事务模式，基本都是在二阶段提交的基础上演化出来的，因此并不完全一样，这点需要小伙伴们注意。</p><h3 id="1-2-什么是-XA-规范"><a href="#1-2-什么是-XA-规范" class="headerlink" title="1.2 什么是 XA 规范"></a>1.2 什么是 XA 规范</h3><p>XA 规范 是 X/Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准。</p><p>XA 规范描述了全局的事务管理器与局部的资源管理器之间的接口。 XA规范的目的是允许多个资源（如数据库，应用服务器，消息队列等）在同一事务中访问，这样可以使 <strong>ACID</strong> 属性跨越应用程序而保持有效。</p><p>XA 规范使用两阶段提交来保证所有资源同时提交或回滚任何特定的事务。</p><p>XA 规范在上世纪 90 年代初就被提出。目前，几乎所有主流的数据库都对 XA 规范提供了支持。</p><p>XA 事务的基础是两阶段提交协议。需要有一个事务协调者来保证所有的事务参与者都完成了准备工作(第一阶段)。如果协调者收到所有参与者都准备好的消息，就会通知所有的事务都可以提交了（第二阶段）。MySQL 在这个 XA 事务中扮演的是参与者的角色，而不是协调者(事务管理器)。</p><p>MySQL 的 XA 事务分为内部 XA 和外部 XA。外部 XA 可以参与到外部的分布式事务中，需要应用层介入作为协调者；内部 XA 事务用于同一实例下跨多引擎事务，由 Binlog 作为协调者，比如在一个存储引擎提交时，需要将提交信息写入二进制日志，这就是一个分布式内部 XA 事务，只不过二进制日志的参与者是 MySQL 本身。 MySQL 在 XA 事务中扮演的是一个参与者的角色，而不是协调者。</p><h2 id="2-MySQL-中的-XA"><a href="#2-MySQL-中的-XA" class="headerlink" title="2. MySQL 中的 XA"></a>2. MySQL 中的 XA</h2><p>接下来松哥通过一个简单的例子先给大家看下 MySQL 中的 XA 是怎么玩的。</p><h3 id="2-1-两阶段事务提交"><a href="#2-1-两阶段事务提交" class="headerlink" title="2.1 两阶段事务提交"></a>2.1 两阶段事务提交</h3><p>比如说转账操作，我用 MySQL 中的 XA 事务来和大家演示一下从一个账户中转出 10 块钱：</p><p><img src="http://img.itboyhub.com/2021/07/20210818220555.png" alt></p><p>上面这段事务提交是一个两阶段事务提交的案例。</p><p>具体执行步骤如下：</p><ol><li><code>XA START &quot;transfer_money&quot;</code>：这个表示开启一个 XA 事务，后面的字符串是事务的 xid，这是一个唯一字符串，开启之后，事务的状态变为 <code>ACTIVE</code>。</li><li><code>update account set amount=amount-10 where account_no=&#39;A&#39;</code>; 这个表示执行具体的 SQL。</li><li><code>XA END &quot;transfer_money&quot;</code>：这个表示结束一个 XA 事务，此时事务的状态转为 <code>IDLE</code>。</li><li><code>XA PREPARE &quot;transfer_money&quot;</code>：这个将事务置为 PREPARE 状态。</li><li><code>XA COMMIT &quot;transfer_money&quot;</code>：这个用来提交事务，提交之后，事务的状态就是 COMMITED。</li></ol><p>最后一步，可以通过 <code>XA COMMIT</code> 来提交，也可以通过 <code>XA ROLLBACK</code> 来回滚，回滚后事务的状态就是 ROLLBACK。</p><p><strong>另外第四步可以省略，即一个 IDLE 状态的 XA 事务可以直接提交或者回滚。</strong></p><p>我们来看下面一张流程图：</p><p><img src="http://img.itboyhub.com/2021/07/20210818230349.png" alt></p><p>从这张图里我们可以看出，事务可以一步提交，也可以两阶段提交，都是支持的。如果是两阶段提交，prepare 之后，其实是在等其他的资源管理器（RM）反馈结果。</p><h3 id="2-2-事务直接提交"><a href="#2-2-事务直接提交" class="headerlink" title="2.2 事务直接提交"></a>2.2 事务直接提交</h3><p>松哥再给大家演示一下事务一步提交：</p><p><img src="http://img.itboyhub.com/2021/07/20210818232232.png" alt></p><p>这个就比较简单，没啥好说的。</p><p>这块再跟大家介绍另外一个 XA 事务相关的命令 <code>XA RECOVER</code>，如下图：</p><p><img src="http://img.itboyhub.com/2021/07/20210818232537.png" alt></p><p><code>XA RECOVER</code> 可以列出所有处于 PREPARE 状态的 XA 事务，其他状态的事务则都不会列出来，如上图。</p><h3 id="2-3-事务回滚"><a href="#2-3-事务回滚" class="headerlink" title="2.3 事务回滚"></a>2.3 事务回滚</h3><p>再举一个事务回滚的例子：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220606211935.png" alt></p><p>小伙伴们看到，<code>xa recover</code> 可以查看处于 prepare 状态的事务，事务回滚有三个参数：第一个参数，是以 gtrid_length 为依据，从 data 字符串上截取下来的值；第二个参数，是第一个从 data 上截取下来值之后，data 剩余的值，在本案例中，第一次被截取之后，就不剩了，所以第二个参数是一个空字符串；第三个参数是 formatID 的值。</p><p>回滚之后，再执行 <code>xa recover</code> 就看不到东西了。</p><h3 id="2-4-小结"><a href="#2-4-小结" class="headerlink" title="2.4 小结"></a>2.4 小结</h3><p>在用一个客户端环境下，XA 事务和本地(非 XA )事务互相排斥，如果已经通过 XA START 来开启一个事务，则本地事务不会被启动，直到 XA 事务被提交或者被回滚为止。</p><p>相反的，如果已经使用 START TRANSACTION 启动一个本地事务，则 XA 语句不能被使用，直到该事务被提交或者回滚为止，而且 XA 事务仅仅被 InnoDB 存储引擎支持。</p><h2 id="3-Seata-中的-XA"><a href="#3-Seata-中的-XA" class="headerlink" title="3. Seata 中的 XA"></a>3. Seata 中的 XA</h2><h3 id="3-1-Seata-中的-XA-模式"><a href="#3-1-Seata-中的-XA-模式" class="headerlink" title="3.1 Seata 中的 XA 模式"></a>3.1 Seata 中的 XA 模式</h3><p>我们先来看一点理论知识，3.3 小节我们再来看代码实践。</p><p>通过上面的介绍，大家已经知道了 MySQL 中的 XA 事务是怎么回事了，Seata 中的 XA 模式其实就是在 MySQL 中 XA 模式的基础上实现的。Seata 中的 XA 模式就是在 Seata 定义的分布式事务框架内，利用事务资源（数据库、消息服务等）对 XA 协议的支持，以 XA 协议的机制来管理分支事务的一种事务模式。</p><p>我们来看下面一张图：</p><p><img src="http://img.itboyhub.com/2021/07/20210819231216.png" alt></p><p>我来大概说一下这个执行步骤：</p><ol><li>首先由 TM 开启全局分布式事务。</li><li>各个业务 SQL 分别放在不同的 XA 分支中进行，具体执行的流程就是 <code>XA Start</code>-&gt;<code>业务 SQL</code>-&gt;<code>XA End</code>，这个流程跟我 2.1 小节和大家演示的 MySQL 中 XA 事务的流程是一致的。</li><li>分支中的 XA 事务执行完成后，执行 <code>XA prepare</code>，并将自己执行的状态报告给 TC。</li><li>其他的分支事务均按照 2、3 步骤来执行。</li><li>当所有分支事务都执行完毕后，TC 也收到了各个分支事务报告上来的执行状态，如果所有状态都 OK，则 TC 通知所有 RM 执行 <code>XA Commit</code> 完成事务的最终提交，否则 TC 通知所有 RM 执行 <code>XA Rollback</code> 进行事务回滚。</li></ol><p>这就是 Seata 中的 XA 模式！只要小伙伴们理解了 2.2 小节中 MySQL 的 XA 模式，那么 Seata 中的 XA 模式就很好理解了。</p><h3 id="3-2-特色"><a href="#3-2-特色" class="headerlink" title="3.2 特色"></a>3.2 特色</h3><p>前面小伙伴们已经学会了 AT 和 TCC 两种不同的分布式事务模式了，现在再加入一个 XA，我们再来把这三个放在一起比较下。</p><ol><li>AT 和 TCC 都是通过反向补偿将数据复原的，也就是说，通过一条更新语句将数据复原；XA 因为是 MySQL 自己的功能，所以不是反向补偿，而是正儿八经的回滚（处于 prepare 状态的数据并没有 commit，将来在二阶段可以选择 commit 或者 rollback）。</li><li>AT 和 XA 模式是无侵入的分布式事务解决方案，适用于不希望对业务进行改造的场景，几乎0学习成本；TCC 则有一定的代码侵入。</li><li>AT 和 XA 都是一种全自动的，无论是提交呀，回滚呀（无论是真回滚还是反向补偿），都是全自动的，就是开发者基本上不需要额外做什么事情；TCC 则是一种手动的分布式事务，一阶段的 prepare、二阶段的 commit 或者 rollback，所有逻辑都是开发者自己写的。</li><li>松哥发前面文章的时候，有小伙伴提到分布式事务的一致性问题，XA 模式是分布式强一致性的解决方案，但是因为性能低而导致使用较少。</li></ol><p>好啦，比较完啦，那就上代码吧！</p><h3 id="3-3-代码实践"><a href="#3-3-代码实践" class="headerlink" title="3.3 代码实践"></a>3.3 代码实践</h3><p>小伙伴们只需要搞明白前面的 AT 模式后，XA 模式其实跟 AT 模式差不多！就是替换一下数据源即可！话是这么说，不过真做起来，还是有很多坑，我们一起来看下。</p><p>为了方便大家理解，本文我就不重新搞案例了，咱们还用<a href="https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA" target="_blank" rel="noopener">上篇文章</a>那个下订单的案例来演示。</p><p>这是一个商品下单的案例，一共有五个服务，我来和大家稍微解释下：</p><ul><li>eureka：这是服务注册中心。</li><li>account：这是账户服务，可以查询/修改用户的账户信息（主要是账户余额）。</li><li>order：这是订单服务，可以下订单。</li><li>storage：这是一个仓储服务，可以查询/修改商品的库存数量。</li><li>bussiness：这是业务，用户下单操作将在这里完成。</li></ul><p>这个案例讲了一个什么事呢？</p><p><strong>当用户想要下单的时候，调用了 bussiness 中的接口，bussiness 中的接口又调用了它自己的 service，在 service 中，首先开启了全局分布式事务，然后通过 feign 调用 storage 中的接口去扣库存，然后再通过 feign 调用 order 中的接口去创建订单（order 在创建订单的时候，不仅会创建订单，还会扣除用户账户的余额），在这个过程中，如果有任何一个环节出错了（余额不足、库存不足等导致的问题），就会触发整体的事务回滚。</strong></p><p>本案例具体架构如下图：</p><p><img src="http://img.itboyhub.com/2021/07/20210810204721.png" alt></p><p>这个案例就是一个典型的分布式事务问题，storage、order 以及 account 中的事务分属于不同的微服务，但是我们希望他们同时成功或者同时失败。</p><p>这个案例的基本架构我这里就不重复搭建了，小伙伴们可以参考<a href="https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA" target="_blank" rel="noopener">上篇文章</a>，这里我们主要来看 XA 事务如何添加进来。</p><h4 id="3-3-1-数据库配置"><a href="#3-3-1-数据库配置" class="headerlink" title="3.3.1 数据库配置"></a>3.3.1 数据库配置</h4><p>由于 XA 模式利用的是 MySQL 自身对 XA 规范的实现，所以 XA 机制实际上是不需要 undo_log 表的，<strong>小伙伴们可以把你 AT 模式中的 undo_log 表删除啦～</strong> 如果删除后运行 Java 程序报错，那说明你的 XA 模式使用的不地道！注意看松哥后面的讲解哦。</p><p>接下来我就来说几个要点。</p><ol><li>数据库驱动</li></ol><p>这是一个坑。松哥经过反复测试，seata 中的 XA 模式和最新版的 MySQL 驱动不兼容，运行时候会有错误，经过测试，MySQL 8.0.11 这个版本的驱动是没问题的，所以在 account、storage 以及 order 三个需要数据库调用的服务上，记得修改一下数据库驱动依赖的版本号：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>druid 依赖</li></ol><p>有的小伙伴们看到这里用到了阿里的 Druid 数据库连接池，就赶紧加入这个依赖！殊不知，这又掉入版本兼容的坑了，<code>spring-cloud-starter-alibaba-seata</code> 依赖中实际上包含了 druid 依赖，而且版本号是没有问题的！所以小伙伴们千万别自己手动加 druid 依赖，可能会因为版本号问题掉坑。</p><ol start="3"><li>关掉数据源代码</li></ol><p>接下来就是关闭掉 seata 数据源代理了，account、storage 以及 order 里边都改一下，加入如下配置：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seata.enable-auto-data-source-proxy=false</span><br></pre></td></tr></table></figure><ol start="4"><li>配置自定义数据源</li></ol><p>接下来就是配置自定义数据源了，account、order 以及 storage 都要配置，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"spring.datasource"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title">druidDataSource</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span>(<span class="hljs-string">"dataSourceProxy"</span>)</span><br><span class="line">    <span class="hljs-meta">@Primary</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">dataSource</span><span class="hljs-params">(DruidDataSource druidDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DataSourceProxyXA(druidDataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSourceProxy)</span><span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="hljs-keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sqlSessionFactoryBean.setTransactionFactory(<span class="hljs-keyword">new</span> SpringManagedTransactionFactory());</span><br><span class="line">        <span class="hljs-keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先配置 DruidDataSource，但这不是我们最终目的，最终目的是配置 DataSourceProxyXA，看名字就知道，这就会把事务切换为 XA 模式，最后，还需要基于 DataSourceProxyXA 来配置一下 MyBatis，都是常规操作，不多说。</p><p>好啦，就这样，我们的 seata XA 模式就配置好啦～其他的代码都和 AT 模式一样，不再赘述。</p><p>感兴趣的小伙伴可以赶紧尝试一下哦～本文也有配套视频，戳这里：<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247497947&amp;idx=1&amp;sn=c6851795e8371739215c877237fa9b6a&amp;chksm=e9c0aabbdeb723adc5fe1e30bda90e5188b49898c6e436416e1c6e90e23f1c937b29366b0b9d#rd" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式事务，我们已经给小伙伴介绍了整体内容：&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>进入 SpringBoot2.7，有一个重要的类过期了</title>
    <link href="http://www.javaboy.org/2022/0607/spring-security-config.html"/>
    <id>http://www.javaboy.org/2022/0607/spring-security-config.html</id>
    <published>2022-06-07T15:18:30.000Z</published>
    <updated>2022-07-19T15:49:42.338Z</updated>
    
    <content type="html"><![CDATA[<p>今天来聊一个简单的话题～是一个小伙伴在星球上的提问。</p><p>进入到 SpringBoot2.7 时代，有小伙伴发现有一个常用的类忽然过期了：</p><a id="more"></a><p><img src="http://img.itboyhub.com/2021/10/tran/20220605122037.png" alt></p><p>在 Spring Security 时代，这个类可太重要了。过期的类当然可以继续使用，但是你要是决定别扭，只需要稍微看一下注释，基本上就明白该怎么玩了。</p><p>我们来看下 WebSecurityConfigurerAdapter 的注释：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220605122356.png" alt></p><p>从这段注释中我们大概就明白了咋回事了。</p><p>以前我们自定义类继承自 WebSecurityConfigurerAdapter 来配置我们的 Spring Security，我们主要是配置两个东西：</p><ul><li>configure(HttpSecurity)</li><li>configure(WebSecurity)</li></ul><p>前者主要是配置 Spring Security 中的过滤器链，后者则主要是配置一些路径放行规则。</p><p>现在在 WebSecurityConfigurerAdapter 的注释中，人家已经把意思说的很明白了：</p><ol><li>以后如果想要配置过滤器链，可以通过自定义 SecurityFilterChain Bean 来实现。</li><li>以后如果想要配置 WebSecurity，可以通过 WebSecurityCustomizer Bean 来实现。</li></ol><p>那么接下来我们就通过一个简单的例子来看下。</p><p>首先我们新建一个 Spring Boot 工程，引入 Web 和 Spring Security 依赖，注意 Spring Boot 选择最新的 2.7。</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220605131034.png" alt></p><p>接下来我们提供一个简单的测试接口，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/hello"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello 江南一点雨!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小伙伴们知道，在 Spring Security 中，默认情况下，只要添加了依赖，我们项目的所有接口就已经被统统保护起来了，现在启动项目，访问 <code>/hello</code> 接口，就需要登录之后才可以访问，登录的用户名是 user，密码则是随机生成的，在项目的启动日志中。</p><p>现在我们的第一个需求是使用自定义的用户，而不是系统默认提供的，这个简单，我们只需要向 Spring 容器中注册一个 UserDetailsService 的实例即可，像下面这样：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">UserDetailsService <span class="hljs-title">userDetailsService</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager users = <span class="hljs-keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        users.createUser(User.withUsername(<span class="hljs-string">"javaboy"</span>).password(<span class="hljs-string">"&#123;noop&#125;123"</span>).roles(<span class="hljs-string">"admin"</span>).build());</span><br><span class="line">        users.createUser(User.withUsername(<span class="hljs-string">"江南一点雨"</span>).password(<span class="hljs-string">"&#123;noop&#125;123"</span>).roles(<span class="hljs-string">"admin"</span>).build());</span><br><span class="line">        <span class="hljs-keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就可以了。</p><p>当然我现在的用户是存在内存中的，如果你的用户是存在数据库中，那么只需要提供 UserDetailsService 接口的实现类并注入 Spring 容器即可，这个之前在 vhr 视频中讲过多次了（公号后台回复 666 有视频介绍），这里就不再赘述了。</p><p>但是假如说我希望 <code>/hello</code> 这个接口能够匿名访问，并且我希望这个匿名访问还不经过 Spring Security 过滤器链，要是在以前，我们可以重写 <code>configure(WebSecurity)</code> 方法进行配置，但是现在，得换一种玩法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">UserDetailsService <span class="hljs-title">userDetailsService</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager users = <span class="hljs-keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        users.createUser(User.withUsername(<span class="hljs-string">"javaboy"</span>).password(<span class="hljs-string">"&#123;noop&#125;123"</span>).roles(<span class="hljs-string">"admin"</span>).build());</span><br><span class="line">        users.createUser(User.withUsername(<span class="hljs-string">"江南一点雨"</span>).password(<span class="hljs-string">"&#123;noop&#125;123"</span>).roles(<span class="hljs-string">"admin"</span>).build());</span><br><span class="line">        <span class="hljs-keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">WebSecurityCustomizer <span class="hljs-title">webSecurityCustomizer</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WebSecurityCustomizer() &#123;</span><br><span class="line">            <span class="hljs-meta">@Override</span></span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">customize</span><span class="hljs-params">(WebSecurity web)</span> </span>&#123;</span><br><span class="line">                web.ignoring().antMatchers(<span class="hljs-string">"/hello"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以前位于 <code>configure(WebSecurity)</code> 方法中的内容，现在位于 WebSecurityCustomizer Bean 中，该配置的东西写在这里就可以了。</p><p>那如果我还希望对登录页面，参数等，进行定制呢？继续往下看：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">UserDetailsService <span class="hljs-title">userDetailsService</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager users = <span class="hljs-keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        users.createUser(User.withUsername(<span class="hljs-string">"javaboy"</span>).password(<span class="hljs-string">"&#123;noop&#125;123"</span>).roles(<span class="hljs-string">"admin"</span>).build());</span><br><span class="line">        users.createUser(User.withUsername(<span class="hljs-string">"江南一点雨"</span>).password(<span class="hljs-string">"&#123;noop&#125;123"</span>).roles(<span class="hljs-string">"admin"</span>).build());</span><br><span class="line">        <span class="hljs-keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">SecurityFilterChain <span class="hljs-title">securityFilterChain</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultSecurityFilterChain(<span class="hljs-keyword">new</span> AntPathRequestMatcher(<span class="hljs-string">"/**"</span>), filters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Security 的底层实际上就是一堆过滤器，所以我们之前在 configure(HttpSecurity) 方法中的配置，实际上就是配置过滤器链。现在过滤器链的配置，我们通过提供一个 SecurityFilterChain Bean 来配置过滤器链，SecurityFilterChain 是一个接口，这个接口只有一个实现类 DefaultSecurityFilterChain，构建 DefaultSecurityFilterChain 的第一个参数是拦截规则，也就是哪些路径需要拦截，第二个参数则是过滤器链，这里我给了一个空集合，也就是我们的 Spring Security 会拦截下所有的请求，然后在一个空集合中走一圈就结束了，相当于不拦截任何请求。</p><p>此时重启项目，你会发现 <code>/hello</code> 也是可以直接访问的，就是因为这个路径不经过任何过滤器。</p><p>其实我觉得目前这中新写法比以前老的写法更直观，更容易让大家理解到 Spring Security 底层的过滤器链工作机制。</p><p>有小伙伴会说，这写法跟我以前写的也不一样呀！这么配置，我也不知道 Spring Security 中有哪些过滤器，其实，换一个写法，我们就可以将这个配置成以前那种样子：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">UserDetailsService <span class="hljs-title">userDetailsService</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager users = <span class="hljs-keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        users.createUser(User.withUsername(<span class="hljs-string">"javaboy"</span>).password(<span class="hljs-string">"&#123;noop&#125;123"</span>).roles(<span class="hljs-string">"admin"</span>).build());</span><br><span class="line">        users.createUser(User.withUsername(<span class="hljs-string">"江南一点雨"</span>).password(<span class="hljs-string">"&#123;noop&#125;123"</span>).roles(<span class="hljs-string">"admin"</span>).build());</span><br><span class="line">        <span class="hljs-keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-function">SecurityFilterChain <span class="hljs-title">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">        <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么写，就跟以前的写法其实没啥大的差别了。</p><p>好啦，多余的废话我就不多说了，小伙伴们可以去试试 Spring Boot2.7 的最新玩法啦～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来聊一个简单的话题～是一个小伙伴在星球上的提问。&lt;/p&gt;
&lt;p&gt;进入到 SpringBoot2.7 时代，有小伙伴发现有一个常用的类忽然过期了：&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>听说 TCC 不支持 OpenFeign？这个坑松哥必须给大家填了！</title>
    <link href="http://www.javaboy.org/2022/0606/seata-tcc.html"/>
    <id>http://www.javaboy.org/2022/0606/seata-tcc.html</id>
    <published>2022-06-06T15:18:18.000Z</published>
    <updated>2022-07-19T15:49:29.512Z</updated>
    
    <content type="html"><![CDATA[<p>友情提示：本文略长略复杂，但是有配套的视频教程，对视频感兴趣的小伙伴戳这里：<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247497947&amp;idx=1&amp;sn=c6851795e8371739215c877237fa9b6a&amp;chksm=e9c0aabbdeb723adc5fe1e30bda90e5188b49898c6e436416e1c6e90e23f1c937b29366b0b9d#rd" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p><p>在前面的文章中，松哥和大家聊了分布式事务框架 seata 的 at 模式，然后有小伙伴评论说 seata 的 tcc 模式不支持 Spring Boot：</p><a id="more"></a><p><img src="http://img.itboyhub.com/2021/10/tran/20220604110230.png" alt></p><p>这。。。必然是支持的呀！</p><p>我一直觉得网上讲分布式事务的理论很多，案例代码很少，所以咱们今天就整一个例子，一起来把这个捋一捋。</p><h2 id="1-什么是-TCC-模式"><a href="#1-什么是-TCC-模式" class="headerlink" title="1. 什么是 TCC 模式"></a>1. 什么是 TCC 模式</h2><p>相比于<a href="https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA" target="_blank" rel="noopener">上篇文章</a>所聊的 AT 模式，TCC（Try-Confirm-Cancel） 模式就带一点手动的感觉了，它也是两阶段提交的演化，但是和 AT 又不太一样，我们来看下流程。</p><p>官网上有一张 TCC 的流程图，我们来看下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220529204515.png" alt></p><p>可以看到，TCC 也是分为两阶段：</p><ul><li>第一阶段是 prepare，在这个阶段主要是做资源的检测和预留工作，例如银行转账，这个阶段就先去检查下用户的钱够不够，不够就直接抛异常，够就先给冻结上。</li><li>第二阶段是 commit 或 rollback，这个主要是等各个分支事务的一阶段都执行完毕，都执行完毕后各自将自己的情况报告给 TC，TC 一统计，发现各个分支事务都没有异常，那么就通知大家一起提交；如果 TC 发现有分支事务发生异常了，那么就通知大家回滚。</li></ul><p>那么小伙伴可能也发现了，上面这个流程中，一共涉及到了三个方法，prepare、commit 以及 rollback，这三个方法都完全是用户自定义的方法，都是需要我们自己来实现的，所以我一开始就说 TCC 是一种手动的模式。</p><p>和 AT 相比，大家发现 TCC 这种模式其实是不依赖于底层数据库的事务支持的，也就是说，哪怕你底层数据库不支持事务也没关系，反正 prepare、commit 以及 rollback 三个方法都是开发者自己写的，我们自己将这三个方法对应的流程捋顺就行了。</p><p>在<a href="https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA" target="_blank" rel="noopener">上篇文章</a>的中，我们讲 AT 模式，每个数据库都需要有一个 undo log 表，这个表用来记录一条数据更改之前和更改之后的状态（前镜像和后镜像），如果所有分支事务最终都提交成功，那么记录在 undo log 表中的数据就会自动删除；如果有一个分支事务执行失败，导致所有事务都需要回滚，那么就会以 undo log 表中的数据会依据，生成反向补偿语句，利用反向补偿语句将数据复原，执行完成后也会删除 undo log 表中的记录。</p><p>在这个流程中，大家看到，undo log 表扮演了非常重要的角色。<strong>TCC 和 AT 最大的区别在于，TCC 中的提交和回滚逻辑都是开发者自己写的，而 AT 都是框架自动完成的。</strong></p><p>为了方便大家理解，本文我就不重新搞案例了，咱们还用<a href="https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA" target="_blank" rel="noopener">上篇文章</a>那个下订单的案例来演示。</p><h2 id="2-案例回顾"><a href="#2-案例回顾" class="headerlink" title="2. 案例回顾"></a>2. 案例回顾</h2><p>这是一个商品下单的案例，一共有五个服务，我来和大家稍微解释下：</p><ul><li>eureka：这是服务注册中心。</li><li>account：这是账户服务，可以查询/修改用户的账户信息（主要是账户余额）。</li><li>order：这是订单服务，可以下订单。</li><li>storage：这是一个仓储服务，可以查询/修改商品的库存数量。</li><li>bussiness：这是业务，用户下单操作将在这里完成。</li></ul><p>这个案例讲了一个什么事呢？</p><p><strong>当用户想要下单的时候，调用了 bussiness 中的接口，bussiness 中的接口又调用了它自己的 service，在 service 中，首先开启了全局分布式事务，然后通过 feign 调用 storage 中的接口去扣库存，然后再通过 feign 调用 order 中的接口去创建订单（order 在创建订单的时候，不仅会创建订单，还会扣除用户账户的余额），在这个过程中，如果有任何一个环节出错了（余额不足、库存不足等导致的问题），就会触发整体的事务回滚。</strong></p><p>本案例具体架构如下图：</p><p><img src="http://img.itboyhub.com/2021/07/20210810204721.png" alt></p><p>这个案例就是一个典型的分布式事务问题，storage、order 以及 account 中的事务分属于不同的微服务，但是我们希望他们同时成功或者同时失败。</p><p>这个案例的基本架构我这里就不重复搭建了，小伙伴们可以参考<a href="https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA" target="_blank" rel="noopener">上篇文章</a>，这里我们主要来看 TCC 事务如何添加进来。</p><h2 id="3-重新设计数据库"><a href="#3-重新设计数据库" class="headerlink" title="3. 重新设计数据库"></a>3. 重新设计数据库</h2><p>首先我们将<a href="https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA" target="_blank" rel="noopener">上篇文章</a>中的数据库来重新设计一下，方便我们本文的使用。</p><p>账户表增加一个冻结金额的字段，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220604212102.png" alt></p><p>订单表和前文保持一致，不变。</p><p>库存表也增加一个冻结库存数量的字段，如下：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220604212154.png" alt></p><p>另外，由于我们这里不再使用 AT 模式，所以可以删除之前的 undo_log 表了（可能有小伙伴删除 undo_log 表之后，会报错，那是因为你 TCC 模式使用不对，注意看松哥后面的讲解哦）。</p><p>相关的数据库脚本小伙伴们可以在文末下载，这里我就不列出来了。</p><h2 id="4-重新设计-Feign-接口"><a href="#4-重新设计-Feign-接口" class="headerlink" title="4. 重新设计 Feign 接口"></a>4. 重新设计 Feign 接口</h2><p>在 TCC 模式中，我们的 Feign 换一种方式来配置。</p><p>小伙伴们都知道，在<a href="https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA" target="_blank" rel="noopener">上篇文章</a>的案例中，我们有一个 common 模块，用来存放一些公共内容（实际上我们只是存储了 RespBean），现在我们把这里涉及到的 OpenFeign 接口也存储进来，一共是三个 OpenFeign 接口，因为还要用到 seata 中的注解，所以我们在 common 中引入 OpenFeign 和 seata 的依赖，如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在这里定义 OpenFeign 的三个接口，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@LocalTCC</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountServiceApi</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/account/deduct/prepare"</span>)</span><br><span class="line">    <span class="hljs-meta">@TwoPhaseBusinessAction</span>(name = <span class="hljs-string">"accountServiceApi"</span>, commitMethod = <span class="hljs-string">"commit"</span>, rollbackMethod = <span class="hljs-string">"rollback"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">prepare</span><span class="hljs-params">(@RequestBody BusinessActionContext actionContext, @RequestParam(<span class="hljs-string">"userId"</span>)</span> @<span class="hljs-title">BusinessActionContextParameter</span><span class="hljs-params">(paramName = <span class="hljs-string">"userId"</span>)</span> String userId, @<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"money"</span>)</span> @<span class="hljs-title">BusinessActionContextParameter</span><span class="hljs-params">(paramName = <span class="hljs-string">"money"</span>)</span> Double money)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/account/deduct/commit"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">commit</span><span class="hljs-params">(@RequestBody BusinessActionContext actionContext)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/account/deduct/rollback"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">rollback</span><span class="hljs-params">(@RequestBody BusinessActionContext actionContext)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@LocalTCC</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderServiceApi</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/order/create/prepare"</span>)</span><br><span class="line">    <span class="hljs-meta">@TwoPhaseBusinessAction</span>(name = <span class="hljs-string">"orderServiceApi"</span>, commitMethod = <span class="hljs-string">"commit"</span>, rollbackMethod = <span class="hljs-string">"rollback"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">prepare</span><span class="hljs-params">(@RequestBody BusinessActionContext actionContext, @RequestParam(<span class="hljs-string">"userId"</span>)</span> @<span class="hljs-title">BusinessActionContextParameter</span><span class="hljs-params">(paramName = <span class="hljs-string">"userId"</span>)</span> String userId, @<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"productId"</span>)</span> @<span class="hljs-title">BusinessActionContextParameter</span><span class="hljs-params">(paramName = <span class="hljs-string">"productId"</span>)</span> String productId, @<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"count"</span>)</span> @<span class="hljs-title">BusinessActionContextParameter</span><span class="hljs-params">(paramName = <span class="hljs-string">"count"</span>)</span> Integer count)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/order/create/commit"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">commit</span><span class="hljs-params">(@RequestBody BusinessActionContext actionContext)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/order/create/rollback"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">rollback</span><span class="hljs-params">(@RequestBody BusinessActionContext actionContext)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@LocalTCC</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StorageServiceApi</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/storage/deduct/prepare"</span>)</span><br><span class="line">    <span class="hljs-meta">@TwoPhaseBusinessAction</span>(name = <span class="hljs-string">"storageServiceApi"</span>,commitMethod = <span class="hljs-string">"commit"</span>,rollbackMethod = <span class="hljs-string">"rollback"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">deduct</span><span class="hljs-params">(@RequestBody BusinessActionContext actionContext, @RequestParam(<span class="hljs-string">"productId"</span>)</span>@<span class="hljs-title">BusinessActionContextParameter</span><span class="hljs-params">(paramName = <span class="hljs-string">"productId"</span>)</span> String productId, @<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"count"</span>)</span> @<span class="hljs-title">BusinessActionContextParameter</span><span class="hljs-params">(paramName = <span class="hljs-string">"count"</span>)</span> Integer count)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/storage/deduct/commit"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">commit</span><span class="hljs-params">(@RequestBody BusinessActionContext actionContext)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/storage/deduct/rollback"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">rollback</span><span class="hljs-params">(@RequestBody BusinessActionContext actionContext)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里一共有三个接口，但是只要大家搞懂其中一个，另外两个都很好懂了。我这里就以 AccountServiceApi 为例来和大家讲解吧。</p><ul><li>首先接口的定义上，需要加一个注解 @LocalTCC，这个表示开启 seata 中的 TCC 模式。</li><li>然后就是 @TwoPhaseBusinessAction 注解，两阶段提交的注解，这个注解有三个属性，第一个 name 就是处理两阶段提交的 bean 的名字，其实就是当前 bean 的名字，当前类名首字母小写。两阶段第一阶段就是 prepare 阶段，也就是执行 @TwoPhaseBusinessAction 注解所在的方法，第二阶段则分为两种情况，提交或者回滚，分别对应了两个不同的方法，commitMethod 和 rollbackMethod 就指明了相应的方法。</li><li>一阶段的 prepare 需要开发者手动调用，二阶段的 commit 或者 rollback 则是系统自动调用。prepare 中的方法是由开发者来传递的，而在二阶段的方法中，相关的参数我们需要从 BusinessActionContext 中获取，@BusinessActionContextParameter 注解就是将对应的参数放入到 BusinessActionContext 中（注意需要给每一个参数取一个名字），将来可以从 BusinessActionContext 中取出对应的参数。</li><li>另外需要注意，接口的返回值设计成 boolean，用以表示相应的操作执行成功还是失败，返回 false 表示执行失败，默认会有重试机制进行重试。</li></ul><p>这是 AccountServiceApi，另外两个接口的设计也是大同小异，这里我就不再赘述。</p><p>接下来看接口的实现。</p><h2 id="5-Account"><a href="#5-Account" class="headerlink" title="5. Account"></a>5. Account</h2><p>首先我们来看看 Account 服务。AccountController 实现 AccountServiceApi。</p><p>我们来看下 AccountController 的定义：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountServiceApi</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">prepare</span><span class="hljs-params">(BusinessActionContext actionContext, String userId, Double money)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> accountService.prepareDeduct(userId, money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">commit</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> accountService.commitDeduct(actionContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">rollback</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> accountService.rollbackDeduct(actionContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为接口的路径都定义在 AccountServiceApi 中了，所以这里只需要简单实现即可，核心的处理逻辑在 AccountService 中，我们来看下 AccountService：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger(AccountService.class);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 预扣款阶段</span></span><br><span class="line"><span class="hljs-comment">     * 检查账户余额</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> money</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">prepareDeduct</span><span class="hljs-params">(String userId, Double money)</span> </span>&#123;</span><br><span class="line">        Account account = accountMapper.getAccountByUserId(userId);</span><br><span class="line">        <span class="hljs-keyword">if</span> (account == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"账户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (account.getMoney() &lt; money) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"余额不足，预扣款失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        account.setFreezeMoney(account.getFreezeMoney() + money);</span><br><span class="line">        account.setMoney(account.getMoney() - money);</span><br><span class="line">        Integer i = accountMapper.updateAccount(account);</span><br><span class="line">        logger.info(<span class="hljs-string">"&#123;&#125; 账户预扣款 &#123;&#125; 元"</span>, userId, money);</span><br><span class="line">        <span class="hljs-keyword">return</span> i == <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 实际扣款阶段</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> actionContext</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">commitDeduct</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        String userId = (String) actionContext.getActionContext(<span class="hljs-string">"userId"</span>);</span><br><span class="line">        Double money = ((BigDecimal) actionContext.getActionContext(<span class="hljs-string">"money"</span>)).doubleValue();</span><br><span class="line">        Account account = accountMapper.getAccountByUserId(userId);</span><br><span class="line">        <span class="hljs-keyword">if</span> (account.getFreezeMoney() &lt; money) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"余额不足，扣款失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        account.setFreezeMoney(account.getFreezeMoney() - money);</span><br><span class="line">        Integer i = accountMapper.updateAccount(account);</span><br><span class="line">        logger.info(<span class="hljs-string">"&#123;&#125; 账户扣款 &#123;&#125; 元"</span>, userId, money);</span><br><span class="line">        <span class="hljs-keyword">return</span> i == <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 账户回滚阶段</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> actionContext</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">rollbackDeduct</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        String userId = (String) actionContext.getActionContext(<span class="hljs-string">"userId"</span>);</span><br><span class="line">        Double money = ((BigDecimal) actionContext.getActionContext(<span class="hljs-string">"money"</span>)).doubleValue();</span><br><span class="line">        Account account = accountMapper.getAccountByUserId(userId);</span><br><span class="line">        <span class="hljs-keyword">if</span> (account.getFreezeMoney() &gt;= money) &#123;</span><br><span class="line">            account.setMoney(account.getMoney() + money);</span><br><span class="line">            account.setFreezeMoney(account.getFreezeMoney() - money);</span><br><span class="line">            Integer i = accountMapper.updateAccount(account);</span><br><span class="line">            logger.info(<span class="hljs-string">"&#123;&#125; 账户释放冻结金额 &#123;&#125; 元"</span>, userId, money);</span><br><span class="line">            <span class="hljs-keyword">return</span> i == <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="hljs-string">"&#123;&#125; 账户资金已释放"</span>,userId);</span><br><span class="line">        <span class="hljs-comment">//说明prepare中抛出异常，未冻结资金</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AccountService 里一共有三个方法，在整个两阶段提交中，一阶段执行 prepareDeduct 方法，二阶段执行 commitDeduct 或者 rollbackDeduct 方法。</li><li>在 prepareDeduct 中，我们主要检查一下账户是否存在，账户余额是否充足，余额充足就将本次消费的金额冻结起来，冻结的逻辑就是给 freezeMoney 字段增加本次消费金额，从 money 字段减少本次消费金额。</li><li>等到其他几个服务的一阶段方法都执行完成后，都没有抛出异常，此时就执行二阶段的提交方法，对应这里就是 commitDeduct 方法；如果其他服务的一阶段执行过程中，抛出了异常，那么就执行二阶段的回滚方法，对应这里的 rollbackDeduct。</li><li>在 commitDeduct 方法中，首先从 BusinessActionContext 中提取出来我们需要的参数（因为这个方法是系统自动调用的，不是我们手动调用，因此没法自己传参数进来，只能通过 BusinessActionContext 来获取），然后再检查一下余额是否充足，没问题就把冻结的资金划掉，就算扣款完成了。</li><li>在 rollbackDeduct 方法中，也是先从 BusinessActionContext 中获取相应的参数，检查一下冻结的金额，没问题就把冻结的金额恢复到 money 字段上（如果没进入 if 分支，则说明 prepare 中抛出异常，未冻结资金）。</li></ul><p>好了，这就是从账户扣钱的两阶段操作，数据库操作比较简单，我这里就不列出来了，文末可以下载源码。</p><h2 id="6-Order"><a href="#6-Order" class="headerlink" title="6. Order"></a>6. Order</h2><p>再来看订单服务。</p><p>由于我们是在 order 中调用 account 完成账户扣款的，所以需要先在 order 中加入 account 的 OpenFeign 调用，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@FeignClient</span>(<span class="hljs-string">"account"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountServiceApiImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AccountServiceApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这应该没啥好解释的。</p><p>接下来我们来看 OrderController：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderServiceApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">prepare</span><span class="hljs-params">(BusinessActionContext actionContext, String userId, String productId, Integer count)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> orderService.prepareCreateOrder(actionContext,userId, productId, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">commit</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> orderService.commitOrder(actionContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">rollback</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> orderService.rollbackOrder(actionContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个跟 AccountService 也基本一致，实现了 OrderServiceApi 接口，接口地址啥的都定义在 OrderServiceApi 中，这个类重点还是在 OrderService 中，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger(OrderService.class);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    AccountServiceApi accountServiceApi;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">prepareCreateOrder</span><span class="hljs-params">(BusinessActionContext actionContext, String userId, String productId, Integer count)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//先去扣款，假设每个产品100块钱</span></span><br><span class="line">        <span class="hljs-keyword">boolean</span> resp = accountServiceApi.prepare(actionContext, userId, count * <span class="hljs-number">100.0</span>);</span><br><span class="line">        logger.info(<span class="hljs-string">"&#123;&#125; 用户购买的 &#123;&#125; 商品共计 &#123;&#125; 件，预下单成功"</span>, userId, productId, count);</span><br><span class="line">        <span class="hljs-keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">commitOrder</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        String userId = (String) actionContext.getActionContext(<span class="hljs-string">"userId"</span>);</span><br><span class="line">        String productId = (String) actionContext.getActionContext(<span class="hljs-string">"productId"</span>);</span><br><span class="line">        Integer count = (Integer) actionContext.getActionContext(<span class="hljs-string">"count"</span>);</span><br><span class="line">        <span class="hljs-keyword">int</span> i = orderMapper.addOrder(userId, productId, count, count * <span class="hljs-number">100.0</span>);</span><br><span class="line">        logger.info(<span class="hljs-string">"&#123;&#125; 用户购买的 &#123;&#125; 商品共计 &#123;&#125; 件，下单成功"</span>, userId, productId, count);</span><br><span class="line">        <span class="hljs-keyword">return</span> i==<span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">rollbackOrder</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        String userId = (String) actionContext.getActionContext(<span class="hljs-string">"userId"</span>);</span><br><span class="line">        String productId = (String) actionContext.getActionContext(<span class="hljs-string">"productId"</span>);</span><br><span class="line">        Integer count = (Integer) actionContext.getActionContext(<span class="hljs-string">"count"</span>);</span><br><span class="line">        logger.info(<span class="hljs-string">"&#123;&#125; 用户购买的 &#123;&#125; 商品共计 &#123;&#125; 件，订单回滚成功"</span>, userId, productId, count);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟之前的 AccountService 一样，这里也是三个核心方法：</p><ul><li>prepareCreateOrder：这里主要是调用了一下账户的方法，去检查下看下钱够不。一阶段就做个这事。</li><li>commitOrder：二阶段如果是提交的话，就向数据库中添加一条订单记录。</li><li>rollbackOrder：二阶段如果是回滚的话，就什么事情都不做，打个日志就行了。</li></ul><p>好了，这就是下单的操作。</p><h2 id="7-Storage"><a href="#7-Storage" class="headerlink" title="7. Storage"></a>7. Storage</h2><p>最后我们再来看看扣库存的操作，这个跟扣款比较像，一起来看下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StorageController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StorageServiceApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    StorageService storageService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deduct</span><span class="hljs-params">(BusinessActionContext actionContext, String productId, Integer count)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> storageService.prepareDeduct(productId, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">commit</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> storageService.commitDeduct(actionContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">rollback</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> storageService.rollbackDeduct(actionContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑在 StorageService 中，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger(StorageService.class);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    StorageMapper storageMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 预扣库存</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> productId</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">prepareDeduct</span><span class="hljs-params">(String productId, Integer count)</span> </span>&#123;</span><br><span class="line">        Storage storage = storageMapper.getStorageByProductId(productId);</span><br><span class="line">        <span class="hljs-keyword">if</span> (storage == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"商品不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (storage.getCount() &lt; count) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"库存不足，预扣库存失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        storage.setFreezeCount(storage.getFreezeCount() + count);</span><br><span class="line">        storage.setCount(storage.getCount() - count);</span><br><span class="line">        <span class="hljs-keyword">int</span> i = storageMapper.updateStorage(storage);</span><br><span class="line">        logger.info(<span class="hljs-string">"&#123;&#125; 商品库存冻结 &#123;&#125; 个"</span>, productId, count);</span><br><span class="line">        <span class="hljs-keyword">return</span> i == <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 扣库存</span></span><br><span class="line"><span class="hljs-comment">     *</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> actionContext</span></span><br><span class="line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">commitDeduct</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        String productId = (String) actionContext.getActionContext(<span class="hljs-string">"productId"</span>);</span><br><span class="line">        Integer count = (Integer) actionContext.getActionContext(<span class="hljs-string">"count"</span>);</span><br><span class="line">        Storage storage = storageMapper.getStorageByProductId(productId);</span><br><span class="line">        <span class="hljs-keyword">if</span> (storage.getFreezeCount() &lt; count) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"库存不足，扣库存失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        storage.setFreezeCount(storage.getFreezeCount() - count);</span><br><span class="line">        <span class="hljs-keyword">int</span> i = storageMapper.updateStorage(storage);</span><br><span class="line">        logger.info(<span class="hljs-string">"&#123;&#125; 商品库存扣除 &#123;&#125; 个"</span>, productId, count);</span><br><span class="line">        <span class="hljs-keyword">return</span> i == <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">rollbackDeduct</span><span class="hljs-params">(BusinessActionContext actionContext)</span> </span>&#123;</span><br><span class="line">        String productId = (String) actionContext.getActionContext(<span class="hljs-string">"productId"</span>);</span><br><span class="line">        Integer count = (Integer) actionContext.getActionContext(<span class="hljs-string">"count"</span>);</span><br><span class="line">        Storage storage = storageMapper.getStorageByProductId(productId);</span><br><span class="line">        <span class="hljs-keyword">if</span> (storage.getFreezeCount() &gt;= count) &#123;</span><br><span class="line">            storage.setFreezeCount(storage.getFreezeCount() - count);</span><br><span class="line">            storage.setCount(storage.getCount() + count);</span><br><span class="line">            <span class="hljs-keyword">int</span> i = storageMapper.updateStorage(storage);</span><br><span class="line">            logger.info(<span class="hljs-string">"&#123;&#125; 商品释放库存 &#123;&#125; 个"</span>, productId, count);</span><br><span class="line">            <span class="hljs-keyword">return</span> i == <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//说明 prepare 阶段就没有冻结</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个跟 AccountService 的逻辑基本上是一样的，我就不多做解释了。</p><h2 id="8-Business"><a href="#8-Business" class="headerlink" title="8. Business"></a>8. Business</h2><p>最后再来看看调用的入口 Business。Business 中要调用 storage 和 order，所以先把这两个的 OpenFeign 整进来：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@FeignClient</span>(<span class="hljs-string">"order"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderServiceApiImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OrderServiceApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@FeignClient</span>(<span class="hljs-string">"storage"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StorageServiceApiImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StorageServiceApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看下接口调用：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BusinessController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    BusinessService businessService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/order"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> RespBean <span class="hljs-title">order</span><span class="hljs-params">(String account, String productId, Integer count)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            businessService.purchase(account, productId, count);</span><br><span class="line">            <span class="hljs-keyword">return</span> RespBean.ok(<span class="hljs-string">"下单成功"</span>);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="hljs-keyword">return</span> RespBean.error(<span class="hljs-string">"下单失败"</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BusinessService</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    StorageServiceApi storageServiceApi;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    OrderServiceApi orderServiceApi;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GlobalTransactional</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">purchase</span><span class="hljs-params">(String account, String productId, Integer count)</span> </span>&#123;</span><br><span class="line">        String xid = RootContext.getXID();</span><br><span class="line">        BusinessActionContext actionContext = <span class="hljs-keyword">new</span> BusinessActionContext();</span><br><span class="line">        actionContext.setXid(xid);</span><br><span class="line">        storageServiceApi.deduct(actionContext, productId, count);</span><br><span class="line">        orderServiceApi.prepare(actionContext, account, productId, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BusinessService 中通过 RootContext 获取全局事务 ID，然后构造一个 BusinessActionContext 对象，开始整个流程的调用。</p><p>好啦，大功告成。</p><h2 id="9-测试"><a href="#9-测试" class="headerlink" title="9. 测试"></a>9. 测试</h2><p>最后再来个简单测试，成功的测试：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220604225538.png" alt></p><p>调用失败的测试：</p><p><img src="http://img.itboyhub.com/2021/10/tran/20220604225614.png" alt></p><p>好啦，这篇文章太长了，我就不啰嗦了，本文需要结合<a href="https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA" target="_blank" rel="noopener">上篇文章</a>一起食用效果更佳～当然，本文也有配套视频，戳这里：<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;mid=2247497947&amp;idx=1&amp;sn=c6851795e8371739215c877237fa9b6a&amp;chksm=e9c0aabbdeb723adc5fe1e30bda90e5188b49898c6e436416e1c6e90e23f1c937b29366b0b9d#rd" target="_blank" rel="noopener">TienChin 项目配套视频来啦</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;友情提示：本文略长略复杂，但是有配套的视频教程，对视频感兴趣的小伙伴戳这里：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&amp;amp;mid=2247497947&amp;amp;idx=1&amp;amp;sn=c6851795e8371739215c877237fa9b6a&amp;amp;chksm=e9c0aabbdeb723adc5fe1e30bda90e5188b49898c6e436416e1c6e90e23f1c937b29366b0b9d#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TienChin 项目配套视频来啦&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在前面的文章中，松哥和大家聊了分布式事务框架 seata 的 at 模式，然后有小伙伴评论说 seata 的 tcc 模式不支持 Spring Boot：&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 多数据源如何处理事务？教你一招！</title>
    <link href="http://www.javaboy.org/2022/0602/dynamic-datasource-transaction.html"/>
    <id>http://www.javaboy.org/2022/0602/dynamic-datasource-transaction.html</id>
    <published>2022-06-02T15:18:04.000Z</published>
    <updated>2022-07-19T15:49:23.100Z</updated>
    
    <content type="html"><![CDATA[<p>好啦，经过前面几篇文章的学习，现在小伙伴们已经明白了多数据源要怎么玩了：</p><ul><li><a href="https://mp.weixin.qq.com/s/g71F3cnLtD4zqJGFCeJckQ" target="_blank" rel="noopener">手把手教你玩多数据源动态切换！</a></li><li><a href="https://mp.weixin.qq.com/s/JmVUDyyFT8OB_F8fj3FvqQ" target="_blank" rel="noopener">网页上点一下，就能切换不同数据源？松哥手把手教你！</a></li></ul><p>也明白了分布式事务要怎么玩了：</p><a id="more"></a><ul><li><a href="https://mp.weixin.qq.com/s/fzlr-6pDPWKbwVuJlXe8sA" target="_blank" rel="noopener">手把手带领小伙伴们写一个分布式事务案例！</a></li></ul><p>那么接下来的问题，就是如何利用分布式事务来处理多数据源中的事务问题。</p><p>首先我先声明一点，本文单纯就是技术探讨，要从实际应用中来说的话，我并不建议这样去玩分布式事务、也不建议这样去玩多数据源，毕竟分布式事务主要还是用在微服务场景下。</p><p>好啦，那就不废话了，开整。</p><h2 id="1-思路梳理"><a href="#1-思路梳理" class="headerlink" title="1. 思路梳理"></a>1. 思路梳理</h2><p>首先我们来梳理一下思路。</p><p>在上篇文章中，我们是一个微服务，在 A 中分别去调用 B 和 C，当 B 或者 C 有一个执行失败的时候，就去回滚。B 和 C 都是调用远程的服务，所谓的回滚也不是传统意义上的数据库回滚，而是一种“<strong>反向补偿</strong>”，即利用一条更新 SQL，将已经更新的数据复原。在这个例子中，B 和 C 都是远程服务，操作的也都是不同的数据库，这不就是我们多数据源中的情况么！</p><p>在微服务中，一个服务实际上就代表了一个数据源，而在我们多数据源的案例中，一个注解就能标记出来一个数据源，这样一类比，你就会发现利用分布式事务来解决多数据源中的事务问题其实是非常 Easy 的。而且这里还不是微服务项目，只是一个单体项目，更简单！</p><p>不过也有一些需要注意的细节。</p><h2 id="2-代码实践"><a href="#2-代码实践" class="headerlink" title="2. 代码实践"></a>2. 代码实践</h2><p>接下来我们就结合代码来讲讲。</p><h3 id="2-1-案例准备"><a href="#2-1-案例准备" class="headerlink" title="2.1 案例准备"></a>2.1 案例准备</h3><p>首先多数据源的案例我就不重复写了，我们之前已经写过一个，这里就不再赘述，文章一开头也有相关的链接，还没看过的小伙伴可以先看看。</p><p>也可以直接在公众号后台回复 <code>dynamic_datasource</code> 获取相关的案例。</p><h3 id="2-2-开始整活"><a href="#2-2-开始整活" class="headerlink" title="2.2 开始整活"></a>2.2 开始整活</h3><p>因为上篇文章我主要是和大家分享的 seata 的 AT 模式，所以本文也是一样，就先采用 AT 模式。</p><p>小伙伴们知道，在我们的多数据源案例中，我们用到了两个库，test08 和 test09，现在也还是这两个库，但是现在由于我们使用的是 AT 模式，我们需要在这两个库中分别创建 undo log 表，用来记录我们对表的更新操作，当事务提交之后，undo log 表中的数据就会被清除，undo log，undo log 表的脚本如下：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`undo_log`</span> (</span><br><span class="line">  <span class="hljs-string">`id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="hljs-string">`branch_id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`xid`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`context`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`rollback_info`</span> longblob <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`log_status`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`log_created`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  <span class="hljs-string">`log_modified`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>),</span><br><span class="line">  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-string">`ux_undo_log`</span> (<span class="hljs-string">`xid`</span>,<span class="hljs-string">`branch_id`</span>)</span><br><span class="line">) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">1</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>数据库准备好之后，接下来就是准备依赖了，seata 有两个依赖，一个是 seata-all，还有一个微服务版的，咱们这里就直接使用上篇文章中所用到的微服务版的，依赖如下：</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配好之后，接下来提供两个配置文件 file.conf 和 regsigry.conf，这两个配置文件和上篇文章中介绍到的一模一样，这里不再赘述。</p><p>接下来配置 application.yaml，如下：</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line"><span class="hljs-attr">  cloud:</span></span><br><span class="line"><span class="hljs-attr">    alibaba:</span></span><br><span class="line"><span class="hljs-attr">      seata:</span></span><br><span class="line"><span class="hljs-attr">        tx-service-group:</span> <span class="hljs-string">my_test_tx_group</span></span><br><span class="line"><span class="hljs-attr">  main:</span></span><br><span class="line"><span class="hljs-attr">    allow-circular-references:</span> <span class="hljs-literal">true</span></span><br><span class="line"><span class="hljs-attr">seata:</span></span><br><span class="line"><span class="hljs-attr">  enable-auto-data-source-proxy:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-attr">  application-id:</span> <span class="hljs-string">dd</span></span><br></pre></td></tr></table></figure><p>大家看下这里的几个配置：</p><ul><li>tx-service-group：这个是事务群组的名称，相关名字是在 file.conf 中配置的。</li><li>allow-circular-references：这个是允许循环依赖，可能有的小伙伴已经知道，现在最新版的 Spring Boot 中已经禁掉了循环依赖，但是这个 seata 中似乎还是用到了循环依赖，所以要开启。</li><li>enable-auto-data-source-proxy：由于 seata 会自动代理数据源，但是我们现在的数据源是自己加载的，所以关闭掉这个数据源的自动代理，将来用自己的。</li><li>application-id：给我们的应用取一个名字。</li></ul><p>好啦，这个文件就配置好了。</p><p>接下来就是数据源问题了，刚刚说了，seata 中会自动代理数据源，用到的代理对象是 DataSourceProxy，而我们在之前自定义的数据源加载中，并没有用到这个 DataSourceProxy 对象所以这里要稍作修改，一共改两个地方，如下：</p><p><strong>LoadDataSource.java</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-meta">@EnableConfigurationProperties</span>(DruidProperties.class)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoadDataSource</span> </span>&#123;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    DruidProperties druidProperties;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, DataSourceProxy&gt; <span class="hljs-title">loadAllDataSource</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, DataSourceProxy&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, Map&lt;String, String&gt;&gt; ds = druidProperties.getDs();</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            Set&lt;String&gt; keySet = ds.keySet();</span><br><span class="line">            <span class="hljs-keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">                DataSource dataSource = druidProperties.dataSource((DruidDataSource) DruidDataSourceFactory.createDataSource(ds.get(key)));</span><br><span class="line">                DataSourceProxy proxyDs = <span class="hljs-keyword">new</span> DataSourceProxy(dataSource);</span><br><span class="line">                map.put(key, proxyDs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里的改动就是把之前的 DataSource 用 DataSourceProxy 重新包裹一下，然后将获取到的 DataSourceProxy 存起来。最后再修改一下动态数据源的地方：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DynamicDataSource</span><span class="hljs-params">(LoadDataSource loadDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//1.设置所有的数据源</span></span><br><span class="line">        Map&lt;String, DataSourceProxy&gt; allDs = loadDataSource.loadAllDataSource();</span><br><span class="line">        <span class="hljs-keyword">super</span>.setTargetDataSources(<span class="hljs-keyword">new</span> HashMap&lt;&gt;(allDs));</span><br><span class="line">        <span class="hljs-comment">//2.设置默认的数据源</span></span><br><span class="line">        <span class="hljs-comment">//将来，并不是所有的方法上都有 @DataSource 注解，对于那些没有 @DataSource 注解的方法，该使用哪个数据源？</span></span><br><span class="line">        <span class="hljs-keyword">super</span>.setDefaultTargetDataSource(allDs.get(DataSourceType.DEFAULT_DS_NAME));</span><br><span class="line">        <span class="hljs-comment">//3</span></span><br><span class="line">        <span class="hljs-keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 这个方法用来返回数据源名称，当系统需要获取数据源的时候，会自动调用该方法获取数据源的名称</span></span><br><span class="line"><span class="hljs-comment">      * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">determineCurrentLookupKey</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> DynamicDataSourceContextHolder.getDataSourceType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map 中的 value 类型变为 DataSourceProxy，其他都不变。</p><p>另外还有一个地方要改造下，就是解析 <code>@DataSource</code> 注解的切面，在之前的解析中，我们是将异常捕获了，现在我们要将之抛出来，如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Around</span>(<span class="hljs-string">"pc()"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//获取方法上面的有效注解</span></span><br><span class="line">    DataSource dataSource = getDataSource(pjp);</span><br><span class="line">    <span class="hljs-keyword">if</span> (dataSource != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">//获取注解中数据源的名称</span></span><br><span class="line">        String value = dataSource.value();</span><br><span class="line">        DynamicDataSourceContextHolder.setDataSourceType(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> pjp.proceed();</span><br><span class="line">    &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">        DynamicDataSourceContextHolder.clearDataSourceType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将之抛出来的原因也很简单，因为这是切面方法，所有的 service 层方法都在这里执行，如果将异常捕获了，将来 service 层方法不抛出异常，事务就没法生效了。</p><p>好了，现在准备工作就算是到位了。</p><p>接下来我们写一个简单的多数据源事务的案例，首先我们来创建一个 MasterService，专门用来操作 master 数据源：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MasterService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    MasterMapper masterMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@DataSource</span>(<span class="hljs-string">"master"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(String username, Integer age)</span> </span>&#123;</span><br><span class="line">        masterMapper.addUser(username, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper 就不用看了吧，就是普通的添加，大家可以在文末下载本文案例案例。</p><p>再来一个 SlaveService，用来操作 slave 数据源：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SlaveService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    SlaveMapper slaveMapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@DataSource</span>(<span class="hljs-string">"slave"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addAccount</span><span class="hljs-params">(String name, Double balance)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;</span><br><span class="line">        slaveMapper.addAccount(name, balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>slave 数据源的方法中有一个异常。</p><p>最后，我们在 UserService 中分别调用这两个方法：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    MasterService masterService;</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    SlaveService slaveService;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GlobalTransactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        masterService.addUser(<span class="hljs-string">"javaboy.org"</span>, <span class="hljs-number">99</span>);</span><br><span class="line">        slaveService.addAccount(<span class="hljs-string">"javaboy.org"</span>, <span class="hljs-number">99.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，test 方法上有一个全局事务注解。</p><p>好啦，齐活！现在我们去执行这个 test 方法，由于 slaveService#addAccount 中的方法会抛出异常，所以会导致整个事务回滚，最终的结果就是 master 中也没有添加进数据。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>好啦，结合上一篇文章，相信大家应该能够熟练的使用 seata 分布式事务中的 at 模式了吧！关于本文的内容，松哥也会整一个视频放在 TienChin 项目的视频中，感兴趣的小伙伴戳戳戳这里：</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好啦，经过前面几篇文章的学习，现在小伙伴们已经明白了多数据源要怎么玩了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/g71F3cnLtD4zqJGFCeJckQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;手把手教你玩多数据源动态切换！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/JmVUDyyFT8OB_F8fj3FvqQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网页上点一下，就能切换不同数据源？松哥手把手教你！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也明白了分布式事务要怎么玩了：&lt;/p&gt;
    
    </summary>
    
      <category term="TienChin" scheme="http://www.javaboy.org/categories/TienChin/"/>
    
    
      <category term="Vue" scheme="http://www.javaboy.org/tags/Vue/"/>
    
      <category term="TienChin" scheme="http://www.javaboy.org/tags/TienChin/"/>
    
  </entry>
  
</feed>
